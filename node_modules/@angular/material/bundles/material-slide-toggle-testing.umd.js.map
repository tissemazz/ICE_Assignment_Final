{"version":3,"file":"material-slide-toggle-testing.umd.js","sources":["../../../../../../../src/material/slide-toggle/testing/slide-toggle-harness.ts","../../../../../../../src/material/slide-toggle/testing/public-api.ts","../../../../../../../src/material/slide-toggle/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SlideToggleHarnessFilters} from './slide-toggle-harness-filters';\n\n\n/** Harness for interacting with a standard mat-slide-toggle in tests. */\nexport class MatSlideToggleHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatSlideToggle` instance. */\n  static hostSelector = 'mat-slide-toggle';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSlideToggleHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which slide toggle instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SlideToggleHarnessFilters = {}): HarnessPredicate<MatSlideToggleHarness> {\n    return new HarnessPredicate(MatSlideToggleHarness, options)\n        .addOption('label', options.label,\n            (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label))\n        // We want to provide a filter option for \"name\" because the name of the slide-toggle is\n        // only set on the underlying input. This means that it's not possible for developers\n        // to retrieve the harness of a specific checkbox with name through a CSS selector.\n        .addOption('name', options.name, async (harness, name) => await harness.getName() === name);\n  }\n\n  private _label = this.locatorFor('label');\n  private _input = this.locatorFor('input');\n  private _inputContainer = this.locatorFor('.mat-slide-toggle-bar');\n\n  /** Whether the slide-toggle is checked. */\n  async isChecked(): Promise<boolean> {\n    const checked = (await this._input()).getProperty('checked');\n    return coerceBooleanProperty(await checked);\n  }\n\n  /** Whether the slide-toggle is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this._input()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  /** Whether the slide-toggle is required. */\n  async isRequired(): Promise<boolean> {\n    const required = (await this._input()).getAttribute('required');\n    return coerceBooleanProperty(await required);\n  }\n\n  /** Whether the slide-toggle is valid. */\n  async isValid(): Promise<boolean> {\n    const invalid = (await this.host()).hasClass('ng-invalid');\n    return !(await invalid);\n  }\n\n  /** Gets the slide-toggle's name. */\n  async getName(): Promise<string | null> {\n    return (await this._input()).getAttribute('name');\n  }\n\n  /** Gets the slide-toggle's aria-label. */\n  async getAriaLabel(): Promise<string | null> {\n    return (await this._input()).getAttribute('aria-label');\n  }\n\n  /** Gets the slide-toggle's aria-labelledby. */\n  async getAriaLabelledby(): Promise<string | null> {\n    return (await this._input()).getAttribute('aria-labelledby');\n  }\n\n  /** Gets the slide-toggle's label text. */\n  async getLabelText(): Promise<string> {\n    return (await this._label()).text();\n  }\n\n  /** Focuses the slide-toggle. */\n  async focus(): Promise<void> {\n    return (await this._input()).focus();\n  }\n\n  /** Blurs the slide-toggle. */\n  async blur(): Promise<void> {\n    return (await this._input()).blur();\n  }\n\n  /** Toggle the checked state of the slide-toggle. */\n  async toggle(): Promise<void> {\n    return (await this._inputContainer()).click();\n  }\n\n  /**\n   * Puts the slide-toggle in a checked state by toggling it if it is currently unchecked, or doing\n   * nothing if it is already checked.\n   */\n  async check(): Promise<void> {\n    if (!(await this.isChecked())) {\n      await this.toggle();\n    }\n  }\n\n  /**\n   * Puts the slide-toggle in an unchecked state by toggling it if it is currently checked, or doing\n   * nothing if it is already unchecked.\n   */\n  async uncheck(): Promise<void> {\n    if (await this.isChecked()) {\n      await this.toggle();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slide-toggle-harness';\nexport * from './slide-toggle-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["__extends","HarnessPredicate","coerceBooleanProperty","ComponentHarness"],"mappings":"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"}