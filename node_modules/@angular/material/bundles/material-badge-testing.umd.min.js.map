{"version":3,"sources":["src/material/material-badge-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","badge","testing","tslib","cdk","this","MatBadgeHarness","_super","_this","apply","arguments","_badgeElement","locatorFor","__extends","with","options","HarnessPredicate","addOption","text","harness","stringMatches","getText","prototype","__awaiter","__generator","_a","label","sent","isOverlapping","host","hasClass","getPosition","result","trim","getSize","isHidden","isDisabled","hostSelector","ComponentHarness","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/badge/testing', ['exports', 'tslib', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.badge = global.ng.material.badge || {}, global.ng.material.badge.testing = {}), global.tslib, global.ng.cdk.testing));\n}(this, (function (exports, tslib, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Harness for interacting with a standard Material badge in tests.\n     * @dynamic\n     */\n    var MatBadgeHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatBadgeHarness, _super);\n        function MatBadgeHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._badgeElement = _this.locatorFor('.mat-badge-content');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a badge with specific attributes.\n         * @param options Options for narrowing the search:\n         *   - `text` finds a badge host with a particular text.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatBadgeHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatBadgeHarness, options)\n                .addOption('text', options.text, function (harness, text) { return testing.HarnessPredicate.stringMatches(harness.getText(), text); });\n        };\n        /** Gets a promise for the badge text. */\n        MatBadgeHarness.prototype.getText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._badgeElement()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Gets whether the badge is overlapping the content. */\n        MatBadgeHarness.prototype.isOverlapping = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-badge-overlap')];\n                    }\n                });\n            });\n        };\n        /** Gets the position of the badge. */\n        MatBadgeHarness.prototype.getPosition = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var host, result;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            host = _a.sent();\n                            result = '';\n                            return [4 /*yield*/, host.hasClass('mat-badge-above')];\n                        case 2:\n                            if (!_a.sent()) return [3 /*break*/, 3];\n                            result += 'above';\n                            return [3 /*break*/, 5];\n                        case 3: return [4 /*yield*/, host.hasClass('mat-badge-below')];\n                        case 4:\n                            if (_a.sent()) {\n                                result += 'below';\n                            }\n                            _a.label = 5;\n                        case 5: return [4 /*yield*/, host.hasClass('mat-badge-before')];\n                        case 6:\n                            if (!_a.sent()) return [3 /*break*/, 7];\n                            result += ' before';\n                            return [3 /*break*/, 9];\n                        case 7: return [4 /*yield*/, host.hasClass('mat-badge-after')];\n                        case 8:\n                            if (_a.sent()) {\n                                result += ' after';\n                            }\n                            _a.label = 9;\n                        case 9: return [2 /*return*/, result.trim()];\n                    }\n                });\n            });\n        };\n        /** Gets the size of the badge. */\n        MatBadgeHarness.prototype.getSize = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var host;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            host = _a.sent();\n                            return [4 /*yield*/, host.hasClass('mat-badge-small')];\n                        case 2:\n                            if (!_a.sent()) return [3 /*break*/, 3];\n                            return [2 /*return*/, 'small'];\n                        case 3: return [4 /*yield*/, host.hasClass('mat-badge-large')];\n                        case 4:\n                            if (_a.sent()) {\n                                return [2 /*return*/, 'large'];\n                            }\n                            _a.label = 5;\n                        case 5: return [2 /*return*/, 'medium'];\n                    }\n                });\n            });\n        };\n        /** Gets whether the badge is hidden. */\n        MatBadgeHarness.prototype.isHidden = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-badge-hidden')];\n                    }\n                });\n            });\n        };\n        /** Gets whether the badge is disabled. */\n        MatBadgeHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-badge-disabled')];\n                    }\n                });\n            });\n        };\n        MatBadgeHarness.hostSelector = '.mat-badge';\n        return MatBadgeHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatBadgeHarness = MatBadgeHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-badge-testing.umd.js.map\n"]}