{"version":3,"sources":["src/material/material-checkbox-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","checkbox","testing","tslib","cdk","coercion","this","MatCheckboxHarness","_super","_this","apply","arguments","_label","locatorFor","_input","_inputContainer","__extends","with","options","HarnessPredicate","addOption","label","harness","stringMatches","getLabelText","name","__awaiter","__generator","_a","getName","sent","prototype","isChecked","checked","_b","getProperty","coerceBooleanProperty","isIndeterminate","indeterminate","isDisabled","disabled","getAttribute","isRequired","required","isValid","host","hasClass","getValue","getAriaLabel","getAriaLabelledby","text","focus","blur","toggle","click","check","uncheck","hostSelector","ComponentHarness","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/coercion'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/checkbox/testing', ['exports', 'tslib', '@angular/cdk/coercion', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.checkbox = global.ng.material.checkbox || {}, global.ng.material.checkbox.testing = {}), global.tslib, global.ng.cdk.coercion, global.ng.cdk.testing));\n}(this, (function (exports, tslib, coercion, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-checkbox in tests. */\n    var MatCheckboxHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatCheckboxHarness, _super);\n        function MatCheckboxHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._label = _this.locatorFor('.mat-checkbox-label');\n            _this._input = _this.locatorFor('input');\n            _this._inputContainer = _this.locatorFor('.mat-checkbox-inner-container');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatCheckboxHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which checkbox instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatCheckboxHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatCheckboxHarness, options)\n                .addOption('label', options.label, function (harness, label) { return testing.HarnessPredicate.stringMatches(harness.getLabelText(), label); })\n                // We want to provide a filter option for \"name\" because the name of the checkbox is\n                // only set on the underlying input. This means that it's not possible for developers\n                // to retrieve the harness of a specific checkbox with name through a CSS selector.\n                .addOption('name', options.name, function (harness, name) { return tslib.__awaiter(_this, void 0, void 0, function () { return tslib.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, harness.getName()];\n                    case 1: return [2 /*return*/, (_a.sent()) === name];\n                }\n            }); }); });\n        };\n        /** Whether the checkbox is checked. */\n        MatCheckboxHarness.prototype.isChecked = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var checked, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            checked = (_b.sent()).getProperty('checked');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, checked];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Whether the checkbox is in an indeterminate state. */\n        MatCheckboxHarness.prototype.isIndeterminate = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var indeterminate, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            indeterminate = (_b.sent()).getProperty('indeterminate');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, indeterminate];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Whether the checkbox is disabled. */\n        MatCheckboxHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var disabled, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            disabled = (_b.sent()).getAttribute('disabled');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, disabled];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Whether the checkbox is required. */\n        MatCheckboxHarness.prototype.isRequired = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var required, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            required = (_b.sent()).getProperty('required');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, required];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Whether the checkbox is valid. */\n        MatCheckboxHarness.prototype.isValid = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var invalid;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            invalid = (_a.sent()).hasClass('ng-invalid');\n                            return [4 /*yield*/, invalid];\n                        case 2: return [2 /*return*/, !(_a.sent())];\n                    }\n                });\n            });\n        };\n        /** Gets the checkbox's name. */\n        MatCheckboxHarness.prototype.getName = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('name')];\n                    }\n                });\n            });\n        };\n        /** Gets the checkbox's value. */\n        MatCheckboxHarness.prototype.getValue = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getProperty('value')];\n                    }\n                });\n            });\n        };\n        /** Gets the checkbox's aria-label. */\n        MatCheckboxHarness.prototype.getAriaLabel = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-label')];\n                    }\n                });\n            });\n        };\n        /** Gets the checkbox's aria-labelledby. */\n        MatCheckboxHarness.prototype.getAriaLabelledby = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-labelledby')];\n                    }\n                });\n            });\n        };\n        /** Gets the checkbox's label text. */\n        MatCheckboxHarness.prototype.getLabelText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._label()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Focuses the checkbox. */\n        MatCheckboxHarness.prototype.focus = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the checkbox. */\n        MatCheckboxHarness.prototype.blur = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /**\n         * Toggles the checked state of the checkbox.\n         *\n         * Note: This attempts to toggle the checkbox as a user would, by clicking it. Therefore if you\n         * are using `MAT_CHECKBOX_CLICK_ACTION` to change the behavior on click, calling this method\n         * might not have the expected result.\n         */\n        MatCheckboxHarness.prototype.toggle = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._inputContainer()];\n                        case 1: return [2 /*return*/, (_a.sent()).click()];\n                    }\n                });\n            });\n        };\n        /**\n         * Puts the checkbox in a checked state by toggling it if it is currently unchecked, or doing\n         * nothing if it is already checked.\n         *\n         * Note: This attempts to check the checkbox as a user would, by clicking it. Therefore if you\n         * are using `MAT_CHECKBOX_CLICK_ACTION` to change the behavior on click, calling this method\n         * might not have the expected result.\n         */\n        MatCheckboxHarness.prototype.check = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isChecked()];\n                        case 1:\n                            if (!!(_a.sent())) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this.toggle()];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * Puts the checkbox in an unchecked state by toggling it if it is currently checked, or doing\n         * nothing if it is already unchecked.\n         *\n         * Note: This attempts to uncheck the checkbox as a user would, by clicking it. Therefore if you\n         * are using `MAT_CHECKBOX_CLICK_ACTION` to change the behavior on click, calling this method\n         * might not have the expected result.\n         */\n        MatCheckboxHarness.prototype.uncheck = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isChecked()];\n                        case 1:\n                            if (!_a.sent()) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this.toggle()];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatCheckbox` instance. */\n        MatCheckboxHarness.hostSelector = 'mat-checkbox';\n        return MatCheckboxHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatCheckboxHarness = MatCheckboxHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-checkbox-testing.umd.js.map\n"]}