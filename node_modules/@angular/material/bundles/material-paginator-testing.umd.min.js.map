{"version":3,"sources":["src/material/material-paginator-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","paginator","testing","tslib","cdk","select","coercion","this","testing$1","MatPaginatorHarness","_super","_this","apply","arguments","_nextButton","locatorFor","_previousButton","_firstPageButton","locatorForOptional","_lastPageButton","_select","MatSelectHarness","with","ancestor","_pageSizeFallback","_rangeLabel","__extends","options","HarnessPredicate","prototype","goToNextPage","__awaiter","__generator","_a","label","sent","click","goToPreviousPage","goToFirstPage","button","Error","goToLastPage","setPageSize","size","clickOptions","text","getPageSize","_b","_c","getValueText","coerceNumberProperty","getRangeLabel","hostSelector","ComponentHarness","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing'), require('@angular/material/select/testing'), require('@angular/cdk/coercion')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/paginator/testing', ['exports', 'tslib', '@angular/cdk/testing', '@angular/material/select/testing', '@angular/cdk/coercion'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.paginator = global.ng.material.paginator || {}, global.ng.material.paginator.testing = {}), global.tslib, global.ng.cdk.testing, global.ng.material.select.testing, global.ng.cdk.coercion));\n}(this, (function (exports, tslib, testing, testing$1, coercion) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-paginator in tests. */\n    var MatPaginatorHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatPaginatorHarness, _super);\n        function MatPaginatorHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._nextButton = _this.locatorFor('.mat-paginator-navigation-next');\n            _this._previousButton = _this.locatorFor('.mat-paginator-navigation-previous');\n            _this._firstPageButton = _this.locatorForOptional('.mat-paginator-navigation-first');\n            _this._lastPageButton = _this.locatorForOptional('.mat-paginator-navigation-last');\n            _this._select = _this.locatorForOptional(testing$1.MatSelectHarness.with({\n                ancestor: '.mat-paginator-page-size'\n            }));\n            _this._pageSizeFallback = _this.locatorFor('.mat-paginator-page-size-value');\n            _this._rangeLabel = _this.locatorFor('.mat-paginator-range-label');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatPaginatorHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which paginator instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatPaginatorHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatPaginatorHarness, options);\n        };\n        /** Goes to the next page in the paginator. */\n        MatPaginatorHarness.prototype.goToNextPage = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._nextButton()];\n                        case 1: return [2 /*return*/, (_a.sent()).click()];\n                    }\n                });\n            });\n        };\n        /** Goes to the previous page in the paginator. */\n        MatPaginatorHarness.prototype.goToPreviousPage = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._previousButton()];\n                        case 1: return [2 /*return*/, (_a.sent()).click()];\n                    }\n                });\n            });\n        };\n        /** Goes to the first page in the paginator. */\n        MatPaginatorHarness.prototype.goToFirstPage = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var button;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._firstPageButton()];\n                        case 1:\n                            button = _a.sent();\n                            // The first page button isn't enabled by default so we need to check for it.\n                            if (!button) {\n                                throw Error('Could not find first page button inside paginator. ' +\n                                    'Make sure that `showFirstLastButtons` is enabled.');\n                            }\n                            return [2 /*return*/, button.click()];\n                    }\n                });\n            });\n        };\n        /** Goes to the last page in the paginator. */\n        MatPaginatorHarness.prototype.goToLastPage = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var button;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._lastPageButton()];\n                        case 1:\n                            button = _a.sent();\n                            // The last page button isn't enabled by default so we need to check for it.\n                            if (!button) {\n                                throw Error('Could not find last page button inside paginator. ' +\n                                    'Make sure that `showFirstLastButtons` is enabled.');\n                            }\n                            return [2 /*return*/, button.click()];\n                    }\n                });\n            });\n        };\n        /**\n         * Sets the page size of the paginator.\n         * @param size Page size that should be select.\n         */\n        MatPaginatorHarness.prototype.setPageSize = function (size) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var select;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._select()];\n                        case 1:\n                            select = _a.sent();\n                            // The select is only available if the `pageSizeOptions` are\n                            // set to an array with more than one item.\n                            if (!select) {\n                                throw Error('Cannot find page size selector in paginator. ' +\n                                    'Make sure that the `pageSizeOptions` have been configured.');\n                            }\n                            return [2 /*return*/, select.clickOptions({ text: \"\" + size })];\n                    }\n                });\n            });\n        };\n        /** Gets the page size of the paginator. */\n        MatPaginatorHarness.prototype.getPageSize = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var select, value, _a, _b;\n                return tslib.__generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0: return [4 /*yield*/, this._select()];\n                        case 1:\n                            select = _c.sent();\n                            if (!select) return [3 /*break*/, 2];\n                            _a = select.getValueText();\n                            return [3 /*break*/, 4];\n                        case 2: return [4 /*yield*/, this._pageSizeFallback()];\n                        case 3:\n                            _a = (_c.sent()).text();\n                            _c.label = 4;\n                        case 4:\n                            value = _a;\n                            _b = coercion.coerceNumberProperty;\n                            return [4 /*yield*/, value];\n                        case 5: return [2 /*return*/, _b.apply(void 0, [_c.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets the text of the range labe of the paginator. */\n        MatPaginatorHarness.prototype.getRangeLabel = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._rangeLabel()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Selector used to find paginator instances. */\n        MatPaginatorHarness.hostSelector = '.mat-paginator';\n        return MatPaginatorHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatPaginatorHarness = MatPaginatorHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-paginator-testing.umd.js.map\n"]}