{"version":3,"sources":["src/material/material-expansion-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","expansion","testing","tslib","cdk","this","EXPANSION_PANEL_CONTENT_SELECTOR","MatExpansionPanelHarness","_super","_this","apply","arguments","_header","locatorFor","_title","locatorForOptional","_description","_expansionIndicator","_content","__extends","with","options","HarnessPredicate","addOption","title","harness","stringMatches","getTitle","description","getDescription","content","getTextContent","expanded","__awaiter","__generator","_a","label","isExpanded","sent","disabled","isDisabled","prototype","host","hasClass","titleEl","text","descriptionEl","getAttribute","toggle","click","expand","collapse","getHarnessLoaderForContent","locatorFactory","harnessLoaderFor","focus","blur","hasToggleIndicator","getToggleIndicatorPosition","hostSelector","ComponentHarness","MatAccordionHarness","getExpansionPanels","filter","locatorForAll","isMulti","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/expansion/testing', ['exports', 'tslib', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.expansion = global.ng.material.expansion || {}, global.ng.material.expansion.testing = {}), global.tslib, global.ng.cdk.testing));\n}(this, (function (exports, tslib, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EXPANSION_PANEL_CONTENT_SELECTOR = '.mat-expansion-panel-content';\n    /** Harness for interacting with a standard mat-expansion-panel in tests. */\n    var MatExpansionPanelHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatExpansionPanelHarness, _super);\n        function MatExpansionPanelHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._header = _this.locatorFor('.mat-expansion-panel-header');\n            _this._title = _this.locatorForOptional('.mat-expansion-panel-header-title');\n            _this._description = _this.locatorForOptional('.mat-expansion-panel-header-description');\n            _this._expansionIndicator = _this.locatorForOptional('.mat-expansion-indicator');\n            _this._content = _this.locatorFor(EXPANSION_PANEL_CONTENT_SELECTOR);\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for an expansion-panel\n         * with specific attributes.\n         * @param options Options for narrowing the search:\n         *   - `title` finds an expansion-panel with a specific title text.\n         *   - `description` finds an expansion-panel with a specific description text.\n         *   - `expanded` finds an expansion-panel that is currently expanded.\n         *   - `disabled` finds an expansion-panel that is disabled.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatExpansionPanelHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatExpansionPanelHarness, options)\n                .addOption('title', options.title, function (harness, title) { return testing.HarnessPredicate.stringMatches(harness.getTitle(), title); })\n                .addOption('description', options.description, function (harness, description) {\n                return testing.HarnessPredicate.stringMatches(harness.getDescription(), description);\n            })\n                .addOption('content', options.content, function (harness, content) { return testing.HarnessPredicate.stringMatches(harness.getTextContent(), content); })\n                .addOption('expanded', options.expanded, function (harness, expanded) { return tslib.__awaiter(_this, void 0, void 0, function () { return tslib.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, harness.isExpanded()];\n                    case 1: return [2 /*return*/, (_a.sent()) === expanded];\n                }\n            }); }); })\n                .addOption('disabled', options.disabled, function (harness, disabled) { return tslib.__awaiter(_this, void 0, void 0, function () { return tslib.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, harness.isDisabled()];\n                    case 1: return [2 /*return*/, (_a.sent()) === disabled];\n                }\n            }); }); });\n        };\n        /** Whether the panel is expanded. */\n        MatExpansionPanelHarness.prototype.isExpanded = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-expanded')];\n                    }\n                });\n            });\n        };\n        /**\n         * Gets the title text of the panel.\n         * @returns Title text or `null` if no title is set up.\n         */\n        MatExpansionPanelHarness.prototype.getTitle = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var titleEl;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._title()];\n                        case 1:\n                            titleEl = _a.sent();\n                            return [2 /*return*/, titleEl ? titleEl.text() : null];\n                    }\n                });\n            });\n        };\n        /**\n         * Gets the description text of the panel.\n         * @returns Description text or `null` if no description is set up.\n         */\n        MatExpansionPanelHarness.prototype.getDescription = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var descriptionEl;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._description()];\n                        case 1:\n                            descriptionEl = _a.sent();\n                            return [2 /*return*/, descriptionEl ? descriptionEl.text() : null];\n                    }\n                });\n            });\n        };\n        /** Whether the panel is disabled. */\n        MatExpansionPanelHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._header()];\n                        case 1: return [4 /*yield*/, (_a.sent()).getAttribute('aria-disabled')];\n                        case 2: return [2 /*return*/, (_a.sent()) === 'true'];\n                    }\n                });\n            });\n        };\n        /**\n         * Toggles the expanded state of the panel by clicking on the panel\n         * header. This method will not work if the panel is disabled.\n         */\n        MatExpansionPanelHarness.prototype.toggle = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._header()];\n                        case 1: return [4 /*yield*/, (_a.sent()).click()];\n                        case 2:\n                            _a.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** Expands the expansion panel if collapsed. */\n        MatExpansionPanelHarness.prototype.expand = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isExpanded()];\n                        case 1:\n                            if (!!(_a.sent())) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this.toggle()];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** Collapses the expansion panel if expanded. */\n        MatExpansionPanelHarness.prototype.collapse = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isExpanded()];\n                        case 1:\n                            if (!_a.sent()) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this.toggle()];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** Gets the text content of the panel. */\n        MatExpansionPanelHarness.prototype.getTextContent = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._content()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /**\n         * Gets a `HarnessLoader` that can be used to load harnesses for\n         * components within the panel's content area.\n         */\n        MatExpansionPanelHarness.prototype.getHarnessLoaderForContent = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorFactory.harnessLoaderFor(EXPANSION_PANEL_CONTENT_SELECTOR)];\n                });\n            });\n        };\n        /** Focuses the panel. */\n        MatExpansionPanelHarness.prototype.focus = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._header()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the panel. */\n        MatExpansionPanelHarness.prototype.blur = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._header()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /** Whether the panel has a toggle indicator displayed. */\n        MatExpansionPanelHarness.prototype.hasToggleIndicator = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._expansionIndicator()];\n                        case 1: return [2 /*return*/, (_a.sent()) !== null];\n                    }\n                });\n            });\n        };\n        /** Gets the position of the toggle indicator. */\n        MatExpansionPanelHarness.prototype.getToggleIndicatorPosition = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._header()];\n                        case 1: return [4 /*yield*/, (_a.sent()).hasClass('mat-expansion-toggle-indicator-before')];\n                        case 2:\n                            // By default the expansion indicator will show \"after\" the panel header content.\n                            if (_a.sent()) {\n                                return [2 /*return*/, 'before'];\n                            }\n                            return [2 /*return*/, 'after'];\n                    }\n                });\n            });\n        };\n        MatExpansionPanelHarness.hostSelector = '.mat-expansion-panel';\n        return MatExpansionPanelHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-accordion in tests. */\n    var MatAccordionHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatAccordionHarness, _super);\n        function MatAccordionHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for an accordion\n         * with specific attributes.\n         * @param options Options for narrowing the search.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatAccordionHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatAccordionHarness, options);\n        };\n        /** Gets all expansion panels which are part of the accordion. */\n        MatAccordionHarness.prototype.getExpansionPanels = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorForAll(MatExpansionPanelHarness.with(filter))()];\n                });\n            });\n        };\n        /** Whether the accordion allows multiple expanded panels simultaneously. */\n        MatAccordionHarness.prototype.isMulti = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-accordion-multi')];\n                    }\n                });\n            });\n        };\n        MatAccordionHarness.hostSelector = '.mat-accordion';\n        return MatAccordionHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatAccordionHarness = MatAccordionHarness;\n    exports.MatExpansionPanelHarness = MatExpansionPanelHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-expansion-testing.umd.js.map\n"]}