{"version":3,"sources":["src/material/material-input.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","input","tslib","cdk","textField","core","coercion","platform","forms","formField","rxjs","this","core$1","MatTextareaAutosize","_super","apply","arguments","__extends","Object","defineProperty","prototype","get","minRows","set","value","enumerable","configurable","maxRows","enabled","decorators","type","Directive","args","selector","exportAs","inputs","host","class","rows","propDecorators","matAutosizeMinRows","Input","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","InjectionToken","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInput","_elementRef","_platform","ngControl","_parentForm","_parentFormGroup","_defaultErrorStateMatcher","inputValueAccessor","_autofillMonitor","ngZone","_this","call","_uid","_isServer","_isNativeSelect","focused","stateChanges","Subject","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","t","getSupportedInputTypes","has","element","nativeElement","_inputValueAccessor","_previousNativeValue","id","IOS","runOutsideAngular","addEventListener","event","el","target","selectionStart","selectionEnd","setSelectionRange","isBrowser","nodeName","toLowerCase","multiple","disabled","coerceBooleanProperty","next","_id","_validateType","_isTextarea","ngOnInit","monitor","subscribe","isAutofilled","ngOnChanges","ngOnDestroy","complete","stopMonitoring","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","focus","options","_focusChanged","isFocused","readonly","_onInput","newValue","indexOf","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","empty","selectedIndex","label","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","[class.mat-input-server]","[attr.id]","[attr.placeholder]","[disabled]","[required]","[attr.readonly]","[attr.aria-describedby]","[attr.aria-invalid]","[attr.aria-required]","(blur)","(focus)","(input)","providers","provide","MatFormFieldControl","useExisting","ctorParameters","ElementRef","Platform","NgControl","Optional","Self","NgForm","FormGroupDirective","ErrorStateMatcher","undefined","Inject","AutofillMonitor","NgZone","placeholder","required","errorStateMatcher","mixinErrorState","MatInputBase","MatInputModule","NgModule","declarations","imports","TextFieldModule","MatFormFieldModule"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/text-field'), require('@angular/core'), require('@angular/cdk/coercion'), require('@angular/cdk/platform'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/form-field'), require('rxjs')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/input', ['exports', 'tslib', '@angular/cdk/text-field', '@angular/core', '@angular/cdk/coercion', '@angular/cdk/platform', '@angular/forms', '@angular/material/core', '@angular/material/form-field', 'rxjs'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.input = {}), global.tslib, global.ng.cdk.textField, global.ng.core, global.ng.cdk.coercion, global.ng.cdk.platform, global.ng.forms, global.ng.material.core, global.ng.material.formField, global.rxjs));\n}(this, (function (exports, tslib, textField, core, coercion, platform, forms, core$1, formField, rxjs) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Directive to automatically resize a textarea to fit its content.\n     * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n     * @breaking-change 8.0.0\n     */\n    var MatTextareaAutosize = /** @class */ (function (_super) {\n        tslib.__extends(MatTextareaAutosize, _super);\n        function MatTextareaAutosize() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(MatTextareaAutosize.prototype, \"matAutosizeMinRows\", {\n            get: function () { return this.minRows; },\n            set: function (value) { this.minRows = value; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatTextareaAutosize.prototype, \"matAutosizeMaxRows\", {\n            get: function () { return this.maxRows; },\n            set: function (value) { this.maxRows = value; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatTextareaAutosize.prototype, \"matAutosize\", {\n            get: function () { return this.enabled; },\n            set: function (value) { this.enabled = value; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatTextareaAutosize.prototype, \"matTextareaAutosize\", {\n            get: function () { return this.enabled; },\n            set: function (value) { this.enabled = value; },\n            enumerable: true,\n            configurable: true\n        });\n        MatTextareaAutosize.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                        exportAs: 'matTextareaAutosize',\n                        inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                        host: {\n                            'class': 'cdk-textarea-autosize mat-autosize',\n                            // Textarea elements that have the directive applied should have a single row by default.\n                            // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                            'rows': '1',\n                        },\n                    },] }\n        ];\n        MatTextareaAutosize.propDecorators = {\n            matAutosizeMinRows: [{ type: core.Input }],\n            matAutosizeMaxRows: [{ type: core.Input }],\n            matAutosize: [{ type: core.Input, args: ['mat-autosize',] }],\n            matTextareaAutosize: [{ type: core.Input }]\n        };\n        return MatTextareaAutosize;\n    }(textField.CdkTextareaAutosize));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** @docs-private */\n    function getMatInputUnsupportedTypeError(type) {\n        return Error(\"Input type \\\"\" + type + \"\\\" isn't supported by matInput.\");\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This token is used to inject the object whose value should be set into `MatInput`. If none is\n     * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n     * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n     * value to them.\n     */\n    var MAT_INPUT_VALUE_ACCESSOR = new core.InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n    var MAT_INPUT_INVALID_TYPES = [\n        'button',\n        'checkbox',\n        'file',\n        'hidden',\n        'image',\n        'radio',\n        'range',\n        'reset',\n        'submit'\n    ];\n    var nextUniqueId = 0;\n    // Boilerplate for applying mixins to MatInput.\n    /** @docs-private */\n    var MatInputBase = /** @class */ (function () {\n        function MatInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n        /** @docs-private */\n        ngControl) {\n            this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n            this._parentForm = _parentForm;\n            this._parentFormGroup = _parentFormGroup;\n            this.ngControl = ngControl;\n        }\n        return MatInputBase;\n    }());\n    var _MatInputMixinBase = core$1.mixinErrorState(MatInputBase);\n    /** Directive that allows a native input to work inside a `MatFormField`. */\n    var MatInput = /** @class */ (function (_super) {\n        tslib.__extends(MatInput, _super);\n        function MatInput(_elementRef, _platform, \n        /** @docs-private */\n        ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {\n            var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\n            _this._elementRef = _elementRef;\n            _this._platform = _platform;\n            _this.ngControl = ngControl;\n            _this._autofillMonitor = _autofillMonitor;\n            _this._uid = \"mat-input-\" + nextUniqueId++;\n            /** Whether the component is being rendered on the server. */\n            _this._isServer = false;\n            /** Whether the component is a native html select. */\n            _this._isNativeSelect = false;\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            _this.focused = false;\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            _this.stateChanges = new rxjs.Subject();\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            _this.controlType = 'mat-input';\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            _this.autofilled = false;\n            _this._disabled = false;\n            _this._required = false;\n            _this._type = 'text';\n            _this._readonly = false;\n            _this._neverEmptyInputTypes = [\n                'date',\n                'datetime',\n                'datetime-local',\n                'month',\n                'time',\n                'week'\n            ].filter(function (t) { return platform.getSupportedInputTypes().has(t); });\n            var element = _this._elementRef.nativeElement;\n            // If no input value accessor was explicitly specified, use the element as the input value\n            // accessor.\n            _this._inputValueAccessor = inputValueAccessor || element;\n            _this._previousNativeValue = _this.value;\n            // Force setter to be called in case id was not specified.\n            _this.id = _this.id;\n            // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n            // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n            // exists on iOS, we only bother to install the listener on iOS.\n            if (_platform.IOS) {\n                ngZone.runOutsideAngular(function () {\n                    _elementRef.nativeElement.addEventListener('keyup', function (event) {\n                        var el = event.target;\n                        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                            // `1, 1` fixes it for the first time that you type text and\n                            // then hold delete. Toggling to `1, 1` and then back to\n                            // `0, 0` seems to completely fix it.\n                            el.setSelectionRange(1, 1);\n                            el.setSelectionRange(0, 0);\n                        }\n                    });\n                });\n            }\n            _this._isServer = !_this._platform.isBrowser;\n            _this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n            if (_this._isNativeSelect) {\n                _this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                    'mat-native-select';\n            }\n            return _this;\n        }\n        Object.defineProperty(MatInput.prototype, \"disabled\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () {\n                if (this.ngControl && this.ngControl.disabled !== null) {\n                    return this.ngControl.disabled;\n                }\n                return this._disabled;\n            },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                // Browsers may not fire the blur event if the input is disabled too quickly.\n                // Reset from here to ensure that the element doesn't become stuck.\n                if (this.focused) {\n                    this.focused = false;\n                    this.stateChanges.next();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatInput.prototype, \"id\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this._id; },\n            set: function (value) { this._id = value || this._uid; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatInput.prototype, \"required\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this._required; },\n            set: function (value) { this._required = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatInput.prototype, \"type\", {\n            /** Input type of the element. */\n            get: function () { return this._type; },\n            set: function (value) {\n                this._type = value || 'text';\n                this._validateType();\n                // When using Angular inputs, developers are no longer able to set the properties on the native\n                // input element. To ensure that bindings for `type` work, we need to sync the setter\n                // with the native property. Textarea elements don't support the type property or attribute.\n                if (!this._isTextarea() && platform.getSupportedInputTypes().has(this._type)) {\n                    this._elementRef.nativeElement.type = this._type;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatInput.prototype, \"value\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this._inputValueAccessor.value; },\n            set: function (value) {\n                if (value !== this.value) {\n                    this._inputValueAccessor.value = value;\n                    this.stateChanges.next();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatInput.prototype, \"readonly\", {\n            /** Whether the element is readonly. */\n            get: function () { return this._readonly; },\n            set: function (value) { this._readonly = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        MatInput.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this._platform.isBrowser) {\n                this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(function (event) {\n                    _this.autofilled = event.isAutofilled;\n                    _this.stateChanges.next();\n                });\n            }\n        };\n        MatInput.prototype.ngOnChanges = function () {\n            this.stateChanges.next();\n        };\n        MatInput.prototype.ngOnDestroy = function () {\n            this.stateChanges.complete();\n            if (this._platform.isBrowser) {\n                this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n            }\n        };\n        MatInput.prototype.ngDoCheck = function () {\n            if (this.ngControl) {\n                // We need to re-evaluate this on every change detection cycle, because there are some\n                // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n                // that whatever logic is in here has to be super lean or we risk destroying the performance.\n                this.updateErrorState();\n            }\n            // We need to dirty-check the native element's value, because there are some cases where\n            // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n            // updating the value using `emitEvent: false`).\n            this._dirtyCheckNativeValue();\n        };\n        /** Focuses the input. */\n        MatInput.prototype.focus = function (options) {\n            this._elementRef.nativeElement.focus(options);\n        };\n        /** Callback for the cases where the focused state of the input changes. */\n        MatInput.prototype._focusChanged = function (isFocused) {\n            if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n                this.focused = isFocused;\n                this.stateChanges.next();\n            }\n        };\n        MatInput.prototype._onInput = function () {\n            // This is a noop function and is used to let Angular know whenever the value changes.\n            // Angular will run a new change detection each time the `input` event has been dispatched.\n            // It's necessary that Angular recognizes the value change, because when floatingLabel\n            // is set to false and Angular forms aren't used, the placeholder won't recognize the\n            // value changes and will not disappear.\n            // Listening to the input event wouldn't be necessary when the input is using the\n            // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n        };\n        /** Determines if the component host is a textarea. */\n        MatInput.prototype._isTextarea = function () {\n            return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n        };\n        /** Does some manual dirty checking on the native input `value` property. */\n        MatInput.prototype._dirtyCheckNativeValue = function () {\n            var newValue = this._elementRef.nativeElement.value;\n            if (this._previousNativeValue !== newValue) {\n                this._previousNativeValue = newValue;\n                this.stateChanges.next();\n            }\n        };\n        /** Make sure the input is a supported type. */\n        MatInput.prototype._validateType = function () {\n            if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n                throw getMatInputUnsupportedTypeError(this._type);\n            }\n        };\n        /** Checks whether the input type is one of the types that are never empty. */\n        MatInput.prototype._isNeverEmpty = function () {\n            return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n        };\n        /** Checks whether the input is invalid based on the native validation. */\n        MatInput.prototype._isBadInput = function () {\n            // The `validity` property won't be present on platform-server.\n            var validity = this._elementRef.nativeElement.validity;\n            return validity && validity.badInput;\n        };\n        Object.defineProperty(MatInput.prototype, \"empty\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () {\n                return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n                    !this.autofilled;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatInput.prototype, \"shouldLabelFloat\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () {\n                if (this._isNativeSelect) {\n                    // For a single-selection `<select>`, the label should float when the selected option has\n                    // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n                    // overlapping the label with the options.\n                    var selectElement = this._elementRef.nativeElement;\n                    var firstOption = selectElement.options[0];\n                    // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n                    // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n                    return this.focused || selectElement.multiple || !this.empty ||\n                        !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n                }\n                else {\n                    return this.focused || !this.empty;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        MatInput.prototype.setDescribedByIds = function (ids) {\n            this._ariaDescribedby = ids.join(' ');\n        };\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        MatInput.prototype.onContainerClick = function () {\n            // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n            // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n            // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n            if (!this.focused) {\n                this.focus();\n            }\n        };\n        MatInput.decorators = [\n            { type: core.Directive, args: [{\n                        selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\",\n                        exportAs: 'matInput',\n                        host: {\n                            /**\n                             * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                             */\n                            'class': 'mat-input-element mat-form-field-autofill-control',\n                            '[class.mat-input-server]': '_isServer',\n                            // Native input properties that are overwritten by Angular inputs need to be synced with\n                            // the native input element. Otherwise property bindings for those don't work.\n                            '[attr.id]': 'id',\n                            '[attr.placeholder]': 'placeholder',\n                            '[disabled]': 'disabled',\n                            '[required]': 'required',\n                            '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                            '[attr.aria-describedby]': '_ariaDescribedby || null',\n                            '[attr.aria-invalid]': 'errorState',\n                            '[attr.aria-required]': 'required.toString()',\n                            '(blur)': '_focusChanged(false)',\n                            '(focus)': '_focusChanged(true)',\n                            '(input)': '_onInput()',\n                        },\n                        providers: [{ provide: formField.MatFormFieldControl, useExisting: MatInput }],\n                    },] }\n        ];\n        /** @nocollapse */\n        MatInput.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: platform.Platform },\n            { type: forms.NgControl, decorators: [{ type: core.Optional }, { type: core.Self }] },\n            { type: forms.NgForm, decorators: [{ type: core.Optional }] },\n            { type: forms.FormGroupDirective, decorators: [{ type: core.Optional }] },\n            { type: core$1.ErrorStateMatcher },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n            { type: textField.AutofillMonitor },\n            { type: core.NgZone }\n        ]; };\n        MatInput.propDecorators = {\n            disabled: [{ type: core.Input }],\n            id: [{ type: core.Input }],\n            placeholder: [{ type: core.Input }],\n            required: [{ type: core.Input }],\n            type: [{ type: core.Input }],\n            errorStateMatcher: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            readonly: [{ type: core.Input }]\n        };\n        return MatInput;\n    }(_MatInputMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatInputModule = /** @class */ (function () {\n        function MatInputModule() {\n        }\n        MatInputModule.decorators = [\n            { type: core.NgModule, args: [{\n                        declarations: [MatInput, MatTextareaAutosize],\n                        imports: [\n                            textField.TextFieldModule,\n                            formField.MatFormFieldModule,\n                        ],\n                        exports: [\n                            textField.TextFieldModule,\n                            // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                            // be used together with `MatFormField`.\n                            formField.MatFormFieldModule,\n                            MatInput,\n                            MatTextareaAutosize,\n                        ],\n                        providers: [core$1.ErrorStateMatcher],\n                    },] }\n        ];\n        return MatInputModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_INPUT_VALUE_ACCESSOR = MAT_INPUT_VALUE_ACCESSOR;\n    exports.MatInput = MatInput;\n    exports.MatInputModule = MatInputModule;\n    exports.MatTextareaAutosize = MatTextareaAutosize;\n    exports.getMatInputUnsupportedTypeError = getMatInputUnsupportedTypeError;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-input.umd.js.map\n"]}