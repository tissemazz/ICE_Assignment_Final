{"version":3,"file":"material-menu-testing.umd.js","sources":["../../../../../../../src/material/menu/testing/menu-harness.ts","../../../../../../../src/material/menu/testing/public-api.ts","../../../../../../../src/material/menu/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate, TestElement, TestKey} from '@angular/cdk/testing';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MenuHarnessFilters, MenuItemHarnessFilters} from './menu-harness-filters';\n\n/** Harness for interacting with a standard mat-menu in tests. */\nexport class MatMenuHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatMenu` instance. */\n  static hostSelector = '.mat-menu-trigger';\n\n  private _documentRootLocator = this.documentRootLocatorFactory();\n\n  // TODO: potentially extend MatButtonHarness\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatMenuHarness` that meets certain\n   * criteria.\n   * @param options Options for filtering which menu instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: MenuHarnessFilters = {}): HarnessPredicate<MatMenuHarness> {\n    return new HarnessPredicate(MatMenuHarness, options)\n        .addOption('triggerText', options.triggerText,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getTriggerText(), text));\n  }\n\n  /** Whether the menu is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  /** Whether the menu is open. */\n  async isOpen(): Promise<boolean> {\n    return !!(await this._getMenuPanel());\n  }\n\n  /** Gets the text of the menu's trigger element. */\n  async getTriggerText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Focuses the menu. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the menu. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Opens the menu. */\n  async open(): Promise<void> {\n    if (!await this.isOpen()) {\n      return (await this.host()).click();\n    }\n  }\n\n  /** Closes the menu. */\n  async close(): Promise<void> {\n    const panel = await this._getMenuPanel();\n    if (panel) {\n      return panel.sendKeys(TestKey.ESCAPE);\n    }\n  }\n\n  /**\n   * Gets a list of `MatMenuItemHarness` representing the items in the menu.\n   * @param filters Optionally filters which menu items are included.\n   */\n  async getItems(filters: Omit<MenuItemHarnessFilters, 'ancestor'> = {}):\n      Promise<MatMenuItemHarness[]> {\n    const panelId = await this._getPanelId();\n    if (panelId) {\n      return this._documentRootLocator.locatorForAll(\n          MatMenuItemHarness.with({...filters, ancestor: `#${panelId}`}))();\n    }\n    return [];\n  }\n\n  /**\n   * Clicks an item in the menu, and optionally continues clicking items in subsequent sub-menus.\n   * @param itemFilter A filter used to represent which item in the menu should be clicked. The\n   *     first matching menu item will be clicked.\n   * @param subItemFilters A list of filters representing the items to click in any subsequent\n   *     sub-menus. The first item in the sub-menu matching the corresponding filter in\n   *     `subItemFilters` will be clicked.\n   */\n  async clickItem(\n      itemFilter: Omit<MenuItemHarnessFilters, 'ancestor'>,\n      ...subItemFilters: Omit<MenuItemHarnessFilters, 'ancestor'>[]): Promise<void> {\n    await this.open();\n    const items = await this.getItems(itemFilter);\n    if (!items.length) {\n      throw Error(`Could not find item matching ${JSON.stringify(itemFilter)}`);\n    }\n\n    if (!subItemFilters.length) {\n      return await items[0].click();\n    }\n\n    const menu = await items[0].getSubmenu();\n    if (!menu) {\n      throw Error(`Item matching ${JSON.stringify(itemFilter)} does not have a submenu`);\n    }\n    return menu.clickItem(...subItemFilters as [Omit<MenuItemHarnessFilters, 'ancestor'>]);\n  }\n\n  /** Gets the menu panel associated with this menu. */\n  private async _getMenuPanel(): Promise<TestElement | null> {\n    const panelId = await this._getPanelId();\n    return panelId ? this._documentRootLocator.locatorForOptional(`#${panelId}`)() : null;\n  }\n\n  /** Gets the id of the menu panel associated with this menu. */\n  private async _getPanelId(): Promise<string | null> {\n    const panelId = await (await this.host()).getAttribute('aria-controls');\n    return panelId || null;\n  }\n}\n\n\n/** Harness for interacting with a standard mat-menu-item in tests. */\nexport class MatMenuItemHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatMenuItem` instance. */\n  static hostSelector = '.mat-menu-item';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatMenuItemHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which menu item instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: MenuItemHarnessFilters = {}): HarnessPredicate<MatMenuItemHarness> {\n    return new HarnessPredicate(MatMenuItemHarness, options)\n        .addOption('text', options.text,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text))\n        .addOption('hasSubmenu', options.hasSubmenu,\n            async (harness, hasSubmenu) => (await harness.hasSubmenu()) === hasSubmenu);\n  }\n\n  /** Whether the menu is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  /** Gets the text of the menu item. */\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Focuses the menu item. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the menu item. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Clicks the menu item. */\n  async click(): Promise<void> {\n    return (await this.host()).click();\n  }\n\n  /** Whether this item has a submenu. */\n  async hasSubmenu(): Promise<boolean> {\n    return (await this.host()).matchesSelector(MatMenuHarness.hostSelector);\n  }\n\n  /** Gets the submenu associated with this menu item, or null if none. */\n  async getSubmenu(): Promise<MatMenuHarness | null> {\n    if (await this.hasSubmenu()) {\n      return new MatMenuHarness(this.locatorFactory);\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './menu-harness';\nexport * from './menu-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["__extends","HarnessPredicate","coerceBooleanProperty","TestKey","ComponentHarness"],"mappings":"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"}