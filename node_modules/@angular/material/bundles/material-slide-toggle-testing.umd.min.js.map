{"version":3,"sources":["src/material/material-slide-toggle-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","slideToggle","testing","tslib","cdk","coercion","this","MatSlideToggleHarness","_super","_this","apply","arguments","_label","locatorFor","_input","_inputContainer","__extends","with","options","HarnessPredicate","addOption","label","harness","stringMatches","getLabelText","name","__awaiter","__generator","_a","getName","sent","prototype","isChecked","checked","_b","getProperty","coerceBooleanProperty","isDisabled","disabled","getAttribute","isRequired","required","isValid","host","hasClass","getAriaLabel","getAriaLabelledby","text","focus","blur","toggle","click","check","uncheck","hostSelector","ComponentHarness","Object","defineProperty","value"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,SAAUA,QAAQ,wBAAyBA,QAAQ,0BACzH,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,yCAA0C,CAAC,UAAW,QAAS,uBAAwB,yBAA0BJ,GAC3IA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,SAAWT,EAAOQ,GAAGC,UAAY,GAAIT,EAAOQ,GAAGC,SAASC,YAAcV,EAAOQ,GAAGC,SAASC,aAAe,GAAIV,EAAOQ,GAAGC,SAASC,YAAYC,QAAU,IAAKX,EAAOY,MAAOZ,EAAOQ,GAAGK,IAAIF,QAASX,EAAOQ,GAAGK,IAAIC,UAH3R,CAIEC,MAAM,SAAWb,EAASU,EAAOD,EAASG,GAAY;;;;;;;OAUpD,IAAIE,EAAuC,SAAUC,GAEjD,SAASD,IACL,IAAIE,EAAmB,OAAXD,GAAmBA,EAAOE,MAAMJ,KAAMK,YAAcL,KAIhE,OAHAG,EAAMG,OAASH,EAAMI,WAAW,SAChCJ,EAAMK,OAASL,EAAMI,WAAW,SAChCJ,EAAMM,gBAAkBN,EAAMI,WAAW,yBAClCJ,EA6MX,OAnNAN,EAAMa,UAAUT,EAAuBC,GAcvCD,EAAsBU,KAAO,SAAUC,GACnC,IAAIT,EAAQH,KAEZ,YADgB,IAAZY,IAAsBA,EAAU,IAC7B,IAAIhB,EAAQiB,iBAAiBZ,EAAuBW,GACtDE,UAAU,QAASF,EAAQG,OAAO,SAAUC,EAASD,GAAS,OAAOnB,EAAQiB,iBAAiBI,cAAcD,EAAQE,eAAgBH,MAIpID,UAAU,OAAQF,EAAQO,MAAM,SAAUH,EAASG,GAAQ,OAAOtB,EAAMuB,UAAUjB,OAAO,OAAQ,GAAQ,WAAc,OAAON,EAAMwB,YAAYrB,MAAM,SAAUsB,GACjK,OAAQA,EAAGP,OACP,KAAK,EAAG,MAAO,CAAC,EAAaC,EAAQO,WACrC,KAAK,EAAG,MAAO,CAAC,EAAeD,EAAGE,SAAYL,cAK1DlB,EAAsBwB,UAAUC,UAAY,WACxC,OAAO7B,EAAMuB,UAAUpB,UAAM,OAAQ,GAAQ,WACzC,IAAI2B,EAASL,EACb,OAAOzB,EAAMwB,YAAYrB,MAAM,SAAU4B,GACrC,OAAQA,EAAGb,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKQ,UAClC,KAAK,EAGD,OAFAmB,EAAWC,EAAGJ,OAAQK,YAAY,WAClCP,EAAKvB,EAAS+B,sBACP,CAAC,EAAaH,GACzB,KAAK,EAAG,MAAO,CAAC,EAAcL,EAAGlB,WAAM,EAAQ,CAACwB,EAAGJ,kBAMnEvB,EAAsBwB,UAAUM,WAAa,WACzC,OAAOlC,EAAMuB,UAAUpB,UAAM,OAAQ,GAAQ,WACzC,IAAIgC,EAAUV,EACd,OAAOzB,EAAMwB,YAAYrB,MAAM,SAAU4B,GACrC,OAAQA,EAAGb,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKQ,UAClC,KAAK,EAGD,OAFAwB,EAAYJ,EAAGJ,OAAQS,aAAa,YACpCX,EAAKvB,EAAS+B,sBACP,CAAC,EAAaE,GACzB,KAAK,EAAG,MAAO,CAAC,EAAcV,EAAGlB,WAAM,EAAQ,CAACwB,EAAGJ,kBAMnEvB,EAAsBwB,UAAUS,WAAa,WACzC,OAAOrC,EAAMuB,UAAUpB,UAAM,OAAQ,GAAQ,WACzC,IAAImC,EAAUb,EACd,OAAOzB,EAAMwB,YAAYrB,MAAM,SAAU4B,GACrC,OAAQA,EAAGb,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKQ,UAClC,KAAK,EAGD,OAFA2B,EAAYP,EAAGJ,OAAQS,aAAa,YACpCX,EAAKvB,EAAS+B,sBACP,CAAC,EAAaK,GACzB,KAAK,EAAG,MAAO,CAAC,EAAcb,EAAGlB,WAAM,EAAQ,CAACwB,EAAGJ,kBAMnEvB,EAAsBwB,UAAUW,QAAU,WACtC,OAAOvC,EAAMuB,UAAUpB,UAAM,OAAQ,GAAQ,WAEzC,OAAOH,EAAMwB,YAAYrB,MAAM,SAAUsB,GACrC,OAAQA,EAAGP,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKqC,QAClC,KAAK,EAED,MAAO,CAAC,EADGf,EAAGE,OAAQc,SAAS,eAEnC,KAAK,EAAG,MAAO,CAAC,GAAgBhB,EAAGE,gBAMnDvB,EAAsBwB,UAAUF,QAAU,WACtC,OAAO1B,EAAMuB,UAAUpB,UAAM,OAAQ,GAAQ,WACzC,OAAOH,EAAMwB,YAAYrB,MAAM,SAAUsB,GACrC,OAAQA,EAAGP,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKQ,UAClC,KAAK,EAAG,MAAO,CAAC,EAAec,EAAGE,OAAQS,aAAa,iBAMvEhC,EAAsBwB,UAAUc,aAAe,WAC3C,OAAO1C,EAAMuB,UAAUpB,UAAM,OAAQ,GAAQ,WACzC,OAAOH,EAAMwB,YAAYrB,MAAM,SAAUsB,GACrC,OAAQA,EAAGP,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKQ,UAClC,KAAK,EAAG,MAAO,CAAC,EAAec,EAAGE,OAAQS,aAAa,uBAMvEhC,EAAsBwB,UAAUe,kBAAoB,WAChD,OAAO3C,EAAMuB,UAAUpB,UAAM,OAAQ,GAAQ,WACzC,OAAOH,EAAMwB,YAAYrB,MAAM,SAAUsB,GACrC,OAAQA,EAAGP,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKQ,UAClC,KAAK,EAAG,MAAO,CAAC,EAAec,EAAGE,OAAQS,aAAa,4BAMvEhC,EAAsBwB,UAAUP,aAAe,WAC3C,OAAOrB,EAAMuB,UAAUpB,UAAM,OAAQ,GAAQ,WACzC,OAAOH,EAAMwB,YAAYrB,MAAM,SAAUsB,GACrC,OAAQA,EAAGP,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKM,UAClC,KAAK,EAAG,MAAO,CAAC,EAAegB,EAAGE,OAAQiB,gBAM1DxC,EAAsBwB,UAAUiB,MAAQ,WACpC,OAAO7C,EAAMuB,UAAUpB,UAAM,OAAQ,GAAQ,WACzC,OAAOH,EAAMwB,YAAYrB,MAAM,SAAUsB,GACrC,OAAQA,EAAGP,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKQ,UAClC,KAAK,EAAG,MAAO,CAAC,EAAec,EAAGE,OAAQkB,iBAM1DzC,EAAsBwB,UAAUkB,KAAO,WACnC,OAAO9C,EAAMuB,UAAUpB,UAAM,OAAQ,GAAQ,WACzC,OAAOH,EAAMwB,YAAYrB,MAAM,SAAUsB,GACrC,OAAQA,EAAGP,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKQ,UAClC,KAAK,EAAG,MAAO,CAAC,EAAec,EAAGE,OAAQmB,gBAM1D1C,EAAsBwB,UAAUmB,OAAS,WACrC,OAAO/C,EAAMuB,UAAUpB,UAAM,OAAQ,GAAQ,WACzC,OAAOH,EAAMwB,YAAYrB,MAAM,SAAUsB,GACrC,OAAQA,EAAGP,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKS,mBAClC,KAAK,EAAG,MAAO,CAAC,EAAea,EAAGE,OAAQqB,iBAS1D5C,EAAsBwB,UAAUqB,MAAQ,WACpC,OAAOjD,EAAMuB,UAAUpB,UAAM,OAAQ,GAAQ,WACzC,OAAOH,EAAMwB,YAAYrB,MAAM,SAAUsB,GACrC,OAAQA,EAAGP,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAK0B,aAClC,KAAK,EACD,OAAOJ,EAAGE,OAAgB,CAAC,EAAa,GACjC,CAAC,EAAaxB,KAAK4C,UAC9B,KAAK,EACDtB,EAAGE,OACHF,EAAGP,MAAQ,EACf,KAAK,EAAG,MAAO,CAAC,WAShCd,EAAsBwB,UAAUsB,QAAU,WACtC,OAAOlD,EAAMuB,UAAUpB,UAAM,OAAQ,GAAQ,WACzC,OAAOH,EAAMwB,YAAYrB,MAAM,SAAUsB,GACrC,OAAQA,EAAGP,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAK0B,aAClC,KAAK,EACD,OAAKJ,EAAGE,OACD,CAAC,EAAaxB,KAAK4C,UADH,CAAC,EAAa,GAEzC,KAAK,EACDtB,EAAGE,OACHF,EAAGP,MAAQ,EACf,KAAK,EAAG,MAAO,CAAC,WAMhCd,EAAsB+C,aAAe,mBAC9B/C,EApN+B,CAqNxCL,EAAQqD;;;;;;;;;;;;;;OAkBV9D,EAAQc,sBAAwBA,EAEhCiD,OAAOC,eAAehE,EAAS,aAAc,CAAEiE,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing'), require('@angular/cdk/coercion')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/slide-toggle/testing', ['exports', 'tslib', '@angular/cdk/testing', '@angular/cdk/coercion'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.slideToggle = global.ng.material.slideToggle || {}, global.ng.material.slideToggle.testing = {}), global.tslib, global.ng.cdk.testing, global.ng.cdk.coercion));\n}(this, (function (exports, tslib, testing, coercion) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-slide-toggle in tests. */\n    var MatSlideToggleHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatSlideToggleHarness, _super);\n        function MatSlideToggleHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._label = _this.locatorFor('label');\n            _this._input = _this.locatorFor('input');\n            _this._inputContainer = _this.locatorFor('.mat-slide-toggle-bar');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatSlideToggleHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which slide toggle instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatSlideToggleHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatSlideToggleHarness, options)\n                .addOption('label', options.label, function (harness, label) { return testing.HarnessPredicate.stringMatches(harness.getLabelText(), label); })\n                // We want to provide a filter option for \"name\" because the name of the slide-toggle is\n                // only set on the underlying input. This means that it's not possible for developers\n                // to retrieve the harness of a specific checkbox with name through a CSS selector.\n                .addOption('name', options.name, function (harness, name) { return tslib.__awaiter(_this, void 0, void 0, function () { return tslib.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, harness.getName()];\n                    case 1: return [2 /*return*/, (_a.sent()) === name];\n                }\n            }); }); });\n        };\n        /** Whether the slide-toggle is checked. */\n        MatSlideToggleHarness.prototype.isChecked = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var checked, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            checked = (_b.sent()).getProperty('checked');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, checked];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Whether the slide-toggle is disabled. */\n        MatSlideToggleHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var disabled, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            disabled = (_b.sent()).getAttribute('disabled');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, disabled];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Whether the slide-toggle is required. */\n        MatSlideToggleHarness.prototype.isRequired = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var required, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            required = (_b.sent()).getAttribute('required');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, required];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Whether the slide-toggle is valid. */\n        MatSlideToggleHarness.prototype.isValid = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var invalid;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            invalid = (_a.sent()).hasClass('ng-invalid');\n                            return [4 /*yield*/, invalid];\n                        case 2: return [2 /*return*/, !(_a.sent())];\n                    }\n                });\n            });\n        };\n        /** Gets the slide-toggle's name. */\n        MatSlideToggleHarness.prototype.getName = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('name')];\n                    }\n                });\n            });\n        };\n        /** Gets the slide-toggle's aria-label. */\n        MatSlideToggleHarness.prototype.getAriaLabel = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-label')];\n                    }\n                });\n            });\n        };\n        /** Gets the slide-toggle's aria-labelledby. */\n        MatSlideToggleHarness.prototype.getAriaLabelledby = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-labelledby')];\n                    }\n                });\n            });\n        };\n        /** Gets the slide-toggle's label text. */\n        MatSlideToggleHarness.prototype.getLabelText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._label()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Focuses the slide-toggle. */\n        MatSlideToggleHarness.prototype.focus = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the slide-toggle. */\n        MatSlideToggleHarness.prototype.blur = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /** Toggle the checked state of the slide-toggle. */\n        MatSlideToggleHarness.prototype.toggle = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._inputContainer()];\n                        case 1: return [2 /*return*/, (_a.sent()).click()];\n                    }\n                });\n            });\n        };\n        /**\n         * Puts the slide-toggle in a checked state by toggling it if it is currently unchecked, or doing\n         * nothing if it is already checked.\n         */\n        MatSlideToggleHarness.prototype.check = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isChecked()];\n                        case 1:\n                            if (!!(_a.sent())) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this.toggle()];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * Puts the slide-toggle in an unchecked state by toggling it if it is currently checked, or doing\n         * nothing if it is already unchecked.\n         */\n        MatSlideToggleHarness.prototype.uncheck = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isChecked()];\n                        case 1:\n                            if (!_a.sent()) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this.toggle()];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatSlideToggle` instance. */\n        MatSlideToggleHarness.hostSelector = 'mat-slide-toggle';\n        return MatSlideToggleHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatSlideToggleHarness = MatSlideToggleHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-slide-toggle-testing.umd.js.map\n"]}