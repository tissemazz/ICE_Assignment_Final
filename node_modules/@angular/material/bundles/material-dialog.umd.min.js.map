{"version":3,"sources":["src/material/material-dialog.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","dialog","cdk","overlay","portal","core","tslib","bidi","common","rxjs","operators","animations","a11y","keycodes","this","core$1","MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","trigger","state","style","opacity","transform","transition","animate","throwMatDialogContentAlreadyAttachedError","Error","MatDialogContainer","_super","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_this","call","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","EventEmitter","attachDomPortal","_portalOutlet","hasAttached","_savePreviouslyFocusedElement","_ariaLabelledBy","__extends","prototype","attachComponentPortal","attachTemplatePortal","_trapFocus","element","nativeElement","_focusTrap","create","focusInitialElementWhenReady","activeElement","contains","focus","_restoreFocus","toFocus","body","destroy","Promise","resolve","then","_onAnimationDone","event","toState","emit","_onAnimationStart","_startExitAnimation","markForCheck","decorators","type","Component","args","selector","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","Default","host","class","tabindex","aria-modal","[attr.id]","[attr.role]","[attr.aria-labelledby]","[attr.aria-label]","[attr.aria-describedby]","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","styles","ctorParameters","ElementRef","FocusTrapFactory","ChangeDetectorRef","undefined","Optional","Inject","DOCUMENT","propDecorators","ViewChild","CdkPortalOutlet","static","BasePortalOutlet","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","Subject","_afterClosed","_beforeClosed","_id","pipe","filter","phaseName","take","subscribe","next","complete","clearTimeout","_closeFallbackTimeout","dispose","detachments","_result","componentInstance","keydownEvents","keyCode","ESCAPE","hasModifierKey","preventDefault","close","dialogResult","detachBackdrop","setTimeout","totalTime","afterOpened","asObservable","afterClosed","beforeClosed","backdropClick","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","getState","getConfig","positionStrategy","MAT_DIALOG_DATA","InjectionToken","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatDialog","_overlay","_injector","_location","_defaultOptions","scrollStrategy","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","defer","openDialogs","length","_afterAllClosed","startWith","_scrollStrategy","Object","defineProperty","get","enumerable","configurable","parent","open","componentOrTemplateRef","config","_applyConfigDefaults","defaultOptions","__assign","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","_closeDialogs","find","ngOnDestroy","overlayConfig","_getOverlayConfig","dialogConfig","OverlayConfig","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","injector","Injector","viewContainerRef","providers","useValue","containerPortal","ComponentPortal","componentFactoryResolver","attach","instance","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","userInjector","Directionality","value","change","of","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","dialogs","Injectable","Location","SkipSelf","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","Directive","exportAs","(click)","[attr.type]","Input","_matDialogClose","MatDialogTitle","_dialogRef","container","[id]","MatDialogContent","MatDialogActions","classList","MatDialogModule","NgModule","imports","OverlayModule","PortalModule","MatCommonModule","declarations","entryComponents","MAT_DIALOG_SCROLL_STRATEGY_FACTORY"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/core'), require('@angular/material/core'), require('tslib'), require('@angular/cdk/bidi'), require('@angular/common'), require('rxjs'), require('rxjs/operators'), require('@angular/animations'), require('@angular/cdk/a11y'), require('@angular/cdk/keycodes')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/dialog', ['exports', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/core', '@angular/material/core', 'tslib', '@angular/cdk/bidi', '@angular/common', 'rxjs', 'rxjs/operators', '@angular/animations', '@angular/cdk/a11y', '@angular/cdk/keycodes'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.dialog = {}), global.ng.cdk.overlay, global.ng.cdk.portal, global.ng.core, global.ng.material.core, global.tslib, global.ng.cdk.bidi, global.ng.common, global.rxjs, global.rxjs.operators, global.ng.animations, global.ng.cdk.a11y, global.ng.cdk.keycodes));\n}(this, (function (exports, overlay, portal, core, core$1, tslib, bidi, common, rxjs, operators, animations, a11y, keycodes) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Configuration for opening a modal dialog with the MatDialog service.\n     */\n    var MatDialogConfig = /** @class */ (function () {\n        function MatDialogConfig() {\n            /** The ARIA role of the dialog element. */\n            this.role = 'dialog';\n            /** Custom class for the overlay pane. */\n            this.panelClass = '';\n            /** Whether the dialog has a backdrop. */\n            this.hasBackdrop = true;\n            /** Custom class for the backdrop. */\n            this.backdropClass = '';\n            /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n            this.disableClose = false;\n            /** Width of the dialog. */\n            this.width = '';\n            /** Height of the dialog. */\n            this.height = '';\n            /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n            this.maxWidth = '80vw';\n            /** Data being injected into the child component. */\n            this.data = null;\n            /** ID of the element that describes the dialog. */\n            this.ariaDescribedBy = null;\n            /** ID of the element that labels the dialog. */\n            this.ariaLabelledBy = null;\n            /** Aria label to assign to the dialog element. */\n            this.ariaLabel = null;\n            /** Whether the dialog should focus the first focusable element on open. */\n            this.autoFocus = true;\n            /**\n             * Whether the dialog should restore focus to the\n             * previously-focused element, after it's closed.\n             */\n            this.restoreFocus = true;\n            /**\n             * Whether the dialog should close when the user goes backwards/forwards in history.\n             * Note that this usually doesn't include clicking on links (unless the user is using\n             * the `HashLocationStrategy`).\n             */\n            this.closeOnNavigation = true;\n            // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n        }\n        return MatDialogConfig;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Animations used by MatDialog.\n     * @docs-private\n     */\n    var matDialogAnimations = {\n        /** Animation that is applied on the dialog container by defalt. */\n        dialogContainer: animations.trigger('dialogContainer', [\n            // Note: The `enter` animation transitions to `transform: none`, because for some reason\n            // specifying the transform explicitly, causes IE both to blur the dialog content and\n            // decimate the animation performance. Leaving it as `none` solves both issues.\n            animations.state('void, exit', animations.style({ opacity: 0, transform: 'scale(0.7)' })),\n            animations.state('enter', animations.style({ transform: 'none' })),\n            animations.transition('* => enter', animations.animate('150ms cubic-bezier(0, 0, 0.2, 1)', animations.style({ transform: 'none', opacity: 1 }))),\n            animations.transition('* => void, * => exit', animations.animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', animations.style({ opacity: 0 }))),\n        ])\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Throws an exception for the case when a ComponentPortal is\n     * attached to a DomPortalOutlet without an origin.\n     * @docs-private\n     */\n    function throwMatDialogContentAlreadyAttachedError() {\n        throw Error('Attempting to attach dialog content after content is already attached');\n    }\n    /**\n     * Internal component that wraps user-provided dialog content.\n     * Animation is based on https://material.io/guidelines/motion/choreography.html.\n     * @docs-private\n     */\n    var MatDialogContainer = /** @class */ (function (_super) {\n        tslib.__extends(MatDialogContainer, _super);\n        function MatDialogContainer(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n        /** The dialog configuration. */\n        _config) {\n            var _this = _super.call(this) || this;\n            _this._elementRef = _elementRef;\n            _this._focusTrapFactory = _focusTrapFactory;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._config = _config;\n            /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n            _this._elementFocusedBeforeDialogWasOpened = null;\n            /** State of the dialog animation. */\n            _this._state = 'enter';\n            /** Emits when an animation state changes. */\n            _this._animationStateChanged = new core.EventEmitter();\n            /**\n             * Attaches a DOM portal to the dialog container.\n             * @param portal Portal to be attached.\n             * @deprecated To be turned into a method.\n             * @breaking-change 10.0.0\n             */\n            _this.attachDomPortal = function (portal) {\n                if (_this._portalOutlet.hasAttached()) {\n                    throwMatDialogContentAlreadyAttachedError();\n                }\n                _this._savePreviouslyFocusedElement();\n                return _this._portalOutlet.attachDomPortal(portal);\n            };\n            _this._ariaLabelledBy = _config.ariaLabelledBy || null;\n            _this._document = _document;\n            return _this;\n        }\n        /**\n         * Attach a ComponentPortal as content to this dialog container.\n         * @param portal Portal to be attached as the dialog content.\n         */\n        MatDialogContainer.prototype.attachComponentPortal = function (portal) {\n            if (this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachComponentPortal(portal);\n        };\n        /**\n         * Attach a TemplatePortal as content to this dialog container.\n         * @param portal Portal to be attached as the dialog content.\n         */\n        MatDialogContainer.prototype.attachTemplatePortal = function (portal) {\n            if (this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachTemplatePortal(portal);\n        };\n        /** Moves the focus inside the focus trap. */\n        MatDialogContainer.prototype._trapFocus = function () {\n            var element = this._elementRef.nativeElement;\n            if (!this._focusTrap) {\n                this._focusTrap = this._focusTrapFactory.create(element);\n            }\n            // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n            // ready in instances where change detection has to run first. To deal with this, we simply\n            // wait for the microtask queue to be empty.\n            if (this._config.autoFocus) {\n                this._focusTrap.focusInitialElementWhenReady();\n            }\n            else {\n                var activeElement = this._document.activeElement;\n                // Otherwise ensure that focus is on the dialog container. It's possible that a different\n                // component tried to move focus while the open animation was running. See:\n                // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                // if the focus isn't inside the dialog already, because it's possible that the consumer\n                // turned off `autoFocus` in order to move focus themselves.\n                if (activeElement !== element && !element.contains(activeElement)) {\n                    element.focus();\n                }\n            }\n        };\n        /** Restores focus to the element that was focused before the dialog opened. */\n        MatDialogContainer.prototype._restoreFocus = function () {\n            var toFocus = this._elementFocusedBeforeDialogWasOpened;\n            // We need the extra check, because IE can set the `activeElement` to null in some cases.\n            if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n                var activeElement = this._document.activeElement;\n                var element = this._elementRef.nativeElement;\n                // Make sure that focus is still inside the dialog or is on the body (usually because a\n                // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n                // the consumer moved it themselves before the animation was done, in which case we shouldn't\n                // do anything.\n                if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                    element.contains(activeElement)) {\n                    toFocus.focus();\n                }\n            }\n            if (this._focusTrap) {\n                this._focusTrap.destroy();\n            }\n        };\n        /** Saves a reference to the element that was focused before the dialog was opened. */\n        MatDialogContainer.prototype._savePreviouslyFocusedElement = function () {\n            var _this = this;\n            if (this._document) {\n                this._elementFocusedBeforeDialogWasOpened = this._document.activeElement;\n                // Note that there is no focus method when rendering on the server.\n                if (this._elementRef.nativeElement.focus) {\n                    // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                    // opening multiple dialogs at the same time. Needs to be async, because the element\n                    // may not be focusable immediately.\n                    Promise.resolve().then(function () { return _this._elementRef.nativeElement.focus(); });\n                }\n            }\n        };\n        /** Callback, invoked whenever an animation on the host completes. */\n        MatDialogContainer.prototype._onAnimationDone = function (event) {\n            if (event.toState === 'enter') {\n                this._trapFocus();\n            }\n            else if (event.toState === 'exit') {\n                this._restoreFocus();\n            }\n            this._animationStateChanged.emit(event);\n        };\n        /** Callback, invoked when an animation on the host starts. */\n        MatDialogContainer.prototype._onAnimationStart = function (event) {\n            this._animationStateChanged.emit(event);\n        };\n        /** Starts the dialog exit animation. */\n        MatDialogContainer.prototype._startExitAnimation = function () {\n            this._state = 'exit';\n            // Mark the container for check so it can react if the\n            // view container is using OnPush change detection.\n            this._changeDetectorRef.markForCheck();\n        };\n        MatDialogContainer.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-dialog-container',\n                        template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                        encapsulation: core.ViewEncapsulation.None,\n                        // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        animations: [matDialogAnimations.dialogContainer],\n                        host: {\n                            'class': 'mat-dialog-container',\n                            'tabindex': '-1',\n                            'aria-modal': 'true',\n                            '[attr.id]': '_id',\n                            '[attr.role]': '_config.role',\n                            '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                            '[attr.aria-label]': '_config.ariaLabel',\n                            '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                            '[@dialogContainer]': '_state',\n                            '(@dialogContainer.start)': '_onAnimationStart($event)',\n                            '(@dialogContainer.done)': '_onAnimationDone($event)',\n                        },\n                        styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatDialogContainer.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: a11y.FocusTrapFactory },\n            { type: core.ChangeDetectorRef },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] },\n            { type: MatDialogConfig }\n        ]; };\n        MatDialogContainer.propDecorators = {\n            _portalOutlet: [{ type: core.ViewChild, args: [portal.CdkPortalOutlet, { static: true },] }]\n        };\n        return MatDialogContainer;\n    }(portal.BasePortalOutlet));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO(jelbourn): resizing\n    // Counter for unique dialog ids.\n    var uniqueId = 0;\n    /**\n     * Reference to a dialog opened via the MatDialog service.\n     */\n    var MatDialogRef = /** @class */ (function () {\n        function MatDialogRef(_overlayRef, _containerInstance, id) {\n            var _this = this;\n            if (id === void 0) { id = \"mat-dialog-\" + uniqueId++; }\n            this._overlayRef = _overlayRef;\n            this._containerInstance = _containerInstance;\n            this.id = id;\n            /** Whether the user is allowed to close the dialog. */\n            this.disableClose = this._containerInstance._config.disableClose;\n            /** Subject for notifying the user that the dialog has finished opening. */\n            this._afterOpened = new rxjs.Subject();\n            /** Subject for notifying the user that the dialog has finished closing. */\n            this._afterClosed = new rxjs.Subject();\n            /** Subject for notifying the user that the dialog has started closing. */\n            this._beforeClosed = new rxjs.Subject();\n            /** Current state of the dialog. */\n            this._state = 0 /* OPEN */;\n            // Pass the id along to the container.\n            _containerInstance._id = id;\n            // Emit when opening animation completes\n            _containerInstance._animationStateChanged.pipe(operators.filter(function (event) { return event.phaseName === 'done' && event.toState === 'enter'; }), operators.take(1))\n                .subscribe(function () {\n                _this._afterOpened.next();\n                _this._afterOpened.complete();\n            });\n            // Dispose overlay when closing animation is complete\n            _containerInstance._animationStateChanged.pipe(operators.filter(function (event) { return event.phaseName === 'done' && event.toState === 'exit'; }), operators.take(1)).subscribe(function () {\n                clearTimeout(_this._closeFallbackTimeout);\n                _this._overlayRef.dispose();\n            });\n            _overlayRef.detachments().subscribe(function () {\n                _this._beforeClosed.next(_this._result);\n                _this._beforeClosed.complete();\n                _this._afterClosed.next(_this._result);\n                _this._afterClosed.complete();\n                _this.componentInstance = null;\n                _this._overlayRef.dispose();\n            });\n            _overlayRef.keydownEvents()\n                .pipe(operators.filter(function (event) {\n                return event.keyCode === keycodes.ESCAPE && !_this.disableClose && !keycodes.hasModifierKey(event);\n            }))\n                .subscribe(function (event) {\n                event.preventDefault();\n                _this.close();\n            });\n        }\n        /**\n         * Close the dialog.\n         * @param dialogResult Optional result to return to the dialog opener.\n         */\n        MatDialogRef.prototype.close = function (dialogResult) {\n            var _this = this;\n            this._result = dialogResult;\n            // Transition the backdrop in parallel to the dialog.\n            this._containerInstance._animationStateChanged.pipe(operators.filter(function (event) { return event.phaseName === 'start'; }), operators.take(1))\n                .subscribe(function (event) {\n                _this._beforeClosed.next(dialogResult);\n                _this._beforeClosed.complete();\n                _this._state = 2 /* CLOSED */;\n                _this._overlayRef.detachBackdrop();\n                // The logic that disposes of the overlay depends on the exit animation completing, however\n                // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n                // timeout which will clean everything up if the animation hasn't fired within the specified\n                // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n                // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n                _this._closeFallbackTimeout = setTimeout(function () {\n                    _this._overlayRef.dispose();\n                }, event.totalTime + 100);\n            });\n            this._containerInstance._startExitAnimation();\n            this._state = 1 /* CLOSING */;\n        };\n        /**\n         * Gets an observable that is notified when the dialog is finished opening.\n         */\n        MatDialogRef.prototype.afterOpened = function () {\n            return this._afterOpened.asObservable();\n        };\n        /**\n         * Gets an observable that is notified when the dialog is finished closing.\n         */\n        MatDialogRef.prototype.afterClosed = function () {\n            return this._afterClosed.asObservable();\n        };\n        /**\n         * Gets an observable that is notified when the dialog has started closing.\n         */\n        MatDialogRef.prototype.beforeClosed = function () {\n            return this._beforeClosed.asObservable();\n        };\n        /**\n         * Gets an observable that emits when the overlay's backdrop has been clicked.\n         */\n        MatDialogRef.prototype.backdropClick = function () {\n            return this._overlayRef.backdropClick();\n        };\n        /**\n         * Gets an observable that emits when keydown events are targeted on the overlay.\n         */\n        MatDialogRef.prototype.keydownEvents = function () {\n            return this._overlayRef.keydownEvents();\n        };\n        /**\n         * Updates the dialog's position.\n         * @param position New dialog position.\n         */\n        MatDialogRef.prototype.updatePosition = function (position) {\n            var strategy = this._getPositionStrategy();\n            if (position && (position.left || position.right)) {\n                position.left ? strategy.left(position.left) : strategy.right(position.right);\n            }\n            else {\n                strategy.centerHorizontally();\n            }\n            if (position && (position.top || position.bottom)) {\n                position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n            }\n            else {\n                strategy.centerVertically();\n            }\n            this._overlayRef.updatePosition();\n            return this;\n        };\n        /**\n         * Updates the dialog's width and height.\n         * @param width New width of the dialog.\n         * @param height New height of the dialog.\n         */\n        MatDialogRef.prototype.updateSize = function (width, height) {\n            if (width === void 0) { width = ''; }\n            if (height === void 0) { height = ''; }\n            this._getPositionStrategy().width(width).height(height);\n            this._overlayRef.updatePosition();\n            return this;\n        };\n        /** Add a CSS class or an array of classes to the overlay pane. */\n        MatDialogRef.prototype.addPanelClass = function (classes) {\n            this._overlayRef.addPanelClass(classes);\n            return this;\n        };\n        /** Remove a CSS class or an array of classes from the overlay pane. */\n        MatDialogRef.prototype.removePanelClass = function (classes) {\n            this._overlayRef.removePanelClass(classes);\n            return this;\n        };\n        /** Gets the current state of the dialog's lifecycle. */\n        MatDialogRef.prototype.getState = function () {\n            return this._state;\n        };\n        /** Fetches the position strategy object from the overlay ref. */\n        MatDialogRef.prototype._getPositionStrategy = function () {\n            return this._overlayRef.getConfig().positionStrategy;\n        };\n        return MatDialogRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token that can be used to access the data that was passed in to a dialog. */\n    var MAT_DIALOG_DATA = new core.InjectionToken('MatDialogData');\n    /** Injection token that can be used to specify default dialog options. */\n    var MAT_DIALOG_DEFAULT_OPTIONS = new core.InjectionToken('mat-dialog-default-options');\n    /** Injection token that determines the scroll handling while the dialog is open. */\n    var MAT_DIALOG_SCROLL_STRATEGY = new core.InjectionToken('mat-dialog-scroll-strategy');\n    /** @docs-private */\n    function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n        return function () { return overlay.scrollStrategies.block(); };\n    }\n    /** @docs-private */\n    function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n        return function () { return overlay.scrollStrategies.block(); };\n    }\n    /** @docs-private */\n    var MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n        provide: MAT_DIALOG_SCROLL_STRATEGY,\n        deps: [overlay.Overlay],\n        useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n    };\n    /**\n     * Service to open Material Design modal dialogs.\n     */\n    var MatDialog = /** @class */ (function () {\n        function MatDialog(_overlay, _injector, \n        /**\n         * @deprecated `_location` parameter to be removed.\n         * @breaking-change 10.0.0\n         */\n        _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n            var _this = this;\n            this._overlay = _overlay;\n            this._injector = _injector;\n            this._defaultOptions = _defaultOptions;\n            this._parentDialog = _parentDialog;\n            this._overlayContainer = _overlayContainer;\n            this._openDialogsAtThisLevel = [];\n            this._afterAllClosedAtThisLevel = new rxjs.Subject();\n            this._afterOpenedAtThisLevel = new rxjs.Subject();\n            this._ariaHiddenElements = new Map();\n            // TODO (jelbourn): tighten the typing right-hand side of this expression.\n            /**\n             * Stream that emits when all open dialog have finished closing.\n             * Will emit on subscribe if there are no open dialogs to begin with.\n             */\n            this.afterAllClosed = rxjs.defer(function () { return _this.openDialogs.length ?\n                _this._afterAllClosed :\n                _this._afterAllClosed.pipe(operators.startWith(undefined)); });\n            this._scrollStrategy = scrollStrategy;\n        }\n        Object.defineProperty(MatDialog.prototype, \"openDialogs\", {\n            /** Keeps track of the currently-open dialogs. */\n            get: function () {\n                return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDialog.prototype, \"afterOpened\", {\n            /** Stream that emits when a dialog has been opened. */\n            get: function () {\n                return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDialog.prototype, \"_afterAllClosed\", {\n            get: function () {\n                var parent = this._parentDialog;\n                return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Opens a modal dialog containing the given component.\n         * @param componentOrTemplateRef Type of the component to load into the dialog,\n         *     or a TemplateRef to instantiate as the dialog content.\n         * @param config Extra configuration options.\n         * @returns Reference to the newly-opened dialog.\n         */\n        MatDialog.prototype.open = function (componentOrTemplateRef, config) {\n            var _this = this;\n            config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n            if (config.id && this.getDialogById(config.id)) {\n                throw Error(\"Dialog with id \\\"\" + config.id + \"\\\" exists already. The dialog id must be unique.\");\n            }\n            var overlayRef = this._createOverlay(config);\n            var dialogContainer = this._attachDialogContainer(overlayRef, config);\n            var dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n            // If this is the first dialog that we're opening, hide all the non-overlay content.\n            if (!this.openDialogs.length) {\n                this._hideNonDialogContentFromAssistiveTechnology();\n            }\n            this.openDialogs.push(dialogRef);\n            dialogRef.afterClosed().subscribe(function () { return _this._removeOpenDialog(dialogRef); });\n            this.afterOpened.next(dialogRef);\n            return dialogRef;\n        };\n        /**\n         * Closes all of the currently-open dialogs.\n         */\n        MatDialog.prototype.closeAll = function () {\n            this._closeDialogs(this.openDialogs);\n        };\n        /**\n         * Finds an open dialog by its id.\n         * @param id ID to use when looking up the dialog.\n         */\n        MatDialog.prototype.getDialogById = function (id) {\n            return this.openDialogs.find(function (dialog) { return dialog.id === id; });\n        };\n        MatDialog.prototype.ngOnDestroy = function () {\n            // Only close the dialogs at this level on destroy\n            // since the parent service may still be active.\n            this._closeDialogs(this._openDialogsAtThisLevel);\n            this._afterAllClosedAtThisLevel.complete();\n            this._afterOpenedAtThisLevel.complete();\n        };\n        /**\n         * Creates the overlay into which the dialog will be loaded.\n         * @param config The dialog configuration.\n         * @returns A promise resolving to the OverlayRef for the created overlay.\n         */\n        MatDialog.prototype._createOverlay = function (config) {\n            var overlayConfig = this._getOverlayConfig(config);\n            return this._overlay.create(overlayConfig);\n        };\n        /**\n         * Creates an overlay config from a dialog config.\n         * @param dialogConfig The dialog configuration.\n         * @returns The overlay configuration.\n         */\n        MatDialog.prototype._getOverlayConfig = function (dialogConfig) {\n            var state = new overlay.OverlayConfig({\n                positionStrategy: this._overlay.position().global(),\n                scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n                panelClass: dialogConfig.panelClass,\n                hasBackdrop: dialogConfig.hasBackdrop,\n                direction: dialogConfig.direction,\n                minWidth: dialogConfig.minWidth,\n                minHeight: dialogConfig.minHeight,\n                maxWidth: dialogConfig.maxWidth,\n                maxHeight: dialogConfig.maxHeight,\n                disposeOnNavigation: dialogConfig.closeOnNavigation\n            });\n            if (dialogConfig.backdropClass) {\n                state.backdropClass = dialogConfig.backdropClass;\n            }\n            return state;\n        };\n        /**\n         * Attaches an MatDialogContainer to a dialog's already-created overlay.\n         * @param overlay Reference to the dialog's underlying overlay.\n         * @param config The dialog configuration.\n         * @returns A promise resolving to a ComponentRef for the attached container.\n         */\n        MatDialog.prototype._attachDialogContainer = function (overlay, config) {\n            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            var injector = core.Injector.create({\n                parent: userInjector || this._injector,\n                providers: [{ provide: MatDialogConfig, useValue: config }]\n            });\n            var containerPortal = new portal.ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n            var containerRef = overlay.attach(containerPortal);\n            return containerRef.instance;\n        };\n        /**\n         * Attaches the user-provided component to the already-created MatDialogContainer.\n         * @param componentOrTemplateRef The type of component being loaded into the dialog,\n         *     or a TemplateRef to instantiate as the content.\n         * @param dialogContainer Reference to the wrapping MatDialogContainer.\n         * @param overlayRef Reference to the overlay in which the dialog resides.\n         * @param config The dialog configuration.\n         * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n         */\n        MatDialog.prototype._attachDialogContent = function (componentOrTemplateRef, dialogContainer, overlayRef, config) {\n            // Create a reference to the dialog we're creating in order to give the user a handle\n            // to modify and close it.\n            var dialogRef = new MatDialogRef(overlayRef, dialogContainer, config.id);\n            // When the dialog backdrop is clicked, we want to close it.\n            if (config.hasBackdrop) {\n                overlayRef.backdropClick().subscribe(function () {\n                    if (!dialogRef.disableClose) {\n                        dialogRef.close();\n                    }\n                });\n            }\n            if (componentOrTemplateRef instanceof core.TemplateRef) {\n                dialogContainer.attachTemplatePortal(new portal.TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, dialogRef: dialogRef }));\n            }\n            else {\n                var injector = this._createInjector(config, dialogRef, dialogContainer);\n                var contentRef = dialogContainer.attachComponentPortal(new portal.ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n                dialogRef.componentInstance = contentRef.instance;\n            }\n            dialogRef\n                .updateSize(config.width, config.height)\n                .updatePosition(config.position);\n            return dialogRef;\n        };\n        /**\n         * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n         * of a dialog to close itself and, optionally, to return a value.\n         * @param config Config object that is used to construct the dialog.\n         * @param dialogRef Reference to the dialog.\n         * @param container Dialog container element that wraps all of the contents.\n         * @returns The custom injector that can be used inside the dialog.\n         */\n        MatDialog.prototype._createInjector = function (config, dialogRef, dialogContainer) {\n            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n            // content are created out of the same ViewContainerRef and as such, are siblings for injector\n            // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n            // added to the injection tokens.\n            var providers = [\n                { provide: MatDialogContainer, useValue: dialogContainer },\n                { provide: MAT_DIALOG_DATA, useValue: config.data },\n                { provide: MatDialogRef, useValue: dialogRef }\n            ];\n            if (config.direction &&\n                (!userInjector || !userInjector.get(bidi.Directionality, null))) {\n                providers.push({\n                    provide: bidi.Directionality,\n                    useValue: { value: config.direction, change: rxjs.of() }\n                });\n            }\n            return core.Injector.create({ parent: userInjector || this._injector, providers: providers });\n        };\n        /**\n         * Removes a dialog from the array of open dialogs.\n         * @param dialogRef Dialog to be removed.\n         */\n        MatDialog.prototype._removeOpenDialog = function (dialogRef) {\n            var index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                // If all the dialogs were closed, remove/restore the `aria-hidden`\n                // to a the siblings and emit to the `afterAllClosed` stream.\n                if (!this.openDialogs.length) {\n                    this._ariaHiddenElements.forEach(function (previousValue, element) {\n                        if (previousValue) {\n                            element.setAttribute('aria-hidden', previousValue);\n                        }\n                        else {\n                            element.removeAttribute('aria-hidden');\n                        }\n                    });\n                    this._ariaHiddenElements.clear();\n                    this._afterAllClosed.next();\n                }\n            }\n        };\n        /**\n         * Hides all of the content that isn't an overlay from assistive technology.\n         */\n        MatDialog.prototype._hideNonDialogContentFromAssistiveTechnology = function () {\n            var overlayContainer = this._overlayContainer.getContainerElement();\n            // Ensure that the overlay container is attached to the DOM.\n            if (overlayContainer.parentElement) {\n                var siblings = overlayContainer.parentElement.children;\n                for (var i = siblings.length - 1; i > -1; i--) {\n                    var sibling = siblings[i];\n                    if (sibling !== overlayContainer &&\n                        sibling.nodeName !== 'SCRIPT' &&\n                        sibling.nodeName !== 'STYLE' &&\n                        !sibling.hasAttribute('aria-live')) {\n                        this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                        sibling.setAttribute('aria-hidden', 'true');\n                    }\n                }\n            }\n        };\n        /** Closes all of the dialogs in an array. */\n        MatDialog.prototype._closeDialogs = function (dialogs) {\n            var i = dialogs.length;\n            while (i--) {\n                // The `_openDialogs` property isn't updated after close until the rxjs subscription\n                // runs on the next microtask, in addition to modifying the array as we're going\n                // through it. We loop through all of them and call close without assuming that\n                // they'll be removed from the list instantaneously.\n                dialogs[i].close();\n            }\n        };\n        MatDialog.decorators = [\n            { type: core.Injectable }\n        ];\n        /** @nocollapse */\n        MatDialog.ctorParameters = function () { return [\n            { type: overlay.Overlay },\n            { type: core.Injector },\n            { type: common.Location, decorators: [{ type: core.Optional }] },\n            { type: MatDialogConfig, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n            { type: MatDialog, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] },\n            { type: overlay.OverlayContainer }\n        ]; };\n        return MatDialog;\n    }());\n    /**\n     * Applies default options to the dialog config.\n     * @param config Config to be modified.\n     * @param defaultOptions Default options provided.\n     * @returns The new configuration object.\n     */\n    function _applyConfigDefaults(config, defaultOptions) {\n        return tslib.__assign(tslib.__assign({}, defaultOptions), config);\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Counter used to generate unique IDs for dialog elements. */\n    var dialogElementUid = 0;\n    /**\n     * Button that will close the current dialog.\n     */\n    var MatDialogClose = /** @class */ (function () {\n        function MatDialogClose(dialogRef, _elementRef, _dialog) {\n            this.dialogRef = dialogRef;\n            this._elementRef = _elementRef;\n            this._dialog = _dialog;\n            /** Default to \"button\" to prevents accidental form submits. */\n            this.type = 'button';\n        }\n        MatDialogClose.prototype.ngOnInit = function () {\n            if (!this.dialogRef) {\n                // When this directive is included in a dialog via TemplateRef (rather than being\n                // in a Component), the DialogRef isn't available via injection because embedded\n                // views cannot be given a custom injector. Instead, we look up the DialogRef by\n                // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n                // be resolved at constructor time.\n                this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n            }\n        };\n        MatDialogClose.prototype.ngOnChanges = function (changes) {\n            var proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n            if (proxiedChange) {\n                this.dialogResult = proxiedChange.currentValue;\n            }\n        };\n        MatDialogClose.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[mat-dialog-close], [matDialogClose]',\n                        exportAs: 'matDialogClose',\n                        host: {\n                            '(click)': 'dialogRef.close(dialogResult)',\n                            '[attr.aria-label]': 'ariaLabel || null',\n                            '[attr.type]': 'type',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        MatDialogClose.ctorParameters = function () { return [\n            { type: MatDialogRef, decorators: [{ type: core.Optional }] },\n            { type: core.ElementRef },\n            { type: MatDialog }\n        ]; };\n        MatDialogClose.propDecorators = {\n            ariaLabel: [{ type: core.Input, args: ['aria-label',] }],\n            type: [{ type: core.Input }],\n            dialogResult: [{ type: core.Input, args: ['mat-dialog-close',] }],\n            _matDialogClose: [{ type: core.Input, args: ['matDialogClose',] }]\n        };\n        return MatDialogClose;\n    }());\n    /**\n     * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n     */\n    var MatDialogTitle = /** @class */ (function () {\n        function MatDialogTitle(_dialogRef, _elementRef, _dialog) {\n            this._dialogRef = _dialogRef;\n            this._elementRef = _elementRef;\n            this._dialog = _dialog;\n            this.id = \"mat-dialog-title-\" + dialogElementUid++;\n        }\n        MatDialogTitle.prototype.ngOnInit = function () {\n            var _this = this;\n            if (!this._dialogRef) {\n                this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n            }\n            if (this._dialogRef) {\n                Promise.resolve().then(function () {\n                    var container = _this._dialogRef._containerInstance;\n                    if (container && !container._ariaLabelledBy) {\n                        container._ariaLabelledBy = _this.id;\n                    }\n                });\n            }\n        };\n        MatDialogTitle.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[mat-dialog-title], [matDialogTitle]',\n                        exportAs: 'matDialogTitle',\n                        host: {\n                            'class': 'mat-dialog-title',\n                            '[id]': 'id',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        MatDialogTitle.ctorParameters = function () { return [\n            { type: MatDialogRef, decorators: [{ type: core.Optional }] },\n            { type: core.ElementRef },\n            { type: MatDialog }\n        ]; };\n        MatDialogTitle.propDecorators = {\n            id: [{ type: core.Input }]\n        };\n        return MatDialogTitle;\n    }());\n    /**\n     * Scrollable content container of a dialog.\n     */\n    var MatDialogContent = /** @class */ (function () {\n        function MatDialogContent() {\n        }\n        MatDialogContent.decorators = [\n            { type: core.Directive, args: [{\n                        selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\",\n                        host: { 'class': 'mat-dialog-content' }\n                    },] }\n        ];\n        return MatDialogContent;\n    }());\n    /**\n     * Container for the bottom action buttons in a dialog.\n     * Stays fixed to the bottom when scrolling.\n     */\n    var MatDialogActions = /** @class */ (function () {\n        function MatDialogActions() {\n        }\n        MatDialogActions.decorators = [\n            { type: core.Directive, args: [{\n                        selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\",\n                        host: { 'class': 'mat-dialog-actions' }\n                    },] }\n        ];\n        return MatDialogActions;\n    }());\n    /**\n     * Finds the closest MatDialogRef to an element by looking at the DOM.\n     * @param element Element relative to which to look for a dialog.\n     * @param openDialogs References to the currently-open dialogs.\n     */\n    function getClosestDialog(element, openDialogs) {\n        var parent = element.nativeElement.parentElement;\n        while (parent && !parent.classList.contains('mat-dialog-container')) {\n            parent = parent.parentElement;\n        }\n        return parent ? openDialogs.find(function (dialog) { return dialog.id === parent.id; }) : null;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatDialogModule = /** @class */ (function () {\n        function MatDialogModule() {\n        }\n        MatDialogModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            overlay.OverlayModule,\n                            portal.PortalModule,\n                            core$1.MatCommonModule,\n                        ],\n                        exports: [\n                            MatDialogContainer,\n                            MatDialogClose,\n                            MatDialogTitle,\n                            MatDialogContent,\n                            MatDialogActions,\n                            core$1.MatCommonModule,\n                        ],\n                        declarations: [\n                            MatDialogContainer,\n                            MatDialogClose,\n                            MatDialogTitle,\n                            MatDialogActions,\n                            MatDialogContent,\n                        ],\n                        providers: [\n                            MatDialog,\n                            MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                        ],\n                        entryComponents: [MatDialogContainer],\n                    },] }\n        ];\n        return MatDialogModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_DIALOG_DATA = MAT_DIALOG_DATA;\n    exports.MAT_DIALOG_DEFAULT_OPTIONS = MAT_DIALOG_DEFAULT_OPTIONS;\n    exports.MAT_DIALOG_SCROLL_STRATEGY = MAT_DIALOG_SCROLL_STRATEGY;\n    exports.MAT_DIALOG_SCROLL_STRATEGY_FACTORY = MAT_DIALOG_SCROLL_STRATEGY_FACTORY;\n    exports.MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = MAT_DIALOG_SCROLL_STRATEGY_PROVIDER;\n    exports.MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY = MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY;\n    exports.MatDialog = MatDialog;\n    exports.MatDialogActions = MatDialogActions;\n    exports.MatDialogClose = MatDialogClose;\n    exports.MatDialogConfig = MatDialogConfig;\n    exports.MatDialogContainer = MatDialogContainer;\n    exports.MatDialogContent = MatDialogContent;\n    exports.MatDialogModule = MatDialogModule;\n    exports.MatDialogRef = MatDialogRef;\n    exports.MatDialogTitle = MatDialogTitle;\n    exports.matDialogAnimations = matDialogAnimations;\n    exports.throwMatDialogContentAlreadyAttachedError = throwMatDialogContentAlreadyAttachedError;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-dialog.umd.js.map\n"]}