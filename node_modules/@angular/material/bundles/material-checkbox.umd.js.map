{"version":3,"file":"material-checkbox.umd.js","sources":["../../../../../../src/material/checkbox/checkbox-config.ts","../../../../../../src/material/checkbox/checkbox.ts","../../../../../../src/material/checkbox/checkbox-required-validator.ts","../../../../../../src/material/checkbox/checkbox-module.ts","../../../../../../src/material/checkbox/public-api.ts","../../../../../../src/material/checkbox/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n/** Default `mat-checkbox` options that can be overridden. */\nexport interface MatCheckboxDefaultOptions {\n  color?: ThemePalette;\n  clickAction?: MatCheckboxClickAction;\n}\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nexport const MAT_CHECKBOX_DEFAULT_OPTIONS =\n    new InjectionToken<MatCheckboxDefaultOptions>('mat-checkbox-default-options', {\n      providedIn: 'root',\n      factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY(): MatCheckboxDefaultOptions {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate',\n  };\n}\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @deprecated Injection token will be removed, use `MAT_CHECKBOX_DEFAULT_OPTIONS` instead.\n * @breaking-change 10.0.0\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_CHECKBOX_CLICK_ACTION,\n  MAT_CHECKBOX_DEFAULT_OPTIONS,\n  MatCheckboxClickAction,\n  MatCheckboxDefaultOptions\n} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport const enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase))));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple,\n    FocusableOption {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated `_clickAction` parameter to be removed, use\n               * `MAT_CHECKBOX_DEFAULT_OPTIONS`\n               * @breaking-change 10.0.0\n               */\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() @Inject(MAT_CHECKBOX_DEFAULT_OPTIONS)\n                  private _options?: MatCheckboxDefaultOptions) {\n    super(elementRef);\n    this._options = this._options || {};\n\n    if (this._options.color) {\n      this.color = this._options.color;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n\n    // TODO: Remove this after the `_clickAction` parameter is removed as an injection parameter.\n    this._clickAction = this._clickAction || this._options.clickAction;\n  }\n\n  ngAfterViewInit() {\n    this._syncIndeterminate(this._indeterminate);\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = coerceBooleanProperty(value);\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    if (this.checked) {\n      return 'true';\n    }\n\n    return this.indeterminate ? 'mixed' : 'false';\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options);\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._inputElement;\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_indeterminate: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './checkbox';\nexport * from './checkbox-config';\nexport * from './checkbox-module';\nexport * from './checkbox-required-validator';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["InjectionToken","NG_VALUE_ACCESSOR","forwardRef","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","__extends","EventEmitter","coerceBooleanProperty","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","ChangeDetectorRef","FocusMonitor","NgZone","Attribute","Optional","Inject","ANIMATION_MODULE_TYPE","Input","Output","ViewChild","MatRipple","NG_VALIDATORS","Directive","CheckboxRequiredValidator","NgModule","MatRippleModule","MatCommonModule","ObserversModule"],"mappings":";;;;;;IAAA;;;;;;;AAOA,IASA;AACA,QAAa,4BAA4B,GACrC,IAAIA,mBAAc,CAA4B,8BAA8B,EAAE;QAC5E,UAAU,EAAE,MAAM;QAClB,OAAO,EAAE,oCAAoC;KAC9C,CAAC,CAAC;IAEP;AACA,aAAgB,oCAAoC;QAClD,OAAO;YACL,KAAK,EAAE,QAAQ;YACf,WAAW,EAAE,qBAAqB;SACnC,CAAC;IACJ,CAAC;IAWD;;;;;AAKA,QAAa,yBAAyB,GAClC,IAAIA,mBAAc,CAAyB,2BAA2B,CAAC;;IC9C3E;;;;;;;IAsDA;IACA,IAAI,YAAY,GAAG,CAAC,CAAC;IAErB;;;;;AAKA,QAAa,mCAAmC,GAAQ;QACtD,OAAO,EAAEC,uBAAiB;QAC1B,WAAW,EAAEC,eAAU,CAAC,cAAM,OAAA,WAAW,GAAA,CAAC;QAC1C,KAAK,EAAE,IAAI;KACZ,CAAC;IAiBF;AACA;QAAA;SAKC;QAAD,wBAAC;IAAD,CAAC,IAAA;IAED;IACA;IACA;QACE,yBAAmB,WAAuB;YAAvB,gBAAW,GAAX,WAAW,CAAY;SAAI;QAChD,sBAAC;IAAD,CAAC,IAAA;IACD,IAAM,qBAAqB,GAMnBC,oBAAa,CAACC,iBAAU,CAACC,yBAAkB,CAACC,oBAAa,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;IAGtF;;;;;;;;AAQA;QAoBiCC,qCAAqB;QA+DpD,qBAAY,UAAmC,EAC3B,kBAAqC,EACrC,aAA2B,EAC3B,OAAe,EACA,QAAgB;;;;;;QAO3B,YAAoC,EACE,cAAuB,EAE7D,QAAoC;YAd5D,YAeE,kBAAM,UAAU,CAAC,SAyBlB;YAvCmB,wBAAkB,GAAlB,kBAAkB,CAAmB;YACrC,mBAAa,GAAb,aAAa,CAAc;YAC3B,aAAO,GAAP,OAAO,CAAQ;YAQX,kBAAY,GAAZ,YAAY,CAAwB;YACE,oBAAc,GAAd,cAAc,CAAS;YAE7D,cAAQ,GAAR,QAAQ,CAA4B;;;;;YArEvC,eAAS,GAAW,EAAE,CAAC;;;;YAKlB,oBAAc,GAAkB,IAAI,CAAC;YAEvD,eAAS,GAAW,kBAAgB,EAAE,YAAc,CAAC;;YAGpD,QAAE,GAAW,KAAI,CAAC,SAAS,CAAC;;YAY5B,mBAAa,GAAuB,OAAO,CAAC;;YAG5C,UAAI,GAAkB,IAAI,CAAC;;YAGjB,YAAM,GACrB,IAAIC,iBAAY,EAAqB,CAAC;;YAGvB,yBAAmB,GAA0B,IAAIA,iBAAY,EAAW,CAAC;;;;;YAe5F,gBAAU,GAAc,eAAQ,CAAC;YAEzB,4BAAsB,GAAW,EAAE,CAAC;YAEpC,wBAAkB,gBAAmD;YAErE,mCAA6B,GAAyB,eAAQ,CAAC;YAkE/D,cAAQ,GAAY,KAAK,CAAC;YAgB1B,eAAS,GAAY,KAAK,CAAC;YA0B3B,oBAAc,GAAY,KAAK,CAAC;YA1FtC,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;YAEpC,IAAI,KAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;gBACvB,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;aAClC;YAED,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAExC,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,SAAS,CAAC,UAAA,WAAW;gBAChE,IAAI,CAAC,WAAW,EAAE;;;;;;oBAMhB,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;wBACrB,KAAI,CAAC,UAAU,EAAE,CAAC;wBAClB,kBAAkB,CAAC,YAAY,EAAE,CAAC;qBACnC,CAAC,CAAC;iBACJ;aACF,CAAC,CAAC;;YAGH,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,IAAI,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;;SACpE;QAlFD,sBAAI,gCAAO;;iBAAX,cAAwB,OAAO,CAAG,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,SAAS,YAAQ,CAAC,EAAE;;;WAAA;QAGtE,sBACI,iCAAQ;;iBADZ,cAC0B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;iBAClD,UAAa,KAAc,IAAI,IAAI,CAAC,SAAS,GAAGC,8BAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;;WAD7B;QAgFlD,qCAAe,GAAf;YACE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SAC9C;;QAGD,wCAAkB,GAAlB,eAAuB;QAEvB,iCAAW,GAAX;YACE,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACrD;QAKD,sBACI,gCAAO;;;;iBADX,cACyB,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;iBAChD,UAAY,KAAc;gBACxB,IAAI,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE;oBACzB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;oBACtB,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;iBACxC;aACF;;;WAN+C;QAahD,sBACI,iCAAQ;;;;;iBADZ,cACiB,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;iBACzC,UAAa,KAAU;gBACrB,IAAM,QAAQ,GAAGA,8BAAqB,CAAC,KAAK,CAAC,CAAC;gBAE9C,IAAI,QAAQ,KAAK,IAAI,CAAC,QAAQ,EAAE;oBAC9B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;oBAC1B,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;iBACxC;aACF;;;WARwC;QAiBzC,sBACI,sCAAa;;;;;;;iBADjB,cAC+B,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE;iBAC5D,UAAkB,KAAc;gBAC9B,IAAM,OAAO,GAAG,KAAK,IAAI,IAAI,CAAC,cAAc,CAAC;gBAC7C,IAAI,CAAC,cAAc,GAAGA,8BAAqB,CAAC,KAAK,CAAC,CAAC;gBAEnD,IAAI,OAAO,EAAE;oBACX,IAAI,IAAI,CAAC,cAAc,EAAE;wBACvB,IAAI,CAAC,qBAAqB,uBAAoC,CAAC;qBAChE;yBAAM;wBACL,IAAI,CAAC,qBAAqB,CACxB,IAAI,CAAC,OAAO,uCAAiE,CAAC;qBACjF;oBACD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBACpD;gBAED,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;aAC9C;;;WAhB2D;QAmB5D,uCAAiB,GAAjB;YACE,OAAO,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC;SAC5C;;QAGD,wCAAkB,GAAlB;;;;;;YAME,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,CAAC;SACzC;;QAGD,gCAAU,GAAV,UAAW,KAAU;YACnB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC;SACxB;;QAGD,sCAAgB,GAAhB,UAAiB,EAAwB;YACvC,IAAI,CAAC,6BAA6B,GAAG,EAAE,CAAC;SACzC;;QAGD,uCAAiB,GAAjB,UAAkB,EAAO;YACvB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;SACtB;;QAGD,sCAAgB,GAAhB,UAAiB,UAAmB;YAClC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;SAC5B;QAED,qCAAe,GAAf;YACE,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,OAAO,MAAM,CAAC;aACf;YAED,OAAO,IAAI,CAAC,aAAa,GAAG,OAAO,GAAG,OAAO,CAAC;SAC/C;QAEO,2CAAqB,GAA7B,UAA8B,QAA8B;YAC1D,IAAI,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC;YACvC,IAAI,OAAO,GAAgB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;YAE1D,IAAI,QAAQ,KAAK,QAAQ,EAAE;gBACzB,OAAO;aACR;YACD,IAAI,IAAI,CAAC,sBAAsB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC1C,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;aACvD;YAED,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,yCAAyC,CACxE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACxB,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC;YAEnC,IAAI,IAAI,CAAC,sBAAsB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC1C,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;;gBAGnD,IAAM,gBAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC;gBAEnD,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;oBAC7B,UAAU,CAAC;wBACT,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAc,CAAC,CAAC;qBAC1C,EAAE,IAAI,CAAC,CAAC;iBACV,CAAC,CAAC;aACJ;SACF;QAEO,sCAAgB,GAAxB;YACE,IAAM,KAAK,GAAG,IAAI,iBAAiB,EAAE,CAAC;YACtC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;YACpB,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;YAE7B,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;;QAGD,4BAAM,GAAN;YACE,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;SAC9B;;;;;;;;QASD,mCAAa,GAAb,UAAc,KAAY;YAA1B,iBAmCC;;;;;;;;YA3BC,KAAK,CAAC,eAAe,EAAE,CAAC;;YAGxB,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,KAAK,MAAM,EAAE;;gBAElD,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,YAAY,KAAK,OAAO,EAAE;oBAEvD,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;wBACrB,KAAI,CAAC,cAAc,GAAG,KAAK,CAAC;wBAC5B,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC;qBACpD,CAAC,CAAC;iBACJ;gBAED,IAAI,CAAC,MAAM,EAAE,CAAC;gBACd,IAAI,CAAC,qBAAqB,CACtB,IAAI,CAAC,QAAQ,uCAAiE,CAAC;;;;gBAKnF,IAAI,CAAC,gBAAgB,EAAE,CAAC;aACzB;iBAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,KAAK,MAAM,EAAE;;;gBAGzD,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;gBACxD,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;aACrE;SACF;;QAGD,2BAAK,GAAL,UAAM,MAAgC,EAAE,OAAsB;YAAxD,uBAAA,EAAA,mBAAgC;YACpC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;SAClE;QAED,yCAAmB,GAAnB,UAAoB,KAAY;;;;YAI9B,KAAK,CAAC,eAAe,EAAE,CAAC;SACzB;QAEO,+DAAyC,GAAjD,UACI,QAA8B,EAAE,QAA8B;;YAEhE,IAAI,IAAI,CAAC,cAAc,KAAK,gBAAgB,EAAE;gBAC5C,OAAO,EAAE,CAAC;aACX;YAED,IAAI,UAAU,GAAW,EAAE,CAAC;YAE5B,QAAQ,QAAQ;gBACd;;;oBAGE,IAAI,QAAQ,sBAAmC;wBAC7C,UAAU,GAAG,mBAAmB,CAAC;qBAClC;yBAAM,IAAI,QAAQ,2BAAwC;wBACzD,UAAU,GAAG,yBAAyB,CAAC;qBACxC;yBAAM;wBACL,OAAO,EAAE,CAAC;qBACX;oBACD,MAAM;gBACR;oBACE,UAAU,GAAG,QAAQ;wBACjB,mBAAmB,GAAG,yBAAyB,CAAC;oBACpD,MAAM;gBACR;oBACE,UAAU,GAAG,QAAQ;wBACjB,mBAAmB,GAAG,uBAAuB,CAAC;oBAClD,MAAM;gBACR;oBACE,UAAU,GAAG,QAAQ;wBACjB,uBAAuB,GAAG,yBAAyB,CAAC;oBACxD,MAAM;aACT;YAED,OAAO,uBAAqB,UAAY,CAAC;SAC1C;;;;;;;;;QAUO,wCAAkB,GAA1B,UAA2B,KAAc;YACvC,IAAM,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC;YAE1C,IAAI,cAAc,EAAE;gBAClB,cAAc,CAAC,aAAa,CAAC,aAAa,GAAG,KAAK,CAAC;aACpD;SACF;;oBAhYFC,cAAS,SAAC;wBACT,QAAQ,EAAE,cAAc;wBACxB,0iEAA4B;wBAE5B,QAAQ,EAAE,aAAa;wBACvB,IAAI,EAAE;4BACJ,OAAO,EAAE,cAAc;4BACvB,MAAM,EAAE,IAAI;4BACZ,iBAAiB,EAAE,MAAM;4BACzB,oCAAoC,EAAE,eAAe;4BACrD,8BAA8B,EAAE,SAAS;4BACzC,+BAA+B,EAAE,UAAU;4BAC3C,mCAAmC,EAAE,2BAA2B;4BAChE,iCAAiC,EAAE,qCAAqC;yBACzE;wBACD,SAAS,EAAE,CAAC,mCAAmC,CAAC;wBAChD,MAAM,EAAE,CAAC,eAAe,EAAE,OAAO,EAAE,UAAU,CAAC;wBAC9C,aAAa,EAAEC,sBAAiB,CAAC,IAAI;wBACrC,eAAe,EAAEC,4BAAuB,CAAC,MAAM;;qBAChD;;;;oBApHCC,eAAU;oBAFVC,sBAAiB;oBANMC,iBAAY;oBAanCC,WAAM;iDAmLOC,cAAS,SAAC,UAAU;oDAMpBC,aAAQ,YAAIC,WAAM,SAAC,yBAAyB;iDAE5CD,aAAQ,YAAIC,WAAM,SAACC,gCAAqB;oDACxCF,aAAQ,YAAIC,WAAM,SAAC,4BAA4B;;;gCApE3DE,UAAK,SAAC,YAAY;qCAKlBA,UAAK,SAAC,iBAAiB;yBAKvBA,UAAK;+BAMLA,UAAK;oCAMLA,UAAK;2BAGLA,UAAK;6BAGLC,WAAM;0CAINA,WAAM;4BAGND,UAAK;oCAGLE,cAAS,SAAC,OAAO;6BAGjBA,cAAS,SAACC,gBAAS;8BAsEnBH,UAAK;+BAcLA,UAAK;oCAkBLA,UAAK;;QA2NR,kBAAC;KAAA,CAlXgC,qBAAqB;;ICrItD;;;;;;;QAkBa,+BAA+B,GAAa;QACvD,OAAO,EAAEI,mBAAa;QACtB,WAAW,EAAEvB,eAAU,CAAC,cAAM,OAAA,4BAA4B,GAAA,CAAC;QAC3D,KAAK,EAAE,IAAI;KACZ,CAAC;IAEF;;;;;AAKA;QAKkDK,sDAAyB;QAL3E;;SAK8E;;oBAL7EmB,cAAS,SAAC;wBACT,QAAQ,EAAE,6HACsE;wBAChF,SAAS,EAAE,CAAC,+BAA+B,CAAC;qBAC7C;;QAC4E,mCAAC;KAAA,CAA5BC,+BAAyB;;IClC3E;;;;;;;AAQA,IAMA;AACA;QAAA;SAMC;;oBANAC,aAAQ,SAAC;wBACR,OAAO,EAAE,CAAC,4BAA4B,CAAC;wBACvC,YAAY,EAAE,CAAC,4BAA4B,CAAC;qBAC7C;;QAGD,0CAAC;KAND,IAMC;;QAED;SASC;;oBATAA,aAAQ,SAAC;wBACR,OAAO,EAAE;4BACPC,sBAAe,EAAEC,sBAAe,EAAEC,yBAAe;4BACjD,mCAAmC;yBACpC;wBACD,OAAO,EAAE,CAAC,WAAW,EAAED,sBAAe,EAAE,mCAAmC,CAAC;wBAC5E,YAAY,EAAE,CAAC,WAAW,CAAC;qBAC5B;;QAED,wBAAC;KATD;;ICvBA;;;;;;OAMG;;ICNH;;OAEG;;;;;;;;;;;;;;;;;;;;;"}