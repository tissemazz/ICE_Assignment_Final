{"version":3,"file":"material-slide-toggle.umd.js","sources":["../../../../../../src/material/slide-toggle/slide-toggle-config.ts","../../../../../../src/material/slide-toggle/slide-toggle.ts","../../../../../../src/material/slide-toggle/slide-toggle-required-validator.ts","../../../../../../src/material/slide-toggle/slide-toggle-module.ts","../../../../../../src/material/slide-toggle/public-api.ts","../../../../../../src/material/slide-toggle/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /**\n   * Whether drag action triggers value changes in slide toggle.\n   * @deprecated No longer being used.\n   * @breaking-change 10.0.0\n   */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 10.0.0\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n                /**\n                 * @deprecated `_ngZone` and `_dir` parameters to be removed.\n                 * @breaking-change 10.0.0\n                 */\n              _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        // Only forward focus manually when it was received programmatically or through the\n        // keyboard. We should not do this for mouse/touch focus for two reasons:\n        // 1. It can prevent clicks from landing in Chrome (see #18269).\n        // 2. They're already handled by the wrapping `label` element.\n        if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n          this._inputElement.nativeElement.focus();\n        } else if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    this.toggleChange.emit();\n\n    // When the slide toggle's config disables toggle change event by setting\n    // `disableToggleValue: true`, the slide toggle's value does not change, and the\n    // checked state of the underlying input needs to be changed back.\n    if (this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_checked: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n@Directive({\n  selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n  providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n})\nexport class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatSlideToggle} from './slide-toggle';\nimport {MatSlideToggleRequiredValidator} from './slide-toggle-required-validator';\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n@NgModule({\n  exports: [MatSlideToggleRequiredValidator],\n  declarations: [MatSlideToggleRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatSlideToggleRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatRippleModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slide-toggle-module';\nexport * from './slide-toggle';\nexport * from './slide-toggle-config';\nexport * from './slide-toggle-required-validator';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["InjectionToken","NG_VALUE_ACCESSOR","forwardRef","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","__extends","EventEmitter","coerceBooleanProperty","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","FocusMonitor","ChangeDetectorRef","Attribute","NgZone","Inject","Optional","ANIMATION_MODULE_TYPE","Directionality","ViewChild","Input","Output","NG_VALIDATORS","Directive","CheckboxRequiredValidator","NgModule","MatRippleModule","MatCommonModule","ObserversModule"],"mappings":"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"}