{"version":3,"sources":["src/material/material-button-toggle-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","buttonToggle","testing","tslib","cdk","coercion","this","MatButtonToggleHarness","_super","_this","apply","arguments","_label","locatorFor","_button","__extends","with","options","HarnessPredicate","addOption","text","harness","stringMatches","getText","name","getName","checked","__awaiter","__generator","_a","label","isChecked","sent","prototype","_b","getAttribute","coerceBooleanProperty","isDisabled","disabled","getAriaLabel","getAriaLabelledby","getAppearance","host","hasClass","focus","blur","toggle","click","check","uncheck","hostSelector","ComponentHarness","MatButtonToggleGroupHarness","getToggles","filter","locatorForAll","isVertical","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing'), require('@angular/cdk/coercion')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/button-toggle/testing', ['exports', 'tslib', '@angular/cdk/testing', '@angular/cdk/coercion'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.buttonToggle = global.ng.material.buttonToggle || {}, global.ng.material.buttonToggle.testing = {}), global.tslib, global.ng.cdk.testing, global.ng.cdk.coercion));\n}(this, (function (exports, tslib, testing, coercion) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-button-toggle in tests. */\n    var MatButtonToggleHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatButtonToggleHarness, _super);\n        function MatButtonToggleHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._label = _this.locatorFor('.mat-button-toggle-label-content');\n            _this._button = _this.locatorFor('.mat-button-toggle-button');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatButtonToggleHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which button toggle instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatButtonToggleHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatButtonToggleHarness, options)\n                .addOption('text', options.text, function (harness, text) { return testing.HarnessPredicate.stringMatches(harness.getText(), text); })\n                .addOption('name', options.name, function (harness, name) { return testing.HarnessPredicate.stringMatches(harness.getName(), name); })\n                .addOption('checked', options.checked, function (harness, checked) { return tslib.__awaiter(_this, void 0, void 0, function () { return tslib.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, harness.isChecked()];\n                    case 1: return [2 /*return*/, (_a.sent()) === checked];\n                }\n            }); }); });\n        };\n        /** Gets a boolean promise indicating if the button toggle is checked. */\n        MatButtonToggleHarness.prototype.isChecked = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var checked, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._button()];\n                        case 1:\n                            checked = (_b.sent()).getAttribute('aria-pressed');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, checked];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the button toggle is disabled. */\n        MatButtonToggleHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var disabled, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._button()];\n                        case 1:\n                            disabled = (_b.sent()).getAttribute('disabled');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, disabled];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the button toggle's name. */\n        MatButtonToggleHarness.prototype.getName = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._button()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('name')];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the button toggle's aria-label. */\n        MatButtonToggleHarness.prototype.getAriaLabel = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._button()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-label')];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the button toggles's aria-labelledby. */\n        MatButtonToggleHarness.prototype.getAriaLabelledby = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._button()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-labelledby')];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the button toggle's text. */\n        MatButtonToggleHarness.prototype.getText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._label()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Gets the appearance that the button toggle is using. */\n        MatButtonToggleHarness.prototype.getAppearance = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var host, className;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            host = _a.sent();\n                            className = 'mat-button-toggle-appearance-standard';\n                            return [4 /*yield*/, host.hasClass(className)];\n                        case 2: return [2 /*return*/, (_a.sent()) ? 'standard' : 'legacy'];\n                    }\n                });\n            });\n        };\n        /** Focuses the toggle. */\n        MatButtonToggleHarness.prototype.focus = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._button()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the toggle. */\n        MatButtonToggleHarness.prototype.blur = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._button()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /** Toggle the checked state of the buttons toggle. */\n        MatButtonToggleHarness.prototype.toggle = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._button()];\n                        case 1: return [2 /*return*/, (_a.sent()).click()];\n                    }\n                });\n            });\n        };\n        /**\n         * Puts the button toggle in a checked state by toggling it if it's\n         * currently unchecked, or doing nothing if it is already checked.\n         */\n        MatButtonToggleHarness.prototype.check = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isChecked()];\n                        case 1:\n                            if (!!(_a.sent())) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this.toggle()];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * Puts the button toggle in an unchecked state by toggling it if it's\n         * currently checked, or doing nothing if it's already unchecked.\n         */\n        MatButtonToggleHarness.prototype.uncheck = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isChecked()];\n                        case 1:\n                            if (!_a.sent()) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this.toggle()];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatButton` instance. */\n        MatButtonToggleHarness.hostSelector = 'mat-button-toggle';\n        return MatButtonToggleHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-button-toggle in tests. */\n    var MatButtonToggleGroupHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatButtonToggleGroupHarness, _super);\n        function MatButtonToggleGroupHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatButtonToggleGroupHarness`\n         * that meets certain criteria.\n         * @param options Options for filtering which button toggle instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatButtonToggleGroupHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatButtonToggleGroupHarness, options);\n        };\n        /**\n         * Gets the button toggles that are inside the group.\n         * @param filter Optionally filters which toggles are included.\n         */\n        MatButtonToggleGroupHarness.prototype.getToggles = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorForAll(MatButtonToggleHarness.with(filter))()];\n                });\n            });\n        };\n        /** Gets whether the button toggle group is disabled. */\n        MatButtonToggleGroupHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).getAttribute('aria-disabled')];\n                        case 2: return [2 /*return*/, (_a.sent()) === 'true'];\n                    }\n                });\n            });\n        };\n        /** Gets whether the button toggle group is laid out vertically. */\n        MatButtonToggleGroupHarness.prototype.isVertical = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-button-toggle-vertical')];\n                    }\n                });\n            });\n        };\n        /** Gets the appearance that the group is using. */\n        MatButtonToggleGroupHarness.prototype.getAppearance = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var host, className;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            host = _a.sent();\n                            className = 'mat-button-toggle-group-appearance-standard';\n                            return [4 /*yield*/, host.hasClass(className)];\n                        case 2: return [2 /*return*/, (_a.sent()) ? 'standard' : 'legacy'];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatButton` instance. */\n        MatButtonToggleGroupHarness.hostSelector = 'mat-button-toggle-group';\n        return MatButtonToggleGroupHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatButtonToggleGroupHarness = MatButtonToggleGroupHarness;\n    exports.MatButtonToggleHarness = MatButtonToggleHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-button-toggle-testing.umd.js.map\n"]}