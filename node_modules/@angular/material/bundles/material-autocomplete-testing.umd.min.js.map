{"version":3,"sources":["src/material/material-autocomplete-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","autocomplete","testing","tslib","cdk","coercion","core","this","testing$1","PANEL_SELECTOR","MatAutocompleteHarness","_super","_this","apply","arguments","_documentRootLocator","documentRootLocatorFactory","_optionalPanel","locatorForOptional","__extends","with","options","HarnessPredicate","addOption","value","harness","stringMatches","getValue","prototype","__awaiter","__generator","_a","label","host","sent","getProperty","isDisabled","disabled","_b","getAttribute","coerceBooleanProperty","focus","blur","enterText","sendKeys","getOptions","filters","locatorForAll","MatOptionHarness","__assign","ancestor","getOptionGroups","MatOptgroupHarness","selectOption","length","Error","JSON","stringify","click","isOpen","panel","hasClass","hostSelector","ComponentHarness","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/coercion'), require('@angular/cdk/testing'), require('@angular/material/core/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/autocomplete/testing', ['exports', 'tslib', '@angular/cdk/coercion', '@angular/cdk/testing', '@angular/material/core/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.autocomplete = global.ng.material.autocomplete || {}, global.ng.material.autocomplete.testing = {}), global.tslib, global.ng.cdk.coercion, global.ng.cdk.testing, global.ng.material.core.testing));\n}(this, (function (exports, tslib, coercion, testing, testing$1) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Selector for the autocomplete panel. */\n    var PANEL_SELECTOR = '.mat-autocomplete-panel';\n    /** Harness for interacting with a standard mat-autocomplete in tests. */\n    var MatAutocompleteHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatAutocompleteHarness, _super);\n        function MatAutocompleteHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._documentRootLocator = _this.documentRootLocatorFactory();\n            _this._optionalPanel = _this._documentRootLocator.locatorForOptional(PANEL_SELECTOR);\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatAutocompleteHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which autocomplete instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatAutocompleteHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatAutocompleteHarness, options)\n                .addOption('value', options.value, function (harness, value) { return testing.HarnessPredicate.stringMatches(harness.getValue(), value); });\n        };\n        /** Gets the value of the autocomplete input. */\n        MatAutocompleteHarness.prototype.getValue = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getProperty('value')];\n                    }\n                });\n            });\n        };\n        /** Whether the autocomplete input is disabled. */\n        MatAutocompleteHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var disabled, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            disabled = (_b.sent()).getAttribute('disabled');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, disabled];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Focuses the autocomplete input. */\n        MatAutocompleteHarness.prototype.focus = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the autocomplete input. */\n        MatAutocompleteHarness.prototype.blur = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /** Enters text into the autocomplete. */\n        MatAutocompleteHarness.prototype.enterText = function (value) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).sendKeys(value)];\n                    }\n                });\n            });\n        };\n        /** Gets the options inside the autocomplete panel. */\n        MatAutocompleteHarness.prototype.getOptions = function (filters) {\n            if (filters === void 0) { filters = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this._documentRootLocator.locatorForAll(testing$1.MatOptionHarness.with(tslib.__assign(tslib.__assign({}, filters), { ancestor: PANEL_SELECTOR })))()];\n                });\n            });\n        };\n        /** Gets the option groups inside the autocomplete panel. */\n        MatAutocompleteHarness.prototype.getOptionGroups = function (filters) {\n            if (filters === void 0) { filters = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this._documentRootLocator.locatorForAll(testing$1.MatOptgroupHarness.with(tslib.__assign(tslib.__assign({}, filters), { ancestor: PANEL_SELECTOR })))()];\n                });\n            });\n        };\n        /** Selects the first option matching the given filters. */\n        MatAutocompleteHarness.prototype.selectOption = function (filters) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var options;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.focus()];\n                        case 1:\n                            _a.sent(); // Focus the input to make sure the autocomplete panel is shown.\n                            return [4 /*yield*/, this.getOptions(filters)];\n                        case 2:\n                            options = _a.sent();\n                            if (!options.length) {\n                                throw Error(\"Could not find a mat-option matching \" + JSON.stringify(filters));\n                            }\n                            return [4 /*yield*/, options[0].click()];\n                        case 3:\n                            _a.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** Whether the autocomplete is open. */\n        MatAutocompleteHarness.prototype.isOpen = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var panel, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._optionalPanel()];\n                        case 1:\n                            panel = _b.sent();\n                            _a = !!panel;\n                            if (!_a) return [3 /*break*/, 3];\n                            return [4 /*yield*/, panel.hasClass('mat-autocomplete-visible')];\n                        case 2:\n                            _a = (_b.sent());\n                            _b.label = 3;\n                        case 3: return [2 /*return*/, _a];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatAutocomplete` instance. */\n        MatAutocompleteHarness.hostSelector = '.mat-autocomplete-trigger';\n        return MatAutocompleteHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatAutocompleteHarness = MatAutocompleteHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-autocomplete-testing.umd.js.map\n"]}