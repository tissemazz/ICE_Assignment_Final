{"version":3,"sources":["src/material/material-paginator.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","paginator","common","core","button","select","tooltip","tslib","cdk","coercion","rxjs","this","i0","MatPaginatorIntl","changes","Subject","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","page","pageSize","length","startIndex","Math","max","min","decorators","type","Injectable","args","providedIn","ɵprov","ɵɵdefineInjectable","MatPaginatorIntl_Factory","token","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","parentIntl","MAT_PAGINATOR_INTL_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","PageEvent","MAT_PAGINATOR_DEFAULT_OPTIONS","InjectionToken","MatPaginator","_super","_intl","_changeDetectorRef","defaults","_this","call","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","EventEmitter","_intlChanges","subscribe","markForCheck","pageSizeOptions","hidePageSize","showFirstLastButtons","_pageSize","__extends","Object","defineProperty","prototype","get","set","value","coerceNumberProperty","enumerable","configurable","_updateDisplayedPageSizeOptions","map","p","coerceBooleanProperty","ngOnInit","_initialized","_markInitialized","ngOnDestroy","unsubscribe","nextPage","hasNextPage","previousPageIndex","pageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","ceil","_changePageSize","floor","_nextButtonsDisabled","disabled","_previousButtonsDisabled","_displayedPageSizeOptions","slice","indexOf","push","sort","a","b","emit","Component","selector","exportAs","template","inputs","host","class","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","styles","ctorParameters","ChangeDetectorRef","undefined","Inject","propDecorators","color","Input","Output","mixinDisabled","mixinInitialized","MatPaginatorBase","MatPaginatorModule","NgModule","imports","CommonModule","MatButtonModule","MatSelectModule","MatTooltipModule","declarations","providers"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/material/button'), require('@angular/material/select'), require('@angular/material/tooltip'), require('tslib'), require('@angular/cdk/coercion'), require('rxjs'), require('@angular/material/core')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/paginator', ['exports', '@angular/common', '@angular/core', '@angular/material/button', '@angular/material/select', '@angular/material/tooltip', 'tslib', '@angular/cdk/coercion', 'rxjs', '@angular/material/core'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.paginator = {}), global.ng.common, global.ng.core, global.ng.material.button, global.ng.material.select, global.ng.material.tooltip, global.tslib, global.ng.cdk.coercion, global.rxjs, global.ng.material.core));\n}(this, (function (exports, common, i0, button, select, tooltip, tslib, coercion, rxjs, core) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n     * include it in a custom provider\n     */\n    var MatPaginatorIntl = /** @class */ (function () {\n        function MatPaginatorIntl() {\n            /**\n             * Stream to emit from when labels are changed. Use this to notify components when the labels have\n             * changed after initialization.\n             */\n            this.changes = new rxjs.Subject();\n            /** A label for the page size selector. */\n            this.itemsPerPageLabel = 'Items per page:';\n            /** A label for the button that increments the current page. */\n            this.nextPageLabel = 'Next page';\n            /** A label for the button that decrements the current page. */\n            this.previousPageLabel = 'Previous page';\n            /** A label for the button that moves to the first page. */\n            this.firstPageLabel = 'First page';\n            /** A label for the button that moves to the last page. */\n            this.lastPageLabel = 'Last page';\n            /** A label for the range of items within the current page and the length of the whole list. */\n            this.getRangeLabel = function (page, pageSize, length) {\n                if (length == 0 || pageSize == 0) {\n                    return \"0 of \" + length;\n                }\n                length = Math.max(length, 0);\n                var startIndex = page * pageSize;\n                // If the start index exceeds the list length, do not try and fix the end index to the end.\n                var endIndex = startIndex < length ?\n                    Math.min(startIndex + pageSize, length) :\n                    startIndex + pageSize;\n                return startIndex + 1 + \" \\u2013 \" + endIndex + \" of \" + length;\n            };\n        }\n        MatPaginatorIntl.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        MatPaginatorIntl.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatPaginatorIntl_Factory() { return new MatPaginatorIntl(); }, token: MatPaginatorIntl, providedIn: \"root\" });\n        return MatPaginatorIntl;\n    }());\n    /** @docs-private */\n    function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n        return parentIntl || new MatPaginatorIntl();\n    }\n    /** @docs-private */\n    var MAT_PAGINATOR_INTL_PROVIDER = {\n        // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n        provide: MatPaginatorIntl,\n        deps: [[new i0.Optional(), new i0.SkipSelf(), MatPaginatorIntl]],\n        useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** The default page size if there is no page size and there are no provided page size options. */\n    var DEFAULT_PAGE_SIZE = 50;\n    /**\n     * Change event object that is emitted when the user selects a\n     * different page size or navigates to another page.\n     */\n    var PageEvent = /** @class */ (function () {\n        function PageEvent() {\n        }\n        return PageEvent;\n    }());\n    /** Injection token that can be used to provide the default options for the paginator module. */\n    var MAT_PAGINATOR_DEFAULT_OPTIONS = new i0.InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\n    // Boilerplate for applying mixins to MatPaginator.\n    /** @docs-private */\n    var MatPaginatorBase = /** @class */ (function () {\n        function MatPaginatorBase() {\n        }\n        return MatPaginatorBase;\n    }());\n    var _MatPaginatorBase = core.mixinDisabled(core.mixinInitialized(MatPaginatorBase));\n    /**\n     * Component to provide navigation between paged information. Displays the size of the current\n     * page, user-selectable options to change that size, what items are being shown, and\n     * navigational button to go to the previous or next page.\n     */\n    var MatPaginator = /** @class */ (function (_super) {\n        tslib.__extends(MatPaginator, _super);\n        function MatPaginator(_intl, _changeDetectorRef, defaults) {\n            var _this = _super.call(this) || this;\n            _this._intl = _intl;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._pageIndex = 0;\n            _this._length = 0;\n            _this._pageSizeOptions = [];\n            _this._hidePageSize = false;\n            _this._showFirstLastButtons = false;\n            /** Event emitted when the paginator changes the page size or page index. */\n            _this.page = new i0.EventEmitter();\n            _this._intlChanges = _intl.changes.subscribe(function () { return _this._changeDetectorRef.markForCheck(); });\n            if (defaults) {\n                var pageSize = defaults.pageSize, pageSizeOptions = defaults.pageSizeOptions, hidePageSize = defaults.hidePageSize, showFirstLastButtons = defaults.showFirstLastButtons;\n                if (pageSize != null) {\n                    _this._pageSize = pageSize;\n                }\n                if (pageSizeOptions != null) {\n                    _this._pageSizeOptions = pageSizeOptions;\n                }\n                if (hidePageSize != null) {\n                    _this._hidePageSize = hidePageSize;\n                }\n                if (showFirstLastButtons != null) {\n                    _this._showFirstLastButtons = showFirstLastButtons;\n                }\n            }\n            return _this;\n        }\n        Object.defineProperty(MatPaginator.prototype, \"pageIndex\", {\n            /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n            get: function () { return this._pageIndex; },\n            set: function (value) {\n                this._pageIndex = Math.max(coercion.coerceNumberProperty(value), 0);\n                this._changeDetectorRef.markForCheck();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatPaginator.prototype, \"length\", {\n            /** The length of the total number of items that are being paginated. Defaulted to 0. */\n            get: function () { return this._length; },\n            set: function (value) {\n                this._length = coercion.coerceNumberProperty(value);\n                this._changeDetectorRef.markForCheck();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatPaginator.prototype, \"pageSize\", {\n            /** Number of items to display on a page. By default set to 50. */\n            get: function () { return this._pageSize; },\n            set: function (value) {\n                this._pageSize = Math.max(coercion.coerceNumberProperty(value), 0);\n                this._updateDisplayedPageSizeOptions();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatPaginator.prototype, \"pageSizeOptions\", {\n            /** The set of provided page size options to display to the user. */\n            get: function () { return this._pageSizeOptions; },\n            set: function (value) {\n                this._pageSizeOptions = (value || []).map(function (p) { return coercion.coerceNumberProperty(p); });\n                this._updateDisplayedPageSizeOptions();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatPaginator.prototype, \"hidePageSize\", {\n            /** Whether to hide the page size selection UI from the user. */\n            get: function () { return this._hidePageSize; },\n            set: function (value) {\n                this._hidePageSize = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatPaginator.prototype, \"showFirstLastButtons\", {\n            /** Whether to show the first/last buttons UI to the user. */\n            get: function () { return this._showFirstLastButtons; },\n            set: function (value) {\n                this._showFirstLastButtons = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatPaginator.prototype.ngOnInit = function () {\n            this._initialized = true;\n            this._updateDisplayedPageSizeOptions();\n            this._markInitialized();\n        };\n        MatPaginator.prototype.ngOnDestroy = function () {\n            this._intlChanges.unsubscribe();\n        };\n        /** Advances to the next page if it exists. */\n        MatPaginator.prototype.nextPage = function () {\n            if (!this.hasNextPage()) {\n                return;\n            }\n            var previousPageIndex = this.pageIndex;\n            this.pageIndex++;\n            this._emitPageEvent(previousPageIndex);\n        };\n        /** Move back to the previous page if it exists. */\n        MatPaginator.prototype.previousPage = function () {\n            if (!this.hasPreviousPage()) {\n                return;\n            }\n            var previousPageIndex = this.pageIndex;\n            this.pageIndex--;\n            this._emitPageEvent(previousPageIndex);\n        };\n        /** Move to the first page if not already there. */\n        MatPaginator.prototype.firstPage = function () {\n            // hasPreviousPage being false implies at the start\n            if (!this.hasPreviousPage()) {\n                return;\n            }\n            var previousPageIndex = this.pageIndex;\n            this.pageIndex = 0;\n            this._emitPageEvent(previousPageIndex);\n        };\n        /** Move to the last page if not already there. */\n        MatPaginator.prototype.lastPage = function () {\n            // hasNextPage being false implies at the end\n            if (!this.hasNextPage()) {\n                return;\n            }\n            var previousPageIndex = this.pageIndex;\n            this.pageIndex = this.getNumberOfPages() - 1;\n            this._emitPageEvent(previousPageIndex);\n        };\n        /** Whether there is a previous page. */\n        MatPaginator.prototype.hasPreviousPage = function () {\n            return this.pageIndex >= 1 && this.pageSize != 0;\n        };\n        /** Whether there is a next page. */\n        MatPaginator.prototype.hasNextPage = function () {\n            var maxPageIndex = this.getNumberOfPages() - 1;\n            return this.pageIndex < maxPageIndex && this.pageSize != 0;\n        };\n        /** Calculate the number of pages */\n        MatPaginator.prototype.getNumberOfPages = function () {\n            if (!this.pageSize) {\n                return 0;\n            }\n            return Math.ceil(this.length / this.pageSize);\n        };\n        /**\n         * Changes the page size so that the first item displayed on the page will still be\n         * displayed using the new page size.\n         *\n         * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n         * switching so that the page size is 5 will set the third page as the current page so\n         * that the 10th item will still be displayed.\n         */\n        MatPaginator.prototype._changePageSize = function (pageSize) {\n            // Current page needs to be updated to reflect the new page size. Navigate to the page\n            // containing the previous page's first item.\n            var startIndex = this.pageIndex * this.pageSize;\n            var previousPageIndex = this.pageIndex;\n            this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n            this.pageSize = pageSize;\n            this._emitPageEvent(previousPageIndex);\n        };\n        /** Checks whether the buttons for going forwards should be disabled. */\n        MatPaginator.prototype._nextButtonsDisabled = function () {\n            return this.disabled || !this.hasNextPage();\n        };\n        /** Checks whether the buttons for going backwards should be disabled. */\n        MatPaginator.prototype._previousButtonsDisabled = function () {\n            return this.disabled || !this.hasPreviousPage();\n        };\n        /**\n         * Updates the list of page size options to display to the user. Includes making sure that\n         * the page size is an option and that the list is sorted.\n         */\n        MatPaginator.prototype._updateDisplayedPageSizeOptions = function () {\n            if (!this._initialized) {\n                return;\n            }\n            // If no page size is provided, use the first page size option or the default page size.\n            if (!this.pageSize) {\n                this._pageSize = this.pageSizeOptions.length != 0 ?\n                    this.pageSizeOptions[0] :\n                    DEFAULT_PAGE_SIZE;\n            }\n            this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n            if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n                this._displayedPageSizeOptions.push(this.pageSize);\n            }\n            // Sort the numbers using a number-specific sort function.\n            this._displayedPageSizeOptions.sort(function (a, b) { return a - b; });\n            this._changeDetectorRef.markForCheck();\n        };\n        /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n        MatPaginator.prototype._emitPageEvent = function (previousPageIndex) {\n            this.page.emit({\n                previousPageIndex: previousPageIndex,\n                pageIndex: this.pageIndex,\n                pageSize: this.pageSize,\n                length: this.length\n            });\n        };\n        MatPaginator.decorators = [\n            { type: i0.Component, args: [{\n                        selector: 'mat-paginator',\n                        exportAs: 'matPaginator',\n                        template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\",\n                        inputs: ['disabled'],\n                        host: {\n                            'class': 'mat-paginator',\n                        },\n                        changeDetection: i0.ChangeDetectionStrategy.OnPush,\n                        encapsulation: i0.ViewEncapsulation.None,\n                        styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;min-height:56px;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatPaginator.ctorParameters = function () { return [\n            { type: MatPaginatorIntl },\n            { type: i0.ChangeDetectorRef },\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MAT_PAGINATOR_DEFAULT_OPTIONS,] }] }\n        ]; };\n        MatPaginator.propDecorators = {\n            color: [{ type: i0.Input }],\n            pageIndex: [{ type: i0.Input }],\n            length: [{ type: i0.Input }],\n            pageSize: [{ type: i0.Input }],\n            pageSizeOptions: [{ type: i0.Input }],\n            hidePageSize: [{ type: i0.Input }],\n            showFirstLastButtons: [{ type: i0.Input }],\n            page: [{ type: i0.Output }]\n        };\n        return MatPaginator;\n    }(_MatPaginatorBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatPaginatorModule = /** @class */ (function () {\n        function MatPaginatorModule() {\n        }\n        MatPaginatorModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            button.MatButtonModule,\n                            select.MatSelectModule,\n                            tooltip.MatTooltipModule,\n                        ],\n                        exports: [MatPaginator],\n                        declarations: [MatPaginator],\n                        providers: [MAT_PAGINATOR_INTL_PROVIDER],\n                    },] }\n        ];\n        return MatPaginatorModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_PAGINATOR_DEFAULT_OPTIONS = MAT_PAGINATOR_DEFAULT_OPTIONS;\n    exports.MAT_PAGINATOR_INTL_PROVIDER = MAT_PAGINATOR_INTL_PROVIDER;\n    exports.MAT_PAGINATOR_INTL_PROVIDER_FACTORY = MAT_PAGINATOR_INTL_PROVIDER_FACTORY;\n    exports.MatPaginator = MatPaginator;\n    exports.MatPaginatorIntl = MatPaginatorIntl;\n    exports.MatPaginatorModule = MatPaginatorModule;\n    exports.PageEvent = PageEvent;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-paginator.umd.js.map\n"]}