{"version":3,"sources":["src/material/material-form-field.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","formField","common","core","cdk","observers","tslib","bidi","coercion","rxjs","operators","animations","platform","platformBrowser","this","core$1","animations$1","nextUniqueId","MatError","id","decorators","type","Directive","args","selector","host","class","role","[attr.id]","propDecorators","Input","matFormFieldAnimations","transitionMessages","trigger","state","style","opacity","transform","transition","animate","MatFormFieldControl","getMatFormFieldPlaceholderConflictError","Error","getMatFormFieldDuplicatedHintError","align","getMatFormFieldMissingControlError","nextUniqueId$1","MatHint","[class.mat-right]","[attr.align]","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","nextUniqueId$2","_MatFormFieldMixinBase","mixinColor","MatFormFieldBase","_elementRef","MAT_FORM_FIELD_DEFAULT_OPTIONS","InjectionToken","MatFormField","_super","_changeDetectorRef","labelOptions","_dir","_defaults","_platform","_ngZone","_animationMode","_this","call","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_destroyed","Subject","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelId","_labelOptions","floatLabel","_getDefaultFloatLabelState","_animationsEnabled","appearance","_hideRequiredMarker","hideRequiredMarker","__extends","Object","defineProperty","prototype","get","_appearance","set","value","oldValue","enumerable","configurable","coerceBooleanProperty","_processHints","_floatLabel","markForCheck","_explicitFormFieldControl","_controlNonStatic","_controlStatic","_labelChildNonStatic","_labelChildStatic","getConnectedOverlayOrigin","_connectionContainerRef","ngAfterContentInit","_validateControlChild","control","_control","controlType","nativeElement","classList","add","stateChanges","pipe","startWith","subscribe","_validatePlaceholders","_syncDescribedByIds","ngControl","valueChanges","takeUntil","runOutsideAngular","onStable","asObservable","updateOutlineGap","merge","_prefixChildren","changes","_suffixChildren","_hintChildren","_errorChildren","change","requestAnimationFrame","ngAfterContentChecked","ngAfterViewInit","detectChanges","ngOnDestroy","next","complete","_shouldForward","prop","_hasPlaceholder","placeholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","length","errorState","_animateAndLockLabel","fromEvent","_label","take","_validateHints","startHint_1","endHint_1","forEach","hint","hintLabel","float","ids","startHint","find","endHint","push","map","error","setDescribedByIds","e_1","_a","labelEl","children","textContent","trim","isBrowser","_isAttachedToDOM","startWidth","gapWidth","container","startEls","querySelectorAll","gapEls","containerRect","getBoundingClientRect","width","height","containerStart","_getStartEnd","labelStart","labelWidth","_b","__values","_c","done","offsetWidth","e_1_1","return","outlineGapPadding","i","rect","right","left","element","getRootNode","rootNode","document","documentElement","contains","Component","exportAs","template","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.mat-accent]","[class.mat-warn]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","[class._mat-animation-noopable]","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","ctorParameters","ElementRef","ChangeDetectorRef","undefined","Optional","Inject","MAT_LABEL_GLOBAL_OPTIONS","Directionality","Platform","NgZone","String","ANIMATION_MODULE_TYPE","underlineRef","ViewChild","static","_inputContainerRef","ContentChild","ContentChildren","descendants","MatFormFieldModule","NgModule","declarations","imports","CommonModule","ObserversModule"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/cdk/observers'), require('tslib'), require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/material/core'), require('rxjs'), require('rxjs/operators'), require('@angular/animations'), require('@angular/cdk/platform'), require('@angular/platform-browser/animations')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/form-field', ['exports', '@angular/common', '@angular/core', '@angular/cdk/observers', 'tslib', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/material/core', 'rxjs', 'rxjs/operators', '@angular/animations', '@angular/cdk/platform', '@angular/platform-browser/animations'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.formField = {}), global.ng.common, global.ng.core, global.ng.cdk.observers, global.tslib, global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.material.core, global.rxjs, global.rxjs.operators, global.ng.animations, global.ng.cdk.platform, global.ng.platformBrowser.animations));\n}(this, (function (exports, common, core, observers, tslib, bidi, coercion, core$1, rxjs, operators, animations, platform, animations$1) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var nextUniqueId = 0;\n    /** Single error message to be shown underneath the form field. */\n    var MatError = /** @class */ (function () {\n        function MatError() {\n            this.id = \"mat-error-\" + nextUniqueId++;\n        }\n        MatError.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-error',\n                        host: {\n                            'class': 'mat-error',\n                            'role': 'alert',\n                            '[attr.id]': 'id',\n                        }\n                    },] }\n        ];\n        MatError.propDecorators = {\n            id: [{ type: core.Input }]\n        };\n        return MatError;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Animations used by the MatFormField.\n     * @docs-private\n     */\n    var matFormFieldAnimations = {\n        /** Animation that transitions the form field's error and hint messages. */\n        transitionMessages: animations.trigger('transitionMessages', [\n            // TODO(mmalerba): Use angular animations for label animation as well.\n            animations.state('enter', animations.style({ opacity: 1, transform: 'translateY(0%)' })),\n            animations.transition('void => enter', [\n                animations.style({ opacity: 0, transform: 'translateY(-100%)' }),\n                animations.animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n            ]),\n        ])\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** An interface which allows a control to work inside of a `MatFormField`. */\n    var MatFormFieldControl = /** @class */ (function () {\n        function MatFormFieldControl() {\n        }\n        MatFormFieldControl.decorators = [\n            { type: core.Directive }\n        ];\n        return MatFormFieldControl;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** @docs-private */\n    function getMatFormFieldPlaceholderConflictError() {\n        return Error('Placeholder attribute and child element were both specified.');\n    }\n    /** @docs-private */\n    function getMatFormFieldDuplicatedHintError(align) {\n        return Error(\"A hint was already declared for 'align=\\\"\" + align + \"\\\"'.\");\n    }\n    /** @docs-private */\n    function getMatFormFieldMissingControlError() {\n        return Error('mat-form-field must contain a MatFormFieldControl.');\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var nextUniqueId$1 = 0;\n    /** Hint text to be shown underneath the form field control. */\n    var MatHint = /** @class */ (function () {\n        function MatHint() {\n            /** Whether to align the hint label at the start or end of the line. */\n            this.align = 'start';\n            /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n            this.id = \"mat-hint-\" + nextUniqueId$1++;\n        }\n        MatHint.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-hint',\n                        host: {\n                            'class': 'mat-hint',\n                            '[class.mat-right]': 'align == \"end\"',\n                            '[attr.id]': 'id',\n                            // Remove align attribute to prevent it from interfering with layout.\n                            '[attr.align]': 'null',\n                        }\n                    },] }\n        ];\n        MatHint.propDecorators = {\n            align: [{ type: core.Input }],\n            id: [{ type: core.Input }]\n        };\n        return MatHint;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** The floating label for a `mat-form-field`. */\n    var MatLabel = /** @class */ (function () {\n        function MatLabel() {\n        }\n        MatLabel.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-label'\n                    },] }\n        ];\n        return MatLabel;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The placeholder text for an `MatFormField`.\n     * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n     *     placeholder.\n     * @breaking-change 8.0.0\n     */\n    var MatPlaceholder = /** @class */ (function () {\n        function MatPlaceholder() {\n        }\n        MatPlaceholder.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-placeholder'\n                    },] }\n        ];\n        return MatPlaceholder;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Prefix to be placed in front of the form field. */\n    var MatPrefix = /** @class */ (function () {\n        function MatPrefix() {\n        }\n        MatPrefix.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matPrefix]',\n                    },] }\n        ];\n        return MatPrefix;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Suffix to be placed at the end of the form field. */\n    var MatSuffix = /** @class */ (function () {\n        function MatSuffix() {\n        }\n        MatSuffix.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matSuffix]',\n                    },] }\n        ];\n        return MatSuffix;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var nextUniqueId$2 = 0;\n    var floatingLabelScale = 0.75;\n    var outlineGapPadding = 5;\n    /**\n     * Boilerplate for applying mixins to MatFormField.\n     * @docs-private\n     */\n    var MatFormFieldBase = /** @class */ (function () {\n        function MatFormFieldBase(_elementRef) {\n            this._elementRef = _elementRef;\n        }\n        return MatFormFieldBase;\n    }());\n    /**\n     * Base class to which we're applying the form field mixins.\n     * @docs-private\n     */\n    var _MatFormFieldMixinBase = core$1.mixinColor(MatFormFieldBase, 'primary');\n    /**\n     * Injection token that can be used to configure the\n     * default options for all form field within an app.\n     */\n    var MAT_FORM_FIELD_DEFAULT_OPTIONS = new core.InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n    /** Container for form controls that applies Material Design styling and behavior. */\n    var MatFormField = /** @class */ (function (_super) {\n        tslib.__extends(MatFormField, _super);\n        function MatFormField(_elementRef, _changeDetectorRef, labelOptions, _dir, _defaults, _platform, _ngZone, _animationMode) {\n            var _this = _super.call(this, _elementRef) || this;\n            _this._elementRef = _elementRef;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._dir = _dir;\n            _this._defaults = _defaults;\n            _this._platform = _platform;\n            _this._ngZone = _ngZone;\n            /**\n             * Whether the outline gap needs to be calculated\n             * immediately on the next change detection run.\n             */\n            _this._outlineGapCalculationNeededImmediately = false;\n            /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n            _this._outlineGapCalculationNeededOnStable = false;\n            _this._destroyed = new rxjs.Subject();\n            /** Override for the logic that disables the label animation in certain cases. */\n            _this._showAlwaysAnimate = false;\n            /** State of the mat-hint and mat-error animations. */\n            _this._subscriptAnimationState = '';\n            _this._hintLabel = '';\n            // Unique id for the hint label.\n            _this._hintLabelId = \"mat-hint-\" + nextUniqueId$2++;\n            // Unique id for the internal form field label.\n            _this._labelId = \"mat-form-field-label-\" + nextUniqueId$2++;\n            _this._labelOptions = labelOptions ? labelOptions : {};\n            _this.floatLabel = _this._getDefaultFloatLabelState();\n            _this._animationsEnabled = _animationMode !== 'NoopAnimations';\n            // Set the default through here so we invoke the setter on the first run.\n            _this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n            _this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n                _defaults.hideRequiredMarker : false;\n            return _this;\n        }\n        Object.defineProperty(MatFormField.prototype, \"appearance\", {\n            /** The form-field appearance style. */\n            get: function () { return this._appearance; },\n            set: function (value) {\n                var oldValue = this._appearance;\n                this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n                if (this._appearance === 'outline' && oldValue !== value) {\n                    this._outlineGapCalculationNeededOnStable = true;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatFormField.prototype, \"hideRequiredMarker\", {\n            /** Whether the required marker should be hidden. */\n            get: function () { return this._hideRequiredMarker; },\n            set: function (value) {\n                this._hideRequiredMarker = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatFormField.prototype, \"_shouldAlwaysFloat\", {\n            /** Whether the floating label should always float or not. */\n            get: function () {\n                return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatFormField.prototype, \"_canLabelFloat\", {\n            /** Whether the label can float or not. */\n            get: function () { return this.floatLabel !== 'never'; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatFormField.prototype, \"hintLabel\", {\n            /** Text for the form field hint. */\n            get: function () { return this._hintLabel; },\n            set: function (value) {\n                this._hintLabel = value;\n                this._processHints();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatFormField.prototype, \"floatLabel\", {\n            /**\n             * Whether the label should always float, never float or float as the user types.\n             *\n             * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n             * way to make the floating label emulate the behavior of a standard input placeholder. However\n             * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n             * appearances the `never` option has been disabled in favor of just using the placeholder.\n             */\n            get: function () {\n                return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n            },\n            set: function (value) {\n                if (value !== this._floatLabel) {\n                    this._floatLabel = value || this._getDefaultFloatLabelState();\n                    this._changeDetectorRef.markForCheck();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatFormField.prototype, \"_control\", {\n            get: function () {\n                // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n                //  We should clean this up once Ivy is the default renderer.\n                return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n            },\n            set: function (value) {\n                this._explicitFormFieldControl = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatFormField.prototype, \"_labelChild\", {\n            get: function () {\n                return this._labelChildNonStatic || this._labelChildStatic;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Gets an ElementRef for the element that a overlay attached to the form-field should be\n         * positioned relative to.\n         */\n        MatFormField.prototype.getConnectedOverlayOrigin = function () {\n            return this._connectionContainerRef || this._elementRef;\n        };\n        MatFormField.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._validateControlChild();\n            var control = this._control;\n            if (control.controlType) {\n                this._elementRef.nativeElement.classList.add(\"mat-form-field-type-\" + control.controlType);\n            }\n            // Subscribe to changes in the child control state in order to update the form field UI.\n            control.stateChanges.pipe(operators.startWith(null)).subscribe(function () {\n                _this._validatePlaceholders();\n                _this._syncDescribedByIds();\n                _this._changeDetectorRef.markForCheck();\n            });\n            // Run change detection if the value changes.\n            if (control.ngControl && control.ngControl.valueChanges) {\n                control.ngControl.valueChanges\n                    .pipe(operators.takeUntil(this._destroyed))\n                    .subscribe(function () { return _this._changeDetectorRef.markForCheck(); });\n            }\n            // Note that we have to run outside of the `NgZone` explicitly,\n            // in order to avoid throwing users into an infinite loop\n            // if `zone-patch-rxjs` is included.\n            this._ngZone.runOutsideAngular(function () {\n                _this._ngZone.onStable.asObservable().pipe(operators.takeUntil(_this._destroyed)).subscribe(function () {\n                    if (_this._outlineGapCalculationNeededOnStable) {\n                        _this.updateOutlineGap();\n                    }\n                });\n            });\n            // Run change detection and update the outline if the suffix or prefix changes.\n            rxjs.merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(function () {\n                _this._outlineGapCalculationNeededOnStable = true;\n                _this._changeDetectorRef.markForCheck();\n            });\n            // Re-validate when the number of hints changes.\n            this._hintChildren.changes.pipe(operators.startWith(null)).subscribe(function () {\n                _this._processHints();\n                _this._changeDetectorRef.markForCheck();\n            });\n            // Update the aria-described by when the number of errors changes.\n            this._errorChildren.changes.pipe(operators.startWith(null)).subscribe(function () {\n                _this._syncDescribedByIds();\n                _this._changeDetectorRef.markForCheck();\n            });\n            if (this._dir) {\n                this._dir.change.pipe(operators.takeUntil(this._destroyed)).subscribe(function () {\n                    if (typeof requestAnimationFrame === 'function') {\n                        _this._ngZone.runOutsideAngular(function () {\n                            requestAnimationFrame(function () { return _this.updateOutlineGap(); });\n                        });\n                    }\n                    else {\n                        _this.updateOutlineGap();\n                    }\n                });\n            }\n        };\n        MatFormField.prototype.ngAfterContentChecked = function () {\n            this._validateControlChild();\n            if (this._outlineGapCalculationNeededImmediately) {\n                this.updateOutlineGap();\n            }\n        };\n        MatFormField.prototype.ngAfterViewInit = function () {\n            // Avoid animations on load.\n            this._subscriptAnimationState = 'enter';\n            this._changeDetectorRef.detectChanges();\n        };\n        MatFormField.prototype.ngOnDestroy = function () {\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /** Determines whether a class from the NgControl should be forwarded to the host element. */\n        MatFormField.prototype._shouldForward = function (prop) {\n            var ngControl = this._control ? this._control.ngControl : null;\n            return ngControl && ngControl[prop];\n        };\n        MatFormField.prototype._hasPlaceholder = function () {\n            return !!(this._control && this._control.placeholder || this._placeholderChild);\n        };\n        MatFormField.prototype._hasLabel = function () {\n            return !!this._labelChild;\n        };\n        MatFormField.prototype._shouldLabelFloat = function () {\n            return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n        };\n        MatFormField.prototype._hideControlPlaceholder = function () {\n            // In the legacy appearance the placeholder is promoted to a label if no label is given.\n            return this.appearance === 'legacy' && !this._hasLabel() ||\n                this._hasLabel() && !this._shouldLabelFloat();\n        };\n        MatFormField.prototype._hasFloatingLabel = function () {\n            // In the legacy appearance the placeholder is promoted to a label if no label is given.\n            return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n        };\n        /** Determines whether to display hints or errors. */\n        MatFormField.prototype._getDisplayedMessages = function () {\n            return (this._errorChildren && this._errorChildren.length > 0 &&\n                this._control.errorState) ? 'error' : 'hint';\n        };\n        /** Animates the placeholder up and locks it in position. */\n        MatFormField.prototype._animateAndLockLabel = function () {\n            var _this = this;\n            if (this._hasFloatingLabel() && this._canLabelFloat) {\n                // If animations are disabled, we shouldn't go in here,\n                // because the `transitionend` will never fire.\n                if (this._animationsEnabled) {\n                    this._showAlwaysAnimate = true;\n                    rxjs.fromEvent(this._label.nativeElement, 'transitionend').pipe(operators.take(1)).subscribe(function () {\n                        _this._showAlwaysAnimate = false;\n                    });\n                }\n                this.floatLabel = 'always';\n                this._changeDetectorRef.markForCheck();\n            }\n        };\n        /**\n         * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n         * or child element with the `mat-placeholder` directive).\n         */\n        MatFormField.prototype._validatePlaceholders = function () {\n            if (this._control.placeholder && this._placeholderChild) {\n                throw getMatFormFieldPlaceholderConflictError();\n            }\n        };\n        /** Does any extra processing that is required when handling the hints. */\n        MatFormField.prototype._processHints = function () {\n            this._validateHints();\n            this._syncDescribedByIds();\n        };\n        /**\n         * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n         * attribute being considered as `align=\"start\"`.\n         */\n        MatFormField.prototype._validateHints = function () {\n            var _this = this;\n            if (this._hintChildren) {\n                var startHint_1;\n                var endHint_1;\n                this._hintChildren.forEach(function (hint) {\n                    if (hint.align === 'start') {\n                        if (startHint_1 || _this.hintLabel) {\n                            throw getMatFormFieldDuplicatedHintError('start');\n                        }\n                        startHint_1 = hint;\n                    }\n                    else if (hint.align === 'end') {\n                        if (endHint_1) {\n                            throw getMatFormFieldDuplicatedHintError('end');\n                        }\n                        endHint_1 = hint;\n                    }\n                });\n            }\n        };\n        /** Gets the default float label state. */\n        MatFormField.prototype._getDefaultFloatLabelState = function () {\n            return (this._defaults && this._defaults.floatLabel) || this._labelOptions.float || 'auto';\n        };\n        /**\n         * Sets the list of element IDs that describe the child control. This allows the control to update\n         * its `aria-describedby` attribute accordingly.\n         */\n        MatFormField.prototype._syncDescribedByIds = function () {\n            if (this._control) {\n                var ids = [];\n                if (this._getDisplayedMessages() === 'hint') {\n                    var startHint = this._hintChildren ?\n                        this._hintChildren.find(function (hint) { return hint.align === 'start'; }) : null;\n                    var endHint = this._hintChildren ?\n                        this._hintChildren.find(function (hint) { return hint.align === 'end'; }) : null;\n                    if (startHint) {\n                        ids.push(startHint.id);\n                    }\n                    else if (this._hintLabel) {\n                        ids.push(this._hintLabelId);\n                    }\n                    if (endHint) {\n                        ids.push(endHint.id);\n                    }\n                }\n                else if (this._errorChildren) {\n                    ids = this._errorChildren.map(function (error) { return error.id; });\n                }\n                this._control.setDescribedByIds(ids);\n            }\n        };\n        /** Throws an error if the form field's control is missing. */\n        MatFormField.prototype._validateControlChild = function () {\n            if (!this._control) {\n                throw getMatFormFieldMissingControlError();\n            }\n        };\n        /**\n         * Updates the width and position of the gap in the outline. Only relevant for the outline\n         * appearance.\n         */\n        MatFormField.prototype.updateOutlineGap = function () {\n            var e_1, _a;\n            var labelEl = this._label ? this._label.nativeElement : null;\n            if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n                !labelEl.textContent.trim()) {\n                return;\n            }\n            if (!this._platform.isBrowser) {\n                // getBoundingClientRect isn't available on the server.\n                return;\n            }\n            // If the element is not present in the DOM, the outline gap will need to be calculated\n            // the next time it is checked and in the DOM.\n            if (!this._isAttachedToDOM()) {\n                this._outlineGapCalculationNeededImmediately = true;\n                return;\n            }\n            var startWidth = 0;\n            var gapWidth = 0;\n            var container = this._connectionContainerRef.nativeElement;\n            var startEls = container.querySelectorAll('.mat-form-field-outline-start');\n            var gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n            if (this._label && this._label.nativeElement.children.length) {\n                var containerRect = container.getBoundingClientRect();\n                // If the container's width and height are zero, it means that the element is\n                // invisible and we can't calculate the outline gap. Mark the element as needing\n                // to be checked the next time the zone stabilizes. We can't do this immediately\n                // on the next change detection, because even if the element becomes visible,\n                // the `ClientRect` won't be reclaculated immediately. We reset the\n                // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n                if (containerRect.width === 0 && containerRect.height === 0) {\n                    this._outlineGapCalculationNeededOnStable = true;\n                    this._outlineGapCalculationNeededImmediately = false;\n                    return;\n                }\n                var containerStart = this._getStartEnd(containerRect);\n                var labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n                var labelWidth = 0;\n                try {\n                    for (var _b = tslib.__values(labelEl.children), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var child = _c.value;\n                        labelWidth += child.offsetWidth;\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n                startWidth = labelStart - containerStart - outlineGapPadding;\n                gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n            }\n            for (var i = 0; i < startEls.length; i++) {\n                startEls[i].style.width = startWidth + \"px\";\n            }\n            for (var i = 0; i < gapEls.length; i++) {\n                gapEls[i].style.width = gapWidth + \"px\";\n            }\n            this._outlineGapCalculationNeededOnStable =\n                this._outlineGapCalculationNeededImmediately = false;\n        };\n        /** Gets the start end of the rect considering the current directionality. */\n        MatFormField.prototype._getStartEnd = function (rect) {\n            return (this._dir && this._dir.value === 'rtl') ? rect.right : rect.left;\n        };\n        /** Checks whether the form field is attached to the DOM. */\n        MatFormField.prototype._isAttachedToDOM = function () {\n            var element = this._elementRef.nativeElement;\n            if (element.getRootNode) {\n                var rootNode = element.getRootNode();\n                // If the element is inside the DOM the root node will be either the document\n                // or the closest shadow root, otherwise it'll be the element itself.\n                return rootNode && rootNode !== element;\n            }\n            // Otherwise fall back to checking if it's in the document. This doesn't account for\n            // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n            return document.documentElement.contains(element);\n        };\n        MatFormField.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-form-field',\n                        exportAs: 'matFormField',\n                        template: \"<div class=\\\"mat-form-field-wrapper\\\">\\n  <div class=\\\"mat-form-field-flex\\\" #connectionContainer\\n       (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\">\\n\\n    <!-- Outline used for outline appearance. -->\\n    <ng-container *ngIf=\\\"appearance == 'outline'\\\">\\n      <div class=\\\"mat-form-field-outline\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n      <div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n    </ng-container>\\n\\n    <div class=\\\"mat-form-field-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\">\\n      <ng-content select=\\\"[matPrefix]\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-infix\\\" #inputContainer>\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"mat-form-field-label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label class=\\\"mat-form-field-label\\\"\\n               (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n               [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\"\\n               [id]=\\\"_labelId\\\"\\n               [attr.for]=\\\"_control.id\\\"\\n               [attr.aria-owns]=\\\"_control.id\\\"\\n               [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat\\\"\\n               [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat\\\"\\n               [class.mat-accent]=\\\"color == 'accent'\\\"\\n               [class.mat-warn]=\\\"color == 'warn'\\\"\\n               #label\\n               *ngIf=\\\"_hasFloatingLabel()\\\"\\n               [ngSwitch]=\\\"_hasLabel()\\\">\\n\\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\\n          <ng-container *ngSwitchCase=\\\"false\\\">\\n            <ng-content select=\\\"mat-placeholder\\\"></ng-content>\\n            <span>{{_control.placeholder}}</span>\\n          </ng-container>\\n\\n          <ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n\\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\\n          <span\\n            class=\\\"mat-placeholder-required mat-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\">\\n      <ng-content select=\\\"[matSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <!-- Underline used for legacy, standard, and box appearances. -->\\n  <div class=\\\"mat-form-field-underline\\\" #underline\\n       *ngIf=\\\"appearance != 'outline'\\\">\\n    <span class=\\\"mat-form-field-ripple\\\"\\n          [class.mat-accent]=\\\"color == 'accent'\\\"\\n          [class.mat-warn]=\\\"color == 'warn'\\\"></span>\\n  </div>\\n\\n  <div class=\\\"mat-form-field-subscript-wrapper\\\"\\n       [ngSwitch]=\\\"_getDisplayedMessages()\\\">\\n    <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <ng-content select=\\\"mat-error\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\"\\n      [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\\n      <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div>\\n      <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n      <div class=\\\"mat-form-field-hint-spacer\\\"></div>\\n      <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\",\n                        animations: [matFormFieldAnimations.transitionMessages],\n                        host: {\n                            'class': 'mat-form-field',\n                            '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n                            '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n                            '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n                            '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n                            '[class.mat-form-field-invalid]': '_control.errorState',\n                            '[class.mat-form-field-can-float]': '_canLabelFloat',\n                            '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n                            '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n                            '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n                            '[class.mat-form-field-disabled]': '_control.disabled',\n                            '[class.mat-form-field-autofilled]': '_control.autofilled',\n                            '[class.mat-focused]': '_control.focused',\n                            '[class.mat-accent]': 'color == \"accent\"',\n                            '[class.mat-warn]': 'color == \"warn\"',\n                            '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                            '[class.ng-touched]': '_shouldForward(\"touched\")',\n                            '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                            '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                            '[class.ng-valid]': '_shouldForward(\"valid\")',\n                            '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                            '[class.ng-pending]': '_shouldForward(\"pending\")',\n                            '[class._mat-animation-noopable]': '!_animationsEnabled',\n                        },\n                        inputs: ['color'],\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:none}.mat-focused .cdk-high-contrast-active select.mat-input-element::-ms-value{color:inherit}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatFormField.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.ChangeDetectorRef },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [core$1.MAT_LABEL_GLOBAL_OPTIONS,] }] },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] }] },\n            { type: platform.Platform },\n            { type: core.NgZone },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations$1.ANIMATION_MODULE_TYPE,] }] }\n        ]; };\n        MatFormField.propDecorators = {\n            appearance: [{ type: core.Input }],\n            hideRequiredMarker: [{ type: core.Input }],\n            hintLabel: [{ type: core.Input }],\n            floatLabel: [{ type: core.Input }],\n            underlineRef: [{ type: core.ViewChild, args: ['underline',] }],\n            _connectionContainerRef: [{ type: core.ViewChild, args: ['connectionContainer', { static: true },] }],\n            _inputContainerRef: [{ type: core.ViewChild, args: ['inputContainer',] }],\n            _label: [{ type: core.ViewChild, args: ['label',] }],\n            _controlNonStatic: [{ type: core.ContentChild, args: [MatFormFieldControl,] }],\n            _controlStatic: [{ type: core.ContentChild, args: [MatFormFieldControl, { static: true },] }],\n            _labelChildNonStatic: [{ type: core.ContentChild, args: [MatLabel,] }],\n            _labelChildStatic: [{ type: core.ContentChild, args: [MatLabel, { static: true },] }],\n            _placeholderChild: [{ type: core.ContentChild, args: [MatPlaceholder,] }],\n            _errorChildren: [{ type: core.ContentChildren, args: [MatError, { descendants: true },] }],\n            _hintChildren: [{ type: core.ContentChildren, args: [MatHint, { descendants: true },] }],\n            _prefixChildren: [{ type: core.ContentChildren, args: [MatPrefix, { descendants: true },] }],\n            _suffixChildren: [{ type: core.ContentChildren, args: [MatSuffix, { descendants: true },] }]\n        };\n        return MatFormField;\n    }(_MatFormFieldMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatFormFieldModule = /** @class */ (function () {\n        function MatFormFieldModule() {\n        }\n        MatFormFieldModule.decorators = [\n            { type: core.NgModule, args: [{\n                        declarations: [\n                            MatError,\n                            MatFormField,\n                            MatHint,\n                            MatLabel,\n                            MatPlaceholder,\n                            MatPrefix,\n                            MatSuffix,\n                        ],\n                        imports: [\n                            common.CommonModule,\n                            observers.ObserversModule,\n                        ],\n                        exports: [\n                            MatError,\n                            MatFormField,\n                            MatHint,\n                            MatLabel,\n                            MatPlaceholder,\n                            MatPrefix,\n                            MatSuffix,\n                        ],\n                    },] }\n        ];\n        return MatFormFieldModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_FORM_FIELD_DEFAULT_OPTIONS = MAT_FORM_FIELD_DEFAULT_OPTIONS;\n    exports.MatError = MatError;\n    exports.MatFormField = MatFormField;\n    exports.MatFormFieldControl = MatFormFieldControl;\n    exports.MatFormFieldModule = MatFormFieldModule;\n    exports.MatHint = MatHint;\n    exports.MatLabel = MatLabel;\n    exports.MatPlaceholder = MatPlaceholder;\n    exports.MatPrefix = MatPrefix;\n    exports.MatSuffix = MatSuffix;\n    exports.getMatFormFieldDuplicatedHintError = getMatFormFieldDuplicatedHintError;\n    exports.getMatFormFieldMissingControlError = getMatFormFieldMissingControlError;\n    exports.getMatFormFieldPlaceholderConflictError = getMatFormFieldPlaceholderConflictError;\n    exports.matFormFieldAnimations = matFormFieldAnimations;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-form-field.umd.js.map\n"]}