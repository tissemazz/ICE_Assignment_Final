{"version":3,"sources":["src/material/material-button-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","button","testing","tslib","cdk","coercion","this","MatButtonHarness","_super","apply","arguments","__extends","with","options","HarnessPredicate","addOption","text","harness","stringMatches","getText","prototype","click","__awaiter","__generator","_a","label","host","sent","isDisabled","disabled","_b","getAttribute","coerceBooleanProperty","focus","blur","hostSelector","join","ComponentHarness","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing'), require('@angular/cdk/coercion')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/button/testing', ['exports', 'tslib', '@angular/cdk/testing', '@angular/cdk/coercion'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.button = global.ng.material.button || {}, global.ng.material.button.testing = {}), global.tslib, global.ng.cdk.testing, global.ng.cdk.coercion));\n}(this, (function (exports, tslib, testing, coercion) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-button in tests. */\n    var MatButtonHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatButtonHarness, _super);\n        function MatButtonHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatButtonHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which button instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatButtonHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatButtonHarness, options)\n                .addOption('text', options.text, function (harness, text) { return testing.HarnessPredicate.stringMatches(harness.getText(), text); });\n        };\n        /** Clicks the button. */\n        MatButtonHarness.prototype.click = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).click()];\n                    }\n                });\n            });\n        };\n        /** Whether the button is disabled. */\n        MatButtonHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var disabled, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            disabled = (_b.sent()).getAttribute('disabled');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, disabled];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets the button's label text. */\n        MatButtonHarness.prototype.getText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Focuses the button. */\n        MatButtonHarness.prototype.focus = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the button. */\n        MatButtonHarness.prototype.blur = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        // TODO(jelbourn) use a single class, like `.mat-button-base`\n        /** The selector for the host element of a `MatButton` instance. */\n        MatButtonHarness.hostSelector = [\n            '[mat-button]',\n            '[mat-raised-button]',\n            '[mat-flat-button]',\n            '[mat-icon-button]',\n            '[mat-stroked-button]',\n            '[mat-fab]',\n            '[mat-mini-fab]',\n        ].join(',');\n        return MatButtonHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatButtonHarness = MatButtonHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-button-testing.umd.js.map\n"]}