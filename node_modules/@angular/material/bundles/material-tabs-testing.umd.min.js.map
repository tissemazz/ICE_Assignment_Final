{"version":3,"sources":["src/material/material-tabs-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","tabs","testing","tslib","cdk","this","MatTabHarness","_super","apply","arguments","__extends","with","options","HarnessPredicate","addOption","label","harness","stringMatches","getLabel","prototype","__awaiter","__generator","_a","host","sent","text","getAriaLabel","getAttribute","getAriaLabelledby","isSelected","isDisabled","select","click","getTextContent","contentId","_getContentId","documentRootLocatorFactory","locatorFor","getHarnessLoaderForContent","harnessLoaderFor","hostSelector","ComponentHarness","MatTabGroupHarness","_this","selectedTabLabel","selectedTab","_b","_c","getSelectedTab","getTabs","filter","locatorForAll","i","Promise","all","map","t","length","Error","selectTab","JSON","stringify","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/tabs/testing', ['exports', 'tslib', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.tabs = global.ng.material.tabs || {}, global.ng.material.tabs.testing = {}), global.tslib, global.ng.cdk.testing));\n}(this, (function (exports, tslib, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard Angular Material tab-label in tests. */\n    var MatTabHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatTabHarness, _super);\n        function MatTabHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatTabHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which tab instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatTabHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatTabHarness, options)\n                .addOption('label', options.label, function (harness, label) { return testing.HarnessPredicate.stringMatches(harness.getLabel(), label); });\n        };\n        /** Gets the label of the tab. */\n        MatTabHarness.prototype.getLabel = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Gets the aria-label of the tab. */\n        MatTabHarness.prototype.getAriaLabel = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-label')];\n                    }\n                });\n            });\n        };\n        /** Gets the value of the \"aria-labelledby\" attribute. */\n        MatTabHarness.prototype.getAriaLabelledby = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-labelledby')];\n                    }\n                });\n            });\n        };\n        /** Whether the tab is selected. */\n        MatTabHarness.prototype.isSelected = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var hostEl;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            hostEl = _a.sent();\n                            return [4 /*yield*/, hostEl.getAttribute('aria-selected')];\n                        case 2: return [2 /*return*/, (_a.sent()) === 'true'];\n                    }\n                });\n            });\n        };\n        /** Whether the tab is disabled. */\n        MatTabHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var hostEl;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            hostEl = _a.sent();\n                            return [4 /*yield*/, hostEl.getAttribute('aria-disabled')];\n                        case 2: return [2 /*return*/, (_a.sent()) === 'true'];\n                    }\n                });\n            });\n        };\n        /** Selects the given tab by clicking on the label. Tab cannot be selected if disabled. */\n        MatTabHarness.prototype.select = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).click()];\n                        case 2:\n                            _a.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** Gets the text content of the tab. */\n        MatTabHarness.prototype.getTextContent = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var contentId, contentEl;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._getContentId()];\n                        case 1:\n                            contentId = _a.sent();\n                            return [4 /*yield*/, this.documentRootLocatorFactory().locatorFor(\"#\" + contentId)()];\n                        case 2:\n                            contentEl = _a.sent();\n                            return [2 /*return*/, contentEl.text()];\n                    }\n                });\n            });\n        };\n        /**\n         * Gets a `HarnessLoader` that can be used to load harnesses for components within the tab's\n         * content area.\n         */\n        MatTabHarness.prototype.getHarnessLoaderForContent = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var contentId;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._getContentId()];\n                        case 1:\n                            contentId = _a.sent();\n                            return [2 /*return*/, this.documentRootLocatorFactory().harnessLoaderFor(\"#\" + contentId)];\n                    }\n                });\n            });\n        };\n        /** Gets the element id for the content of the current tab. */\n        MatTabHarness.prototype._getContentId = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var hostEl;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            hostEl = _a.sent();\n                            return [4 /*yield*/, hostEl.getAttribute('aria-controls')];\n                        case 2: \n                        // Tabs never have an empty \"aria-controls\" attribute.\n                        return [2 /*return*/, (_a.sent())];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatTab` instance. */\n        MatTabHarness.hostSelector = '.mat-tab-label';\n        return MatTabHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-tab-group in tests. */\n    var MatTabGroupHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatTabGroupHarness, _super);\n        function MatTabGroupHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatTabGroupHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which tab group instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatTabGroupHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatTabGroupHarness, options)\n                .addOption('selectedTabLabel', options.selectedTabLabel, function (harness, label) { return tslib.__awaiter(_this, void 0, void 0, function () {\n                var selectedTab, _a, _b;\n                return tslib.__generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0: return [4 /*yield*/, harness.getSelectedTab()];\n                        case 1:\n                            selectedTab = _c.sent();\n                            _b = (_a = testing.HarnessPredicate).stringMatches;\n                            return [4 /*yield*/, selectedTab.getLabel()];\n                        case 2: return [2 /*return*/, _b.apply(_a, [_c.sent(), label])];\n                    }\n                });\n            }); });\n        };\n        /**\n         * Gets the list of tabs in the tab group.\n         * @param filter Optionally filters which tabs are included.\n         */\n        MatTabGroupHarness.prototype.getTabs = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorForAll(MatTabHarness.with(filter))()];\n                });\n            });\n        };\n        /** Gets the selected tab of the tab group. */\n        MatTabGroupHarness.prototype.getSelectedTab = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var tabs, isSelected, i;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.getTabs()];\n                        case 1:\n                            tabs = _a.sent();\n                            return [4 /*yield*/, Promise.all(tabs.map(function (t) { return t.isSelected(); }))];\n                        case 2:\n                            isSelected = _a.sent();\n                            for (i = 0; i < tabs.length; i++) {\n                                if (isSelected[i]) {\n                                    return [2 /*return*/, tabs[i]];\n                                }\n                            }\n                            throw new Error('No selected tab could be found.');\n                    }\n                });\n            });\n        };\n        /**\n         * Selects a tab in this tab group.\n         * @param filter An optional filter to apply to the child tabs. The first tab matching the filter\n         *     will be selected.\n         */\n        MatTabGroupHarness.prototype.selectTab = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var tabs;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.getTabs(filter)];\n                        case 1:\n                            tabs = _a.sent();\n                            if (!tabs.length) {\n                                throw Error(\"Cannot find mat-tab matching filter \" + JSON.stringify(filter));\n                            }\n                            return [4 /*yield*/, tabs[0].select()];\n                        case 2:\n                            _a.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatTabGroup` instance. */\n        MatTabGroupHarness.hostSelector = '.mat-tab-group';\n        return MatTabGroupHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatTabGroupHarness = MatTabGroupHarness;\n    exports.MatTabHarness = MatTabHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-tabs-testing.umd.js.map\n"]}