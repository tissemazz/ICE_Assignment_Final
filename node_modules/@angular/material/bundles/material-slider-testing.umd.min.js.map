{"version":3,"sources":["src/material/material-slider-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","slider","testing","tslib","cdk","coercion","this","MatSliderHarness","_super","_this","apply","arguments","_textLabel","locatorFor","_wrapper","__extends","with","options","HarnessPredicate","prototype","getId","__awaiter","id","__generator","_a","label","host","sent","getAttribute","getDisplayValue","textLabel","_b","Promise","all","__read","hasClass","text","getPercentage","_calculatePercentage","getValue","coerceNumberProperty","getMaxValue","getMinValue","isDisabled","disabled","coerceBooleanProperty","getOrientation","setValue","value","sliderEl","wrapperEl","orientation","percentage","height","width","isVertical","relativeX","relativeY","_c","getDimensions","Math","round","click","focus","blur","min","hostSelector","ComponentHarness","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing'), require('@angular/cdk/coercion')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/slider/testing', ['exports', 'tslib', '@angular/cdk/testing', '@angular/cdk/coercion'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.slider = global.ng.material.slider || {}, global.ng.material.slider.testing = {}), global.tslib, global.ng.cdk.testing, global.ng.cdk.coercion));\n}(this, (function (exports, tslib, testing, coercion) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-slider in tests. */\n    var MatSliderHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatSliderHarness, _super);\n        function MatSliderHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._textLabel = _this.locatorFor('.mat-slider-thumb-label-text');\n            _this._wrapper = _this.locatorFor('.mat-slider-wrapper');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatSliderHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which slider instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatSliderHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatSliderHarness, options);\n        };\n        /** Gets the slider's id. */\n        MatSliderHarness.prototype.getId = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var id;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).getAttribute('id')];\n                        case 2:\n                            id = _a.sent();\n                            // In case no id has been specified, the \"id\" property always returns\n                            // an empty string. To make this method more explicit, we return null.\n                            return [2 /*return*/, id !== '' ? id : null];\n                    }\n                });\n            });\n        };\n        /**\n         * Gets the current display value of the slider. Returns a null promise if the thumb label is\n         * disabled.\n         */\n        MatSliderHarness.prototype.getDisplayValue = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a, host, textLabel;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, Promise.all([this.host(), this._textLabel()])];\n                        case 1:\n                            _a = tslib.__read.apply(void 0, [_b.sent(), 2]), host = _a[0], textLabel = _a[1];\n                            return [4 /*yield*/, host.hasClass('mat-slider-thumb-label-showing')];\n                        case 2:\n                            if (_b.sent()) {\n                                return [2 /*return*/, textLabel.text()];\n                            }\n                            return [2 /*return*/, null];\n                    }\n                });\n            });\n        };\n        /** Gets the current percentage value of the slider. */\n        MatSliderHarness.prototype.getPercentage = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _a = this._calculatePercentage;\n                            return [4 /*yield*/, this.getValue()];\n                        case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets the current value of the slider. */\n        MatSliderHarness.prototype.getValue = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _a = coercion.coerceNumberProperty;\n                            return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_b.sent()).getAttribute('aria-valuenow')];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets the maximum value of the slider. */\n        MatSliderHarness.prototype.getMaxValue = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _a = coercion.coerceNumberProperty;\n                            return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_b.sent()).getAttribute('aria-valuemax')];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets the minimum value of the slider. */\n        MatSliderHarness.prototype.getMinValue = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _a = coercion.coerceNumberProperty;\n                            return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_b.sent()).getAttribute('aria-valuemin')];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Whether the slider is disabled. */\n        MatSliderHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var disabled, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            disabled = (_b.sent()).getAttribute('aria-disabled');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, disabled];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets the orientation of the slider. */\n        MatSliderHarness.prototype.getOrientation = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: \n                        // \"aria-orientation\" will always be set to either \"horizontal\" or \"vertical\".\n                        return [2 /*return*/, (_a.sent()).getAttribute('aria-orientation')];\n                    }\n                });\n            });\n        };\n        /**\n         * Sets the value of the slider by clicking on the slider track.\n         *\n         * Note that in rare cases the value cannot be set to the exact specified value. This\n         * can happen if not every value of the slider maps to a single pixel that could be\n         * clicked using mouse interaction. In such cases consider using the keyboard to\n         * select the given value or expand the slider's size for a better user experience.\n         */\n        MatSliderHarness.prototype.setValue = function (value) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a, sliderEl, wrapperEl, orientation, percentage, _b, height, width, isVertical, relativeX, relativeY;\n                return tslib.__generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0: return [4 /*yield*/, Promise.all([this.host(), this._wrapper(), this.getOrientation()])];\n                        case 1:\n                            _a = tslib.__read.apply(void 0, [_c.sent(), 3]), sliderEl = _a[0], wrapperEl = _a[1], orientation = _a[2];\n                            return [4 /*yield*/, this._calculatePercentage(value)];\n                        case 2:\n                            percentage = _c.sent();\n                            return [4 /*yield*/, wrapperEl.getDimensions()];\n                        case 3:\n                            _b = _c.sent(), height = _b.height, width = _b.width;\n                            isVertical = orientation === 'vertical';\n                            return [4 /*yield*/, sliderEl.hasClass('mat-slider-invert-mouse-coords')];\n                        case 4:\n                            // In case the slider is inverted in LTR mode or not inverted in RTL mode,\n                            // we need to invert the percentage so that the proper value is set.\n                            if (_c.sent()) {\n                                percentage = 1 - percentage;\n                            }\n                            relativeX = isVertical ? 0 : Math.round(width * percentage);\n                            relativeY = isVertical ? Math.round(height * percentage) : 0;\n                            return [4 /*yield*/, wrapperEl.click(relativeX, relativeY)];\n                        case 5:\n                            _c.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** Focuses the slider. */\n        MatSliderHarness.prototype.focus = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the slider. */\n        MatSliderHarness.prototype.blur = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /** Calculates the percentage of the given value. */\n        MatSliderHarness.prototype._calculatePercentage = function (value) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a, min, max;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, Promise.all([this.getMinValue(), this.getMaxValue()])];\n                        case 1:\n                            _a = tslib.__read.apply(void 0, [_b.sent(), 2]), min = _a[0], max = _a[1];\n                            return [2 /*return*/, (value - min) / (max - min)];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatSlider` instance. */\n        MatSliderHarness.hostSelector = 'mat-slider';\n        return MatSliderHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatSliderHarness = MatSliderHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-slider-testing.umd.js.map\n"]}