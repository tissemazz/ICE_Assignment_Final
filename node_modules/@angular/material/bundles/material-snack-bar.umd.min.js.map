{"version":3,"sources":["src/material/material-snack-bar.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","snackBar","cdk","overlay","portal","common","core","button","rxjs","tslib","operators","animations","a11y","layout","this","i1","i0","i2","i3","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_this","_afterDismissed","Subject","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","prototype","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","duration","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","data","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","Object","defineProperty","get","enumerable","configurable","decorators","type","Component","args","selector","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","styles","ctorParameters","undefined","Inject","matSnackBarAnimations","snackBarState","trigger","state","style","transform","opacity","transition","animate","MatSnackBarContainer","_super","_ngZone","_elementRef","_changeDetectorRef","snackBarConfig","call","_destroyed","_animationState","attachDomPortal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_role","__extends","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","toState","fromState","_completeExit","onEnter_1","run","enter","detectChanges","ngOnDestroy","onMicrotaskEmpty","pipe","take","element","nativeElement","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","Error","Default","[attr.role]","[@state]","(@state.done)","NgZone","ElementRef","ChangeDetectorRef","propDecorators","ViewChild","CdkPortalOutlet","static","BasePortalOutlet","MatSnackBarModule","NgModule","imports","OverlayModule","PortalModule","CommonModule","MatButtonModule","MatCommonModule","declarations","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","set","value","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","__assign","_attachSnackBarContainer","overlayRef","injector","PortalInjector","viewContainerRef","WeakMap","containerPortal","ComponentPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","TemplateRef","portal$1","TemplatePortal","$implicit","_createInjector","contentRef","observe","Breakpoints","HandsetPortrait","takeUntil","detachments","overlayElement","matches","remove","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","direction","positionStrategy","position","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","Optional","SkipSelf","ɵprov","ɵɵdefineInjectable","MatSnackBar_Factory","ɵɵinject","INJECTOR","token"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,wBAAyBA,QAAQ,uBAAwBA,QAAQ,mBAAoBA,QAAQ,iBAAkBA,QAAQ,0BAA2BA,QAAQ,4BAA6BA,QAAQ,QAASA,QAAQ,SAAUA,QAAQ,kBAAmBA,QAAQ,uBAAwBA,QAAQ,qBAAsBA,QAAQ,wBACjY,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,8BAA+B,CAAC,UAAW,uBAAwB,sBAAuB,kBAAmB,gBAAiB,yBAA0B,2BAA4B,OAAQ,QAAS,iBAAkB,sBAAuB,oBAAqB,uBAAwBJ,GACrTA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,SAAWT,EAAOQ,GAAGC,UAAY,GAAIT,EAAOQ,GAAGC,SAASC,SAAW,IAAKV,EAAOQ,GAAGG,IAAIC,QAASZ,EAAOQ,GAAGG,IAAIE,OAAQb,EAAOQ,GAAGM,OAAQd,EAAOQ,GAAGO,KAAMf,EAAOQ,GAAGC,SAASM,KAAMf,EAAOQ,GAAGC,SAASO,OAAQhB,EAAOiB,KAAMjB,EAAOkB,MAAOlB,EAAOiB,KAAKE,UAAWnB,EAAOQ,GAAGY,WAAYpB,EAAOQ,GAAGG,IAAIU,KAAMrB,EAAOQ,GAAGG,IAAIW,QAHnY,CAIEC,MAAM,SAAWrB,EAASsB,EAAIX,EAAQC,EAAQW,EAAIV,EAAMC,EAAQC,EAAMC,EAAOC,EAAWC,EAAYM,EAAIC,GAAM;;;;;;;OAU5G,IAAIC,EAAcC,KAAKC,IAAI,EAAG,IAAM,EAIhCC,EAAgC,WAChC,SAASA,EAAeC,EAAmBC,GACvC,IAAIC,EAAQX,KACZA,KAAKU,YAAcA,EAEnBV,KAAKY,gBAAkB,IAAIlB,EAAKmB,QAEhCb,KAAKc,aAAe,IAAIpB,EAAKmB,QAE7Bb,KAAKe,UAAY,IAAIrB,EAAKmB,QAE1Bb,KAAKgB,oBAAqB,EAC1BhB,KAAKS,kBAAoBA,EAEzBT,KAAKiB,WAAWC,WAAU,WAAc,OAAOP,EAAMQ,aACrDV,EAAkBW,QAAQF,WAAU,WAAc,OAAOP,EAAMU,oBA6DnE,OA1DAb,EAAec,UAAUH,QAAU,WAC1BnB,KAAKY,gBAAgBW,QACtBvB,KAAKS,kBAAkBe,OAE3BC,aAAazB,KAAK0B,qBAGtBlB,EAAec,UAAUK,kBAAoB,WACpC3B,KAAKe,UAAUQ,SAChBvB,KAAKgB,oBAAqB,EAC1BhB,KAAKe,UAAUa,OACf5B,KAAKe,UAAUc,aAQvBrB,EAAec,UAAUQ,gBAAkB,WACvC9B,KAAK2B,qBAGTnB,EAAec,UAAUS,cAAgB,SAAUC,GAC/C,IAAIrB,EAAQX,KAGZA,KAAK0B,mBAAqBO,YAAW,WAAc,OAAOtB,EAAMQ,YAAcb,KAAK4B,IAAIF,EAAU3B,KAGrGG,EAAec,UAAUa,MAAQ,WACxBnC,KAAKc,aAAaS,SACnBvB,KAAKc,aAAac,OAClB5B,KAAKc,aAAae,aAI1BrB,EAAec,UAAUD,eAAiB,WACtCrB,KAAKU,YAAY0B,UACZpC,KAAKe,UAAUQ,QAChBvB,KAAKe,UAAUc,WAEnB7B,KAAKY,gBAAgBgB,KAAK,CAAES,kBAAmBrC,KAAKgB,qBACpDhB,KAAKY,gBAAgBiB,WACrB7B,KAAKgB,oBAAqB,GAG9BR,EAAec,UAAUgB,eAAiB,WACtC,OAAOtC,KAAKY,gBAAgB2B,gBAGhC/B,EAAec,UAAUkB,YAAc,WACnC,OAAOxC,KAAKS,kBAAkBgC,UAGlCjC,EAAec,UAAUL,SAAW,WAChC,OAAOjB,KAAKe,UAAUwB,gBAEnB/B,EA5EwB,GAuF/BkC,EAAqB,IAAIxC,EAAGyC,eAAe,mBAI3CC,EACA,SAASA,IAEL5C,KAAK6C,WAAa,YAKlB7C,KAAK8C,oBAAsB,GAE3B9C,KAAKgC,SAAW,EAEhBhC,KAAK+C,KAAO,KAEZ/C,KAAKgD,mBAAqB,SAE1BhD,KAAKiD,iBAAmB,UAgB5BC,EAAgC,WAChC,SAASA,EAAeC,EAAaJ,GACjC/C,KAAKmD,YAAcA,EACnBnD,KAAK+C,KAAOA,EA+BhB,OA5BAG,EAAe5B,UAAU8B,OAAS,WAC9BpD,KAAKmD,YAAYxB,qBAErB0B,OAAOC,eAAeJ,EAAe5B,UAAW,YAAa,CAEzDiC,IAAK,WACD,QAASvD,KAAK+C,KAAKK,QAEvBI,YAAY,EACZC,cAAc,IAElBP,EAAeQ,WAAa,CACxB,CAAEC,KAAMzD,EAAG0D,UAAWC,KAAM,CAAC,CACjBC,SAAU,mBACVC,SAAU,yKACVC,cAAe9D,EAAG+D,kBAAkBC,KACpCC,gBAAiBjE,EAAGkE,wBAAwBC,OAC5CC,KAAM,CACFC,MAAS,uBAEbC,OAAQ,CAAC,mUAIzBtB,EAAeuB,eAAiB,WAAc,MAAO,CACjD,CAAEd,KAAMnD,GACR,CAAEmD,UAAMe,EAAWhB,WAAY,CAAC,CAAEC,KAAMzD,EAAGyE,OAAQd,KAAM,CAACnB,QAEvDQ,EAlCwB,GAgD/B0B,EAAwB,CAExBC,cAAehF,EAAWiF,QAAQ,QAAS,CACvCjF,EAAWkF,MAAM,eAAgBlF,EAAWmF,MAAM,CAC9CC,UAAW,aACXC,QAAS,KAEbrF,EAAWkF,MAAM,UAAWlF,EAAWmF,MAAM,CACzCC,UAAW,WACXC,QAAS,KAEbrF,EAAWsF,WAAW,eAAgBtF,EAAWuF,QAAQ,qCACzDvF,EAAWsF,WAAW,yBAA0BtF,EAAWuF,QAAQ,oCAAqCvF,EAAWmF,MAAM,CACrHE,QAAS,SAgBjBG,EAAsC,SAAUC,GAEhD,SAASD,EAAqBE,EAASC,EAAaC,EAEpDC,GACI,IAAI/E,EAAQ2E,EAAOK,KAAK3F,OAASA,KAkCjC,OAjCAW,EAAM4E,QAAUA,EAChB5E,EAAM6E,YAAcA,EACpB7E,EAAM8E,mBAAqBA,EAC3B9E,EAAM+E,eAAiBA,EAEvB/E,EAAMiF,YAAa,EAEnBjF,EAAMS,QAAU,IAAI1B,EAAKmB,QAEzBF,EAAM8B,SAAW,IAAI/C,EAAKmB,QAE1BF,EAAMkF,gBAAkB,OAMxBlF,EAAMmF,gBAAkB,SAAUxG,GAG9B,OAFAqB,EAAMoF,qBACNpF,EAAMqF,wBACCrF,EAAMsF,cAAcH,gBAAgBxG,IAQ3CqB,EAAMuF,MAJwB,cAA9BR,EAAe7C,YAA+B6C,EAAe5C,oBAG1B,QAA9B4C,EAAe7C,WACN,KAGA,SANA,QAQXlC,EAqHX,OA3JAhB,EAAMwG,UAAUd,EAAsBC,GAyCtCD,EAAqB/D,UAAU8E,sBAAwB,SAAU9G,GAG7D,OAFAU,KAAK+F,qBACL/F,KAAKgG,wBACEhG,KAAKiG,cAAcG,sBAAsB9G,IAGpD+F,EAAqB/D,UAAU+E,qBAAuB,SAAU/G,GAG5D,OAFAU,KAAK+F,qBACL/F,KAAKgG,wBACEhG,KAAKiG,cAAcI,qBAAqB/G,IAGnD+F,EAAqB/D,UAAUgF,eAAiB,SAAUC,GACtD,IAAiCC,EAAUD,EAAMC,QAIjD,IAHiB,SAAZA,GAAoC,SADzBD,EAAME,WAC0C,WAAZD,IAChDxG,KAAK0G,gBAEO,YAAZF,EAAuB,CAGvB,IAAIG,EAAY3G,KAAKyC,SACrBzC,KAAKuF,QAAQqB,KAAI,WACbD,EAAU/E,OACV+E,EAAU9E,gBAKtBwD,EAAqB/D,UAAUuF,MAAQ,WAC9B7G,KAAK4F,aACN5F,KAAK6F,gBAAkB,UACvB7F,KAAKyF,mBAAmBqB,kBAIhCzB,EAAqB/D,UAAUE,KAAO,WAKlC,OADAxB,KAAK6F,gBAAkB,SAChB7F,KAAKoB,SAGhBiE,EAAqB/D,UAAUyF,YAAc,WACzC/G,KAAK4F,YAAa,EAClB5F,KAAK0G,iBAMTrB,EAAqB/D,UAAUoF,cAAgB,WAC3C,IAAI/F,EAAQX,KACZA,KAAKuF,QAAQyB,iBAAiBzE,eAAe0E,KAAKrH,EAAUsH,KAAK,IAAIhG,WAAU,WAC3EP,EAAMS,QAAQQ,OACdjB,EAAMS,QAAQS,eAItBwD,EAAqB/D,UAAU0E,sBAAwB,WACnD,IAAImB,EAAUnH,KAAKwF,YAAY4B,cAC3BC,EAAerH,KAAK0F,eAAe4B,WACnCD,IACIE,MAAMC,QAAQH,GAEdA,EAAaI,SAAQ,SAAUC,GAAY,OAAOP,EAAQQ,UAAUC,IAAIF,MAGxEP,EAAQQ,UAAUC,IAAIP,IAGiB,WAA3CrH,KAAK0F,eAAe1C,oBACpBmE,EAAQQ,UAAUC,IAAI,wBAEmB,QAAzC5H,KAAK0F,eAAezC,kBACpBkE,EAAQQ,UAAUC,IAAI,sBAI9BvC,EAAqB/D,UAAUyE,mBAAqB,WAChD,GAAI/F,KAAKiG,cAAc4B,cACnB,MAAMC,MAAM,6EAGpBzC,EAAqB3B,WAAa,CAC9B,CAAEC,KAAMzD,EAAG0D,UAAWC,KAAM,CAAC,CACjBC,SAAU,sBACVC,SAAU,gDAKVI,gBAAiBjE,EAAGkE,wBAAwB2D,QAC5C/D,cAAe9D,EAAG+D,kBAAkBC,KACpCrE,WAAY,CAAC+E,EAAsBC,eACnCP,KAAM,CACF0D,cAAe,QACfzD,MAAS,0BACT0D,WAAY,kBACZC,gBAAiB,0BAErB1D,OAAQ,CAAC,qYAIzBa,EAAqBZ,eAAiB,WAAc,MAAO,CACvD,CAAEd,KAAMzD,EAAGiI,QACX,CAAExE,KAAMzD,EAAGkI,YACX,CAAEzE,KAAMzD,EAAGmI,mBACX,CAAE1E,KAAMf,KAEZyC,EAAqBiD,eAAiB,CAClCrC,cAAe,CAAC,CAAEtC,KAAMzD,EAAGqI,UAAW1E,KAAM,CAACvE,EAAOkJ,gBAAiB,CAAEC,QAAQ,OAE5EpD,EA5J8B,CA6JvC/F,EAAOoJ,kBASLC,EAAmC,WACnC,SAASA,KAgBT,OAdAA,EAAkBjF,WAAa,CAC3B,CAAEC,KAAMzD,EAAG0I,SAAU/E,KAAM,CAAC,CAChBgF,QAAS,CACL5I,EAAG6I,cACHxJ,EAAOyJ,aACPxJ,EAAOyJ,aACPvJ,EAAOwJ,gBACPzJ,EAAK0J,iBAETvK,QAAS,CAAC0G,EAAsB7F,EAAK0J,iBACrCC,aAAc,CAAC9D,EAAsBnC,GACrCkG,gBAAiB,CAAC/D,EAAsBnC,OAGjDyF,EAjB2B,GAqBlCU,EAAgC,IAAInJ,EAAGyC,eAAe,gCAAiC,CACvF2G,WAAY,OACZ5K,QAAS6K,IAGb,SAASA,IACL,OAAO,IAAI3G,EAKf,IAAI4G,EAA6B,WAC7B,SAASA,EAAYC,EAAUC,EAAOC,EAAWC,EAAqBC,EAAiBC,GACnF9J,KAAKyJ,SAAWA,EAChBzJ,KAAK0J,MAAQA,EACb1J,KAAK2J,UAAYA,EACjB3J,KAAK4J,oBAAsBA,EAC3B5J,KAAK6J,gBAAkBA,EACvB7J,KAAK8J,eAAiBA,EAMtB9J,KAAK+J,wBAA0B,KAgNnC,OA9MA1G,OAAOC,eAAekG,EAAYlI,UAAW,qBAAsB,CAE/DiC,IAAK,WACD,IAAIyG,EAAShK,KAAK6J,gBAClB,OAAOG,EAASA,EAAOC,mBAAqBjK,KAAK+J,yBAErDG,IAAK,SAAUC,GACPnK,KAAK6J,gBACL7J,KAAK6J,gBAAgBI,mBAAqBE,EAG1CnK,KAAK+J,wBAA0BI,GAGvC3G,YAAY,EACZC,cAAc,IASlB+F,EAAYlI,UAAU8I,kBAAoB,SAAUC,EAAWC,GAC3D,OAAOtK,KAAKuK,QAAQF,EAAWC,IASnCd,EAAYlI,UAAUkJ,iBAAmB,SAAUzG,EAAUuG,GACzD,OAAOtK,KAAKuK,QAAQxG,EAAUuG,IAQlCd,EAAYlI,UAAUmJ,KAAO,SAAUC,EAAStH,EAAQkH,QACrC,IAAXlH,IAAqBA,EAAS,IAClC,IAAIuH,EAAUhL,EAAMiL,SAASjL,EAAMiL,SAAS,GAAI5K,KAAK8J,gBAAiBQ,GAOtE,OAJAK,EAAQ5H,KAAO,CAAE2H,QAASA,EAAStH,OAAQA,GACtCuH,EAAQ7H,sBACT6H,EAAQ7H,oBAAsB4H,GAE3B1K,KAAKoK,kBAAkBlH,EAAgByH,IAKlDnB,EAAYlI,UAAUH,QAAU,WACxBnB,KAAKiK,oBACLjK,KAAKiK,mBAAmB9I,WAGhCqI,EAAYlI,UAAUyF,YAAc,WAE5B/G,KAAK+J,yBACL/J,KAAK+J,wBAAwB5I,WAMrCqI,EAAYlI,UAAUuJ,yBAA2B,SAAUC,EAAYR,GACnE,IACIS,EAAW,IAAIzL,EAAO0L,eADPV,GAAUA,EAAOW,kBAAoBX,EAAOW,iBAAiBF,UACvB/K,KAAK2J,UAAW,IAAIuB,QAAQ,CACjF,CAACtI,EAAmB0H,MAEpBa,EAAkB,IAAI7L,EAAO8L,gBAAgB/F,EAAsBiF,EAAOW,iBAAkBF,GAC5FM,EAAeP,EAAWQ,OAAOH,GAErC,OADAE,EAAaE,SAAS7F,eAAiB4E,EAChCe,EAAaE,UAKxB/B,EAAYlI,UAAUiJ,QAAU,SAAUiB,EAASC,GAC/C,IAAInB,EAAS3K,EAAMiL,SAASjL,EAAMiL,SAASjL,EAAMiL,SAAS,GAAI,IAAIhI,GAAsB5C,KAAK8J,gBAAiB2B,GAC1GX,EAAa9K,KAAK0L,eAAepB,GACjCqB,EAAY3L,KAAK6K,yBAAyBC,EAAYR,GACtDnH,EAAc,IAAI3C,EAAemL,EAAWb,GAChD,GAAIU,aAAmBtL,EAAG0L,YAAa,CACnC,IAAIC,EAAW,IAAIvM,EAAOwM,eAAeN,EAAS,KAAM,CACpDO,UAAWzB,EAAOvH,KAClBI,YAAaA,IAEjBA,EAAYoI,SAAWI,EAAUtF,qBAAqBwF,OAErD,CACD,IAAId,EAAW/K,KAAKgM,gBAAgB1B,EAAQnH,GAExC8I,GADAJ,EAAW,IAAIvM,EAAO8L,gBAAgBI,OAAS9G,EAAWqG,GAC7CY,EAAUvF,sBAAsByF,IAEjD1I,EAAYoI,SAAWU,EAAWV,SAYtC,OAPAvL,KAAK4J,oBAAoBsC,QAAQ9L,EAAG+L,YAAYC,iBAAiBnF,KAAKrH,EAAUyM,UAAUvB,EAAWwB,gBAAgBpL,WAAU,SAAU6D,GACrI,IAAI4C,EAAYmD,EAAWyB,eAAe5E,UAE1C5C,EAAMyH,QAAU7E,EAAUC,IADV,yBAC2BD,EAAU8E,OADrC,4BAGpBzM,KAAK0M,iBAAiBvJ,EAAamH,GACnCtK,KAAKiK,mBAAqB9G,EACnBnD,KAAKiK,oBAGhBT,EAAYlI,UAAUoL,iBAAmB,SAAUvJ,EAAamH,GAC5D,IAAI3J,EAAQX,KAEZmD,EAAYb,iBAAiBpB,WAAU,WAE/BP,EAAMsJ,oBAAsB9G,IAC5BxC,EAAMsJ,mBAAqB,MAE3BK,EAAOxH,qBACPnC,EAAM+I,MAAMiD,WAGhB3M,KAAKiK,oBAGLjK,KAAKiK,mBAAmB3H,iBAAiBpB,WAAU,WAC/CiC,EAAY1C,kBAAkBoG,WAElC7G,KAAKiK,mBAAmB9I,WAIxBgC,EAAY1C,kBAAkBoG,QAG9ByD,EAAOtI,UAAYsI,EAAOtI,SAAW,GACrCmB,EAAYX,cAActB,WAAU,WAAc,OAAOiC,EAAYpB,cAAcuI,EAAOtI,aAE1FsI,EAAOxH,qBACP9C,KAAK0J,MAAMkD,SAAStC,EAAOxH,oBAAqBwH,EAAOzH,aAO/D2G,EAAYlI,UAAUoK,eAAiB,SAAUpB,GAC7C,IAAIuC,EAAgB,IAAI5M,EAAG6M,cAC3BD,EAAcE,UAAYzC,EAAOyC,UACjC,IAAIC,EAAmBhN,KAAKyJ,SAASwD,WAAWxO,SAE5CyO,EAA6B,QAArB5C,EAAOyC,UACfI,EAAwC,SAA9B7C,EAAOtH,oBACc,UAA9BsH,EAAOtH,qBAAmCkK,GACZ,QAA9B5C,EAAOtH,oBAAgCkK,EACxCE,GAAWD,GAAwC,WAA9B7C,EAAOtH,mBAkBhC,OAjBImK,EACAH,EAAiBK,KAAK,KAEjBD,EACLJ,EAAiBM,MAAM,KAGvBN,EAAiBO,qBAGW,QAA5BjD,EAAOrH,iBACP+J,EAAiBQ,IAAI,KAGrBR,EAAiBS,OAAO,KAE5BZ,EAAcG,iBAAmBA,EAC1BhN,KAAKyJ,SAASiE,OAAOb,IAOhCrD,EAAYlI,UAAU0K,gBAAkB,SAAU1B,EAAQnH,GAEtD,OAAO,IAAI7D,EAAO0L,eADCV,GAAUA,EAAOW,kBAAoBX,EAAOW,iBAAiBF,UAC/B/K,KAAK2J,UAAW,IAAIuB,QAAQ,CACzE,CAAC1K,EAAgB2C,GACjB,CAACT,EAAoB4H,EAAOvH,UAGpCyG,EAAY9F,WAAa,CACrB,CAAEC,KAAMzD,EAAGyN,WAAY9J,KAAM,CAAC,CAAEyF,WAAYX,MAGhDa,EAAY/E,eAAiB,WAAc,MAAO,CAC9C,CAAEd,KAAM1D,EAAG2N,SACX,CAAEjK,KAAMxD,EAAG0N,eACX,CAAElK,KAAMzD,EAAG4N,UACX,CAAEnK,KAAMvD,EAAG2N,oBACX,CAAEpK,KAAM6F,EAAa9F,WAAY,CAAC,CAAEC,KAAMzD,EAAG8N,UAAY,CAAErK,KAAMzD,EAAG+N,YACpE,CAAEtK,KAAMf,EAAmBc,WAAY,CAAC,CAAEC,KAAMzD,EAAGyE,OAAQd,KAAM,CAACwF,QAEtEG,EAAY0E,MAAQhO,EAAGiO,mBAAmB,CAAEzP,QAAS,SAAS0P,IAAwB,OAAO,IAAI5E,EAAYtJ,EAAGmO,SAASpO,EAAG2N,SAAU1N,EAAGmO,SAASlO,EAAG0N,eAAgB3N,EAAGmO,SAASnO,EAAGoO,UAAWpO,EAAGmO,SAASjO,EAAG2N,oBAAqB7N,EAAGmO,SAAS7E,EAAa,IAAKtJ,EAAGmO,SAAShF,KAAoCkF,MAAO/E,EAAaF,WAAYX,IAC1Ua,EA7NqB;;;;;;;OA4OhC7K,EAAQ+D,mBAAqBA,EAC7B/D,EAAQ0K,8BAAgCA,EACxC1K,EAAQ4K,sCAAwCA,EAChD5K,EAAQ6K,YAAcA,EACtB7K,EAAQiE,kBAAoBA,EAC5BjE,EAAQ0G,qBAAuBA,EAC/B1G,EAAQgK,kBAAoBA,EAC5BhK,EAAQ6B,eAAiBA,EACzB7B,EAAQuE,eAAiBA,EACzBvE,EAAQiG,sBAAwBA,EAEhCvB,OAAOC,eAAe3E,EAAS,aAAc,CAAEwL,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/common'), require('@angular/core'), require('@angular/material/core'), require('@angular/material/button'), require('rxjs'), require('tslib'), require('rxjs/operators'), require('@angular/animations'), require('@angular/cdk/a11y'), require('@angular/cdk/layout')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/snack-bar', ['exports', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/common', '@angular/core', '@angular/material/core', '@angular/material/button', 'rxjs', 'tslib', 'rxjs/operators', '@angular/animations', '@angular/cdk/a11y', '@angular/cdk/layout'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.snackBar = {}), global.ng.cdk.overlay, global.ng.cdk.portal, global.ng.common, global.ng.core, global.ng.material.core, global.ng.material.button, global.rxjs, global.tslib, global.rxjs.operators, global.ng.animations, global.ng.cdk.a11y, global.ng.cdk.layout));\n}(this, (function (exports, i1, portal, common, i0, core, button, rxjs, tslib, operators, animations, i2, i3) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Maximum amount of milliseconds that can be passed into setTimeout. */\n    var MAX_TIMEOUT = Math.pow(2, 31) - 1;\n    /**\n     * Reference to a snack bar dispatched from the snack bar service.\n     */\n    var MatSnackBarRef = /** @class */ (function () {\n        function MatSnackBarRef(containerInstance, _overlayRef) {\n            var _this = this;\n            this._overlayRef = _overlayRef;\n            /** Subject for notifying the user that the snack bar has been dismissed. */\n            this._afterDismissed = new rxjs.Subject();\n            /** Subject for notifying the user that the snack bar has opened and appeared. */\n            this._afterOpened = new rxjs.Subject();\n            /** Subject for notifying the user that the snack bar action was called. */\n            this._onAction = new rxjs.Subject();\n            /** Whether the snack bar was dismissed using the action button. */\n            this._dismissedByAction = false;\n            this.containerInstance = containerInstance;\n            // Dismiss snackbar on action.\n            this.onAction().subscribe(function () { return _this.dismiss(); });\n            containerInstance._onExit.subscribe(function () { return _this._finishDismiss(); });\n        }\n        /** Dismisses the snack bar. */\n        MatSnackBarRef.prototype.dismiss = function () {\n            if (!this._afterDismissed.closed) {\n                this.containerInstance.exit();\n            }\n            clearTimeout(this._durationTimeoutId);\n        };\n        /** Marks the snackbar action clicked. */\n        MatSnackBarRef.prototype.dismissWithAction = function () {\n            if (!this._onAction.closed) {\n                this._dismissedByAction = true;\n                this._onAction.next();\n                this._onAction.complete();\n            }\n        };\n        /**\n         * Marks the snackbar action clicked.\n         * @deprecated Use `dismissWithAction` instead.\n         * @breaking-change 8.0.0\n         */\n        MatSnackBarRef.prototype.closeWithAction = function () {\n            this.dismissWithAction();\n        };\n        /** Dismisses the snack bar after some duration */\n        MatSnackBarRef.prototype._dismissAfter = function (duration) {\n            var _this = this;\n            // Note that we need to cap the duration to the maximum value for setTimeout, because\n            // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n            this._durationTimeoutId = setTimeout(function () { return _this.dismiss(); }, Math.min(duration, MAX_TIMEOUT));\n        };\n        /** Marks the snackbar as opened */\n        MatSnackBarRef.prototype._open = function () {\n            if (!this._afterOpened.closed) {\n                this._afterOpened.next();\n                this._afterOpened.complete();\n            }\n        };\n        /** Cleans up the DOM after closing. */\n        MatSnackBarRef.prototype._finishDismiss = function () {\n            this._overlayRef.dispose();\n            if (!this._onAction.closed) {\n                this._onAction.complete();\n            }\n            this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n            this._afterDismissed.complete();\n            this._dismissedByAction = false;\n        };\n        /** Gets an observable that is notified when the snack bar is finished closing. */\n        MatSnackBarRef.prototype.afterDismissed = function () {\n            return this._afterDismissed.asObservable();\n        };\n        /** Gets an observable that is notified when the snack bar has opened and appeared. */\n        MatSnackBarRef.prototype.afterOpened = function () {\n            return this.containerInstance._onEnter;\n        };\n        /** Gets an observable that is notified when the snack bar action is called. */\n        MatSnackBarRef.prototype.onAction = function () {\n            return this._onAction.asObservable();\n        };\n        return MatSnackBarRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token that can be used to access the data that was passed in to a snack bar. */\n    var MAT_SNACK_BAR_DATA = new i0.InjectionToken('MatSnackBarData');\n    /**\n     * Configuration used when opening a snack-bar.\n     */\n    var MatSnackBarConfig = /** @class */ (function () {\n        function MatSnackBarConfig() {\n            /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n            this.politeness = 'assertive';\n            /**\n             * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n             * component or template, the announcement message will default to the specified message.\n             */\n            this.announcementMessage = '';\n            /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n            this.duration = 0;\n            /** Data being injected into the child component. */\n            this.data = null;\n            /** The horizontal position to place the snack bar. */\n            this.horizontalPosition = 'center';\n            /** The vertical position to place the snack bar. */\n            this.verticalPosition = 'bottom';\n        }\n        return MatSnackBarConfig;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A component used to open as the default snack bar, matching material spec.\n     * This should only be used internally by the snack bar service.\n     */\n    var SimpleSnackBar = /** @class */ (function () {\n        function SimpleSnackBar(snackBarRef, data) {\n            this.snackBarRef = snackBarRef;\n            this.data = data;\n        }\n        /** Performs the action on the snack bar. */\n        SimpleSnackBar.prototype.action = function () {\n            this.snackBarRef.dismissWithAction();\n        };\n        Object.defineProperty(SimpleSnackBar.prototype, \"hasAction\", {\n            /** If the action button should be shown. */\n            get: function () {\n                return !!this.data.action;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        SimpleSnackBar.decorators = [\n            { type: i0.Component, args: [{\n                        selector: 'simple-snack-bar',\n                        template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                        encapsulation: i0.ViewEncapsulation.None,\n                        changeDetection: i0.ChangeDetectionStrategy.OnPush,\n                        host: {\n                            'class': 'mat-simple-snackbar',\n                        },\n                        styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        SimpleSnackBar.ctorParameters = function () { return [\n            { type: MatSnackBarRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n        ]; };\n        return SimpleSnackBar;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Animations used by the Material snack bar.\n     * @docs-private\n     */\n    var matSnackBarAnimations = {\n        /** Animation that shows and hides a snack bar. */\n        snackBarState: animations.trigger('state', [\n            animations.state('void, hidden', animations.style({\n                transform: 'scale(0.8)',\n                opacity: 0,\n            })),\n            animations.state('visible', animations.style({\n                transform: 'scale(1)',\n                opacity: 1,\n            })),\n            animations.transition('* => visible', animations.animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n            animations.transition('* => void, * => hidden', animations.animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', animations.style({\n                opacity: 0\n            }))),\n        ])\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Internal component that wraps user-provided snack bar content.\n     * @docs-private\n     */\n    var MatSnackBarContainer = /** @class */ (function (_super) {\n        tslib.__extends(MatSnackBarContainer, _super);\n        function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, \n        /** The snack bar configuration. */\n        snackBarConfig) {\n            var _this = _super.call(this) || this;\n            _this._ngZone = _ngZone;\n            _this._elementRef = _elementRef;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this.snackBarConfig = snackBarConfig;\n            /** Whether the component has been destroyed. */\n            _this._destroyed = false;\n            /** Subject for notifying that the snack bar has exited from view. */\n            _this._onExit = new rxjs.Subject();\n            /** Subject for notifying that the snack bar has finished entering the view. */\n            _this._onEnter = new rxjs.Subject();\n            /** The state of the snack bar animations. */\n            _this._animationState = 'void';\n            /**\n             * Attaches a DOM portal to the snack bar container.\n             * @deprecated To be turned into a method.\n             * @breaking-change 10.0.0\n             */\n            _this.attachDomPortal = function (portal) {\n                _this._assertNotAttached();\n                _this._applySnackBarClasses();\n                return _this._portalOutlet.attachDomPortal(portal);\n            };\n            // Based on the ARIA spec, `alert` and `status` roles have an\n            // implicit `assertive` and `polite` politeness respectively.\n            if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n                _this._role = 'alert';\n            }\n            else if (snackBarConfig.politeness === 'off') {\n                _this._role = null;\n            }\n            else {\n                _this._role = 'status';\n            }\n            return _this;\n        }\n        /** Attach a component portal as content to this snack bar container. */\n        MatSnackBarContainer.prototype.attachComponentPortal = function (portal) {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachComponentPortal(portal);\n        };\n        /** Attach a template portal as content to this snack bar container. */\n        MatSnackBarContainer.prototype.attachTemplatePortal = function (portal) {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachTemplatePortal(portal);\n        };\n        /** Handle end of animations, updating the state of the snackbar. */\n        MatSnackBarContainer.prototype.onAnimationEnd = function (event) {\n            var fromState = event.fromState, toState = event.toState;\n            if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n                this._completeExit();\n            }\n            if (toState === 'visible') {\n                // Note: we shouldn't use `this` inside the zone callback,\n                // because it can cause a memory leak.\n                var onEnter_1 = this._onEnter;\n                this._ngZone.run(function () {\n                    onEnter_1.next();\n                    onEnter_1.complete();\n                });\n            }\n        };\n        /** Begin animation of snack bar entrance into view. */\n        MatSnackBarContainer.prototype.enter = function () {\n            if (!this._destroyed) {\n                this._animationState = 'visible';\n                this._changeDetectorRef.detectChanges();\n            }\n        };\n        /** Begin animation of the snack bar exiting from view. */\n        MatSnackBarContainer.prototype.exit = function () {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            return this._onExit;\n        };\n        /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n        MatSnackBarContainer.prototype.ngOnDestroy = function () {\n            this._destroyed = true;\n            this._completeExit();\n        };\n        /**\n         * Waits for the zone to settle before removing the element. Helps prevent\n         * errors where we end up removing an element which is in the middle of an animation.\n         */\n        MatSnackBarContainer.prototype._completeExit = function () {\n            var _this = this;\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(operators.take(1)).subscribe(function () {\n                _this._onExit.next();\n                _this._onExit.complete();\n            });\n        };\n        /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n        MatSnackBarContainer.prototype._applySnackBarClasses = function () {\n            var element = this._elementRef.nativeElement;\n            var panelClasses = this.snackBarConfig.panelClass;\n            if (panelClasses) {\n                if (Array.isArray(panelClasses)) {\n                    // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                    panelClasses.forEach(function (cssClass) { return element.classList.add(cssClass); });\n                }\n                else {\n                    element.classList.add(panelClasses);\n                }\n            }\n            if (this.snackBarConfig.horizontalPosition === 'center') {\n                element.classList.add('mat-snack-bar-center');\n            }\n            if (this.snackBarConfig.verticalPosition === 'top') {\n                element.classList.add('mat-snack-bar-top');\n            }\n        };\n        /** Asserts that no content is already attached to the container. */\n        MatSnackBarContainer.prototype._assertNotAttached = function () {\n            if (this._portalOutlet.hasAttached()) {\n                throw Error('Attempting to attach snack bar content after content is already attached');\n            }\n        };\n        MatSnackBarContainer.decorators = [\n            { type: i0.Component, args: [{\n                        selector: 'snack-bar-container',\n                        template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                        // In Ivy embedded views will be change detected from their declaration place, rather than\n                        // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                        // because it might cause snack bars that were opened from a template not to be out of date.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: i0.ChangeDetectionStrategy.Default,\n                        encapsulation: i0.ViewEncapsulation.None,\n                        animations: [matSnackBarAnimations.snackBarState],\n                        host: {\n                            '[attr.role]': '_role',\n                            'class': 'mat-snack-bar-container',\n                            '[@state]': '_animationState',\n                            '(@state.done)': 'onAnimationEnd($event)'\n                        },\n                        styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatSnackBarContainer.ctorParameters = function () { return [\n            { type: i0.NgZone },\n            { type: i0.ElementRef },\n            { type: i0.ChangeDetectorRef },\n            { type: MatSnackBarConfig }\n        ]; };\n        MatSnackBarContainer.propDecorators = {\n            _portalOutlet: [{ type: i0.ViewChild, args: [portal.CdkPortalOutlet, { static: true },] }]\n        };\n        return MatSnackBarContainer;\n    }(portal.BasePortalOutlet));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatSnackBarModule = /** @class */ (function () {\n        function MatSnackBarModule() {\n        }\n        MatSnackBarModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [\n                            i1.OverlayModule,\n                            portal.PortalModule,\n                            common.CommonModule,\n                            button.MatButtonModule,\n                            core.MatCommonModule,\n                        ],\n                        exports: [MatSnackBarContainer, core.MatCommonModule],\n                        declarations: [MatSnackBarContainer, SimpleSnackBar],\n                        entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n                    },] }\n        ];\n        return MatSnackBarModule;\n    }());\n\n    /** Injection token that can be used to specify default snack bar. */\n    var MAT_SNACK_BAR_DEFAULT_OPTIONS = new i0.InjectionToken('mat-snack-bar-default-options', {\n        providedIn: 'root',\n        factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n    /** @docs-private */\n    function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n        return new MatSnackBarConfig();\n    }\n    /**\n     * Service to dispatch Material Design snack bar messages.\n     */\n    var MatSnackBar = /** @class */ (function () {\n        function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n            this._overlay = _overlay;\n            this._live = _live;\n            this._injector = _injector;\n            this._breakpointObserver = _breakpointObserver;\n            this._parentSnackBar = _parentSnackBar;\n            this._defaultConfig = _defaultConfig;\n            /**\n             * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n             * If there is a parent snack-bar service, all operations should delegate to that parent\n             * via `_openedSnackBarRef`.\n             */\n            this._snackBarRefAtThisLevel = null;\n        }\n        Object.defineProperty(MatSnackBar.prototype, \"_openedSnackBarRef\", {\n            /** Reference to the currently opened snackbar at *any* level. */\n            get: function () {\n                var parent = this._parentSnackBar;\n                return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n            },\n            set: function (value) {\n                if (this._parentSnackBar) {\n                    this._parentSnackBar._openedSnackBarRef = value;\n                }\n                else {\n                    this._snackBarRefAtThisLevel = value;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Creates and dispatches a snack bar with a custom component for the content, removing any\n         * currently opened snack bars.\n         *\n         * @param component Component to be instantiated.\n         * @param config Extra configuration for the snack bar.\n         */\n        MatSnackBar.prototype.openFromComponent = function (component, config) {\n            return this._attach(component, config);\n        };\n        /**\n         * Creates and dispatches a snack bar with a custom template for the content, removing any\n         * currently opened snack bars.\n         *\n         * @param template Template to be instantiated.\n         * @param config Extra configuration for the snack bar.\n         */\n        MatSnackBar.prototype.openFromTemplate = function (template, config) {\n            return this._attach(template, config);\n        };\n        /**\n         * Opens a snackbar with a message and an optional action.\n         * @param message The message to show in the snackbar.\n         * @param action The label for the snackbar action.\n         * @param config Additional configuration options for the snackbar.\n         */\n        MatSnackBar.prototype.open = function (message, action, config) {\n            if (action === void 0) { action = ''; }\n            var _config = tslib.__assign(tslib.__assign({}, this._defaultConfig), config);\n            // Since the user doesn't have access to the component, we can\n            // override the data to pass in our own message and action.\n            _config.data = { message: message, action: action };\n            if (!_config.announcementMessage) {\n                _config.announcementMessage = message;\n            }\n            return this.openFromComponent(SimpleSnackBar, _config);\n        };\n        /**\n         * Dismisses the currently-visible snack bar.\n         */\n        MatSnackBar.prototype.dismiss = function () {\n            if (this._openedSnackBarRef) {\n                this._openedSnackBarRef.dismiss();\n            }\n        };\n        MatSnackBar.prototype.ngOnDestroy = function () {\n            // Only dismiss the snack bar at the current level on destroy.\n            if (this._snackBarRefAtThisLevel) {\n                this._snackBarRefAtThisLevel.dismiss();\n            }\n        };\n        /**\n         * Attaches the snack bar container component to the overlay.\n         */\n        MatSnackBar.prototype._attachSnackBarContainer = function (overlayRef, config) {\n            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            var injector = new portal.PortalInjector(userInjector || this._injector, new WeakMap([\n                [MatSnackBarConfig, config]\n            ]));\n            var containerPortal = new portal.ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n            var containerRef = overlayRef.attach(containerPortal);\n            containerRef.instance.snackBarConfig = config;\n            return containerRef.instance;\n        };\n        /**\n         * Places a new component or a template as the content of the snack bar container.\n         */\n        MatSnackBar.prototype._attach = function (content, userConfig) {\n            var config = tslib.__assign(tslib.__assign(tslib.__assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n            var overlayRef = this._createOverlay(config);\n            var container = this._attachSnackBarContainer(overlayRef, config);\n            var snackBarRef = new MatSnackBarRef(container, overlayRef);\n            if (content instanceof i0.TemplateRef) {\n                var portal$1 = new portal.TemplatePortal(content, null, {\n                    $implicit: config.data,\n                    snackBarRef: snackBarRef\n                });\n                snackBarRef.instance = container.attachTemplatePortal(portal$1);\n            }\n            else {\n                var injector = this._createInjector(config, snackBarRef);\n                var portal$1 = new portal.ComponentPortal(content, undefined, injector);\n                var contentRef = container.attachComponentPortal(portal$1);\n                // We can't pass this via the injector, because the injector is created earlier.\n                snackBarRef.instance = contentRef.instance;\n            }\n            // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n            // appropriate. This class is applied to the overlay element because the overlay must expand to\n            // fill the width of the screen for full width snackbars.\n            this._breakpointObserver.observe(i3.Breakpoints.HandsetPortrait).pipe(operators.takeUntil(overlayRef.detachments())).subscribe(function (state) {\n                var classList = overlayRef.overlayElement.classList;\n                var className = 'mat-snack-bar-handset';\n                state.matches ? classList.add(className) : classList.remove(className);\n            });\n            this._animateSnackBar(snackBarRef, config);\n            this._openedSnackBarRef = snackBarRef;\n            return this._openedSnackBarRef;\n        };\n        /** Animates the old snack bar out and the new one in. */\n        MatSnackBar.prototype._animateSnackBar = function (snackBarRef, config) {\n            var _this = this;\n            // When the snackbar is dismissed, clear the reference to it.\n            snackBarRef.afterDismissed().subscribe(function () {\n                // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n                if (_this._openedSnackBarRef == snackBarRef) {\n                    _this._openedSnackBarRef = null;\n                }\n                if (config.announcementMessage) {\n                    _this._live.clear();\n                }\n            });\n            if (this._openedSnackBarRef) {\n                // If a snack bar is already in view, dismiss it and enter the\n                // new snack bar after exit animation is complete.\n                this._openedSnackBarRef.afterDismissed().subscribe(function () {\n                    snackBarRef.containerInstance.enter();\n                });\n                this._openedSnackBarRef.dismiss();\n            }\n            else {\n                // If no snack bar is in view, enter the new snack bar.\n                snackBarRef.containerInstance.enter();\n            }\n            // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n            if (config.duration && config.duration > 0) {\n                snackBarRef.afterOpened().subscribe(function () { return snackBarRef._dismissAfter(config.duration); });\n            }\n            if (config.announcementMessage) {\n                this._live.announce(config.announcementMessage, config.politeness);\n            }\n        };\n        /**\n         * Creates a new overlay and places it in the correct location.\n         * @param config The user-specified snack bar config.\n         */\n        MatSnackBar.prototype._createOverlay = function (config) {\n            var overlayConfig = new i1.OverlayConfig();\n            overlayConfig.direction = config.direction;\n            var positionStrategy = this._overlay.position().global();\n            // Set horizontal position.\n            var isRtl = config.direction === 'rtl';\n            var isLeft = (config.horizontalPosition === 'left' ||\n                (config.horizontalPosition === 'start' && !isRtl) ||\n                (config.horizontalPosition === 'end' && isRtl));\n            var isRight = !isLeft && config.horizontalPosition !== 'center';\n            if (isLeft) {\n                positionStrategy.left('0');\n            }\n            else if (isRight) {\n                positionStrategy.right('0');\n            }\n            else {\n                positionStrategy.centerHorizontally();\n            }\n            // Set horizontal position.\n            if (config.verticalPosition === 'top') {\n                positionStrategy.top('0');\n            }\n            else {\n                positionStrategy.bottom('0');\n            }\n            overlayConfig.positionStrategy = positionStrategy;\n            return this._overlay.create(overlayConfig);\n        };\n        /**\n         * Creates an injector to be used inside of a snack bar component.\n         * @param config Config that was used to create the snack bar.\n         * @param snackBarRef Reference to the snack bar.\n         */\n        MatSnackBar.prototype._createInjector = function (config, snackBarRef) {\n            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            return new portal.PortalInjector(userInjector || this._injector, new WeakMap([\n                [MatSnackBarRef, snackBarRef],\n                [MAT_SNACK_BAR_DATA, config.data]\n            ]));\n        };\n        MatSnackBar.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: MatSnackBarModule },] }\n        ];\n        /** @nocollapse */\n        MatSnackBar.ctorParameters = function () { return [\n            { type: i1.Overlay },\n            { type: i2.LiveAnnouncer },\n            { type: i0.Injector },\n            { type: i3.BreakpointObserver },\n            { type: MatSnackBar, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] },\n            { type: MatSnackBarConfig, decorators: [{ type: i0.Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n        ]; };\n        MatSnackBar.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n        return MatSnackBar;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_SNACK_BAR_DATA = MAT_SNACK_BAR_DATA;\n    exports.MAT_SNACK_BAR_DEFAULT_OPTIONS = MAT_SNACK_BAR_DEFAULT_OPTIONS;\n    exports.MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY = MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY;\n    exports.MatSnackBar = MatSnackBar;\n    exports.MatSnackBarConfig = MatSnackBarConfig;\n    exports.MatSnackBarContainer = MatSnackBarContainer;\n    exports.MatSnackBarModule = MatSnackBarModule;\n    exports.MatSnackBarRef = MatSnackBarRef;\n    exports.SimpleSnackBar = SimpleSnackBar;\n    exports.matSnackBarAnimations = matSnackBarAnimations;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-snack-bar.umd.js.map\n"]}