{"version":3,"file":"material-badge.umd.js","sources":["../../../../../../src/material/badge/badge.ts","../../../../../../src/material/badge/badge-module.ts","../../../../../../src/material/badge/public-api.ts","../../../../../../src/material/badge/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\n/** Allowed position options for matBadgePosition */\nexport type MatBadgePosition =\n    'above after' | 'above before' | 'below before' | 'below after' |\n    'before' | 'after' | 'above' | 'below';\n\n/** Allowed size options for matBadgeSize */\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_hidden: BooleanInput;\n  static ngAcceptInputType_overlap: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './badge-module';\nexport * from './badge';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["mixinDisabled","__extends","isDevMode","coerceBooleanProperty","Directive","NgZone","ElementRef","AriaDescriber","Renderer2","Optional","Inject","ANIMATION_MODULE_TYPE","Input","NgModule","A11yModule","MatCommonModule"],"mappings":"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"}