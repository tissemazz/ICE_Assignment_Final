{"version":3,"sources":["src/material/material-sort-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","sort","testing","tslib","cdk","this","MatSortHeaderHarness","_super","_this","apply","arguments","_button","locatorFor","__extends","with","options","HarnessPredicate","addOption","label","harness","stringMatches","getLabel","sortDirection","getSortDirection","prototype","__awaiter","__generator","_a","sent","text","ariaSort","host","getAttribute","getAriaLabel","isActive","isDisabled","click","hostSelector","ComponentHarness","MatSortHarness","getSortHeaders","filter","locatorForAll","getActiveHeader","headers","i","length","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/sort/testing', ['exports', 'tslib', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.sort = global.ng.material.sort || {}, global.ng.material.sort.testing = {}), global.tslib, global.ng.cdk.testing));\n}(this, (function (exports, tslib, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard Angular Material sort header in tests. */\n    var MatSortHeaderHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatSortHeaderHarness, _super);\n        function MatSortHeaderHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._button = _this.locatorFor('.mat-sort-header-button');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to\n         * search for a sort header with specific attributes.\n         */\n        MatSortHeaderHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatSortHeaderHarness, options)\n                .addOption('label', options.label, function (harness, label) { return testing.HarnessPredicate.stringMatches(harness.getLabel(), label); })\n                .addOption('sortDirection', options.sortDirection, function (harness, sortDirection) {\n                return testing.HarnessPredicate.stringMatches(harness.getSortDirection(), sortDirection);\n            });\n        };\n        /** Gets the label of the sort header. */\n        MatSortHeaderHarness.prototype.getLabel = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._button()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Gets the sorting direction of the header. */\n        MatSortHeaderHarness.prototype.getSortDirection = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var host, ariaSort;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            host = _a.sent();\n                            return [4 /*yield*/, host.getAttribute('aria-sort')];\n                        case 2:\n                            ariaSort = _a.sent();\n                            if (ariaSort === 'ascending') {\n                                return [2 /*return*/, 'asc'];\n                            }\n                            else if (ariaSort === 'descending') {\n                                return [2 /*return*/, 'desc'];\n                            }\n                            return [2 /*return*/, ''];\n                    }\n                });\n            });\n        };\n        /** Gets the aria-label of the sort header. */\n        MatSortHeaderHarness.prototype.getAriaLabel = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._button()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-label')];\n                    }\n                });\n            });\n        };\n        /** Gets whether the sort header is currently being sorted by. */\n        MatSortHeaderHarness.prototype.isActive = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.getSortDirection()];\n                        case 1: return [2 /*return*/, !!(_a.sent())];\n                    }\n                });\n            });\n        };\n        /** Whether the sort header is disabled. */\n        MatSortHeaderHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var button;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._button()];\n                        case 1:\n                            button = _a.sent();\n                            return [4 /*yield*/, button.getAttribute('disabled')];\n                        case 2: return [2 /*return*/, (_a.sent()) != null];\n                    }\n                });\n            });\n        };\n        /** Clicks the header to change its sorting direction. Only works if the header is enabled. */\n        MatSortHeaderHarness.prototype.click = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).click()];\n                    }\n                });\n            });\n        };\n        MatSortHeaderHarness.hostSelector = '.mat-sort-header';\n        return MatSortHeaderHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard `mat-sort` in tests. */\n    var MatSortHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatSortHarness, _super);\n        function MatSortHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `mat-sort` with specific attributes.\n         * @param options Options for narrowing the search.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatSortHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatSortHarness, options);\n        };\n        /** Gets all of the sort headers in the `mat-sort`. */\n        MatSortHarness.prototype.getSortHeaders = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorForAll(MatSortHeaderHarness.with(filter))()];\n                });\n            });\n        };\n        /** Gets the selected header in the `mat-sort`. */\n        MatSortHarness.prototype.getActiveHeader = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var headers, i;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.getSortHeaders()];\n                        case 1:\n                            headers = _a.sent();\n                            i = 0;\n                            _a.label = 2;\n                        case 2:\n                            if (!(i < headers.length)) return [3 /*break*/, 5];\n                            return [4 /*yield*/, headers[i].isActive()];\n                        case 3:\n                            if (_a.sent()) {\n                                return [2 /*return*/, headers[i]];\n                            }\n                            _a.label = 4;\n                        case 4:\n                            i++;\n                            return [3 /*break*/, 2];\n                        case 5: return [2 /*return*/, null];\n                    }\n                });\n            });\n        };\n        MatSortHarness.hostSelector = '.mat-sort';\n        return MatSortHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatSortHarness = MatSortHarness;\n    exports.MatSortHeaderHarness = MatSortHeaderHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-sort-testing.umd.js.map\n"]}