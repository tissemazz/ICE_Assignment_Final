{"version":3,"file":"material-button.umd.js","sources":["../../../../../../src/material/button/button.ts","../../../../../../src/material/button/button-module.ts","../../../../../../src/material/button/public-api.ts","../../../../../../src/material/button/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    'class': 'mat-focus-indicator',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    // Add a class that applies to all buttons. This makes it easier to target if somebody\n    // wants to target all Material buttons. We do it here rather than `host` to ensure that\n    // the class is applied to derived classes.\n    elementRef.nativeElement.classList.add('mat-button-base');\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    'class': 'mat-focus-indicator',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './button-module';\nexport * from './button';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["mixinColor","mixinDisabled","mixinDisableRipple","__extends","__values","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","FocusMonitor","Optional","Inject","ANIMATION_MODULE_TYPE","ViewChild","MatRipple","Input","NgModule","MatRippleModule","MatCommonModule"],"mappings":"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"}