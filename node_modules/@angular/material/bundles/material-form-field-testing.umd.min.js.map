{"version":3,"sources":["src/material/material-form-field-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","formField","testing","control","tslib","cdk","input","select","this","testing$1","testing$2","MatFormFieldHarness","_super","_this","apply","arguments","_prefixContainer","locatorForOptional","_suffixContainer","_label","_errors","locatorForAll","_hints","_inputControl","MatInputHarness","_selectControl","MatSelectHarness","__extends","with","options","HarnessPredicate","addOption","floatingLabelText","harness","text","__awaiter","_a","_b","__generator","_c","label","stringMatches","getLabel","sent","hasErrors","prototype","getAppearance","hostClasses","appearanceMatch","host","getAttribute","match","Error","getControl","type","hostEl","isSelect","Promise","all","hasClass","__read","hasLabel","labelEl","getTextErrors","length","isLabelFloating","shouldFloat","_d","_e","concat","isDisabled","isAutofilled","getThemeColor","isWarn","map","e","getTextHints","getHarnessLoaderForPrefix","getHarnessLoaderForSuffix","isControlTouched","_hasFormControl","isControlDirty","isControlValid","isControlPending","isUntouched","hostSelector","ComponentHarness","Object","keys","forEach","k","defineProperty","enumerable","get","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/material/form-field/testing/control'), require('tslib'), require('@angular/cdk/testing'), require('@angular/material/input/testing'), require('@angular/material/select/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/form-field/testing', ['exports', '@angular/material/form-field/testing/control', 'tslib', '@angular/cdk/testing', '@angular/material/input/testing', '@angular/material/select/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.formField = global.ng.material.formField || {}, global.ng.material.formField.testing = {}), global.ng.material.formField.testing.control, global.tslib, global.ng.cdk.testing, global.ng.material.input.testing, global.ng.material.select.testing));\n}(this, (function (exports, control, tslib, testing, testing$1, testing$2) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard Material form-field's in tests. */\n    var MatFormFieldHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatFormFieldHarness, _super);\n        function MatFormFieldHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._prefixContainer = _this.locatorForOptional('.mat-form-field-prefix');\n            _this._suffixContainer = _this.locatorForOptional('.mat-form-field-suffix');\n            _this._label = _this.locatorForOptional('.mat-form-field-label');\n            _this._errors = _this.locatorForAll('.mat-error');\n            _this._hints = _this.locatorForAll('mat-hint, .mat-hint');\n            _this._inputControl = _this.locatorForOptional(testing$1.MatInputHarness);\n            _this._selectControl = _this.locatorForOptional(testing$2.MatSelectHarness);\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatFormFieldHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which form field instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatFormFieldHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatFormFieldHarness, options)\n                .addOption('floatingLabelText', options.floatingLabelText, function (harness, text) { return tslib.__awaiter(_this, void 0, void 0, function () { var _a, _b; return tslib.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _b = (_a = testing.HarnessPredicate).stringMatches;\n                        return [4 /*yield*/, harness.getLabel()];\n                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(), text])];\n                }\n            }); }); })\n                .addOption('hasErrors', options.hasErrors, function (harness, hasErrors) { return tslib.__awaiter(_this, void 0, void 0, function () { return tslib.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, harness.hasErrors()];\n                    case 1: return [2 /*return*/, (_a.sent()) === hasErrors];\n                }\n            }); }); });\n        };\n        /** Gets the appearance of the form-field. */\n        MatFormFieldHarness.prototype.getAppearance = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var hostClasses, appearanceMatch;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).getAttribute('class')];\n                        case 2:\n                            hostClasses = _a.sent();\n                            if (hostClasses !== null) {\n                                appearanceMatch = hostClasses.match(/mat-form-field-appearance-(legacy|standard|fill|outline)(?:$| )/);\n                                if (appearanceMatch) {\n                                    return [2 /*return*/, appearanceMatch[1]];\n                                }\n                            }\n                            throw Error('Could not determine appearance of form-field.');\n                    }\n                });\n            });\n        };\n        // Implementation of the \"getControl\" method overload signatures.\n        MatFormFieldHarness.prototype.getControl = function (type) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var hostEl, _a, isInput, isSelect;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            if (type) {\n                                return [2 /*return*/, this.locatorForOptional(type)()];\n                            }\n                            return [4 /*yield*/, this.host()];\n                        case 1:\n                            hostEl = _b.sent();\n                            return [4 /*yield*/, Promise.all([\n                                    hostEl.hasClass('mat-form-field-type-mat-input'),\n                                    hostEl.hasClass('mat-form-field-type-mat-select'),\n                                ])];\n                        case 2:\n                            _a = tslib.__read.apply(void 0, [_b.sent(), 2]), isInput = _a[0], isSelect = _a[1];\n                            if (isInput) {\n                                return [2 /*return*/, this._inputControl()];\n                            }\n                            else if (isSelect) {\n                                return [2 /*return*/, this._selectControl()];\n                            }\n                            return [2 /*return*/, null];\n                    }\n                });\n            });\n        };\n        /** Whether the form-field has a label. */\n        MatFormFieldHarness.prototype.hasLabel = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-form-field-has-label')];\n                    }\n                });\n            });\n        };\n        /** Gets the label of the form-field. */\n        MatFormFieldHarness.prototype.getLabel = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var labelEl;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._label()];\n                        case 1:\n                            labelEl = _a.sent();\n                            return [2 /*return*/, labelEl ? labelEl.text() : null];\n                    }\n                });\n            });\n        };\n        /** Whether the form-field has errors. */\n        MatFormFieldHarness.prototype.hasErrors = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.getTextErrors()];\n                        case 1: return [2 /*return*/, (_a.sent()).length > 0];\n                    }\n                });\n            });\n        };\n        /** Whether the label is currently floating. */\n        MatFormFieldHarness.prototype.isLabelFloating = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a, hasLabel, shouldFloat, _b, _c, _d;\n                return tslib.__generator(this, function (_e) {\n                    switch (_e.label) {\n                        case 0:\n                            _c = (_b = Promise).all;\n                            _d = [this.hasLabel()];\n                            return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, _c.apply(_b, [_d.concat([\n                                    (_e.sent()).hasClass('mat-form-field-should-float')\n                                ])])];\n                        case 2:\n                            _a = tslib.__read.apply(void 0, [_e.sent(), 2]), hasLabel = _a[0], shouldFloat = _a[1];\n                            // If there is no label, the label conceptually can never float. The `should-float` class\n                            // is just always set regardless of whether the label is displayed or not.\n                            return [2 /*return*/, hasLabel && shouldFloat];\n                    }\n                });\n            });\n        };\n        /** Whether the form-field is disabled. */\n        MatFormFieldHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-form-field-disabled')];\n                    }\n                });\n            });\n        };\n        /** Whether the form-field is currently autofilled. */\n        MatFormFieldHarness.prototype.isAutofilled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-form-field-autofilled')];\n                    }\n                });\n            });\n        };\n        /** Gets the theme color of the form-field. */\n        MatFormFieldHarness.prototype.getThemeColor = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var hostEl, _a, isAccent, isWarn;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            hostEl = _b.sent();\n                            return [4 /*yield*/, Promise.all([hostEl.hasClass('mat-accent'), hostEl.hasClass('mat-warn')])];\n                        case 2:\n                            _a = tslib.__read.apply(void 0, [_b.sent(), 2]), isAccent = _a[0], isWarn = _a[1];\n                            if (isAccent) {\n                                return [2 /*return*/, 'accent'];\n                            }\n                            else if (isWarn) {\n                                return [2 /*return*/, 'warn'];\n                            }\n                            return [2 /*return*/, 'primary'];\n                    }\n                });\n            });\n        };\n        /** Gets error messages which are currently displayed in the form-field. */\n        MatFormFieldHarness.prototype.getTextErrors = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a, _b;\n                return tslib.__generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0:\n                            _b = (_a = Promise).all;\n                            return [4 /*yield*/, this._errors()];\n                        case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).map(function (e) { return e.text(); })])];\n                    }\n                });\n            });\n        };\n        /** Gets hint messages which are currently displayed in the form-field. */\n        MatFormFieldHarness.prototype.getTextHints = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a, _b;\n                return tslib.__generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0:\n                            _b = (_a = Promise).all;\n                            return [4 /*yield*/, this._hints()];\n                        case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).map(function (e) { return e.text(); })])];\n                    }\n                });\n            });\n        };\n        /**\n         * Gets a reference to the container element which contains all projected\n         * prefixes of the form-field.\n         */\n        MatFormFieldHarness.prototype.getHarnessLoaderForPrefix = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this._prefixContainer()];\n                });\n            });\n        };\n        /**\n         * Gets a reference to the container element which contains all projected\n         * suffixes of the form-field.\n         */\n        MatFormFieldHarness.prototype.getHarnessLoaderForSuffix = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this._suffixContainer()];\n                });\n            });\n        };\n        /**\n         * Whether the form control has been touched. Returns \"null\"\n         * if no form control is set up.\n         */\n        MatFormFieldHarness.prototype.isControlTouched = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._hasFormControl()];\n                        case 1:\n                            if (!(_a.sent())) {\n                                return [2 /*return*/, null];\n                            }\n                            return [4 /*yield*/, this.host()];\n                        case 2: return [2 /*return*/, (_a.sent()).hasClass('ng-touched')];\n                    }\n                });\n            });\n        };\n        /**\n         * Whether the form control is dirty. Returns \"null\"\n         * if no form control is set up.\n         */\n        MatFormFieldHarness.prototype.isControlDirty = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._hasFormControl()];\n                        case 1:\n                            if (!(_a.sent())) {\n                                return [2 /*return*/, null];\n                            }\n                            return [4 /*yield*/, this.host()];\n                        case 2: return [2 /*return*/, (_a.sent()).hasClass('ng-dirty')];\n                    }\n                });\n            });\n        };\n        /**\n         * Whether the form control is valid. Returns \"null\"\n         * if no form control is set up.\n         */\n        MatFormFieldHarness.prototype.isControlValid = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._hasFormControl()];\n                        case 1:\n                            if (!(_a.sent())) {\n                                return [2 /*return*/, null];\n                            }\n                            return [4 /*yield*/, this.host()];\n                        case 2: return [2 /*return*/, (_a.sent()).hasClass('ng-valid')];\n                    }\n                });\n            });\n        };\n        /**\n         * Whether the form control is pending validation. Returns \"null\"\n         * if no form control is set up.\n         */\n        MatFormFieldHarness.prototype.isControlPending = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._hasFormControl()];\n                        case 1:\n                            if (!(_a.sent())) {\n                                return [2 /*return*/, null];\n                            }\n                            return [4 /*yield*/, this.host()];\n                        case 2: return [2 /*return*/, (_a.sent()).hasClass('ng-pending')];\n                    }\n                });\n            });\n        };\n        /** Checks whether the form-field control has set up a form control. */\n        MatFormFieldHarness.prototype._hasFormControl = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var hostEl, _a, isTouched, isUntouched;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            hostEl = _b.sent();\n                            return [4 /*yield*/, Promise.all([hostEl.hasClass('ng-touched'), hostEl.hasClass('ng-untouched')])];\n                        case 2:\n                            _a = tslib.__read.apply(void 0, [_b.sent(), 2]), isTouched = _a[0], isUntouched = _a[1];\n                            return [2 /*return*/, isTouched || isUntouched];\n                    }\n                });\n            });\n        };\n        MatFormFieldHarness.hostSelector = '.mat-form-field';\n        return MatFormFieldHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    Object.keys(control).forEach(function (k) {\n        if (k !== 'default') Object.defineProperty(exports, k, {\n            enumerable: true,\n            get: function () {\n                return control[k];\n            }\n        });\n    });\n    exports.MatFormFieldHarness = MatFormFieldHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-form-field-testing.umd.js.map\n"]}