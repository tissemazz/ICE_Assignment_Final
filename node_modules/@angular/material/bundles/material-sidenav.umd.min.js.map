{"version":3,"sources":["src/material/material-sidenav.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","sidenav","cdk","platform","scrolling","common","core","tslib","a11y","bidi","coercion","keycodes","rxjs","operators","animations","platformBrowser","this","core$1","animations$1","matDrawerAnimations","transformDrawer","trigger","state","style","transform","visibility","box-shadow","transition","animate","throwMatDuplicatedDrawerError","position","Error","MAT_DRAWER_DEFAULT_AUTOSIZE","InjectionToken","providedIn","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","_super","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","_this","call","__extends","prototype","ngAfterContentInit","_contentMarginChanges","subscribe","markForCheck","decorators","type","Component","args","selector","template","host","class","[style.margin-left.px]","[style.margin-right.px]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ctorParameters","ChangeDetectorRef","MatDrawerContainer","Inject","forwardRef","ElementRef","ScrollDispatcher","NgZone","CdkScrollable","MatDrawer","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_doc","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_position","_mode","_disableClose","_opened","_animationStarted","Subject","_animationEnd","_animationState","openedChange","EventEmitter","_destroyed","onPositionChanged","_modeChanged","opened","activeElement","_takeFocus","_restoreFocus","runOutsideAngular","fromEvent","nativeElement","pipe","filter","event","keyCode","ESCAPE","disableClose","hasModifierKey","takeUntil","run","close","stopPropagation","preventDefault","distinctUntilChanged","x","y","fromState","toState","indexOf","emit","Object","defineProperty","get","set","value","enumerable","configurable","_updateFocusTrapState","next","coerceBooleanProperty","_autoFocus","mode","toggle","o","map","e","autoFocus","_focusTrap","focusInitialElementWhenReady","then","hasMovedFocus","focus","activeEl","contains","focusVia","_openedVia","blur","create","ngAfterContentChecked","isBrowser","ngOnDestroy","destroy","complete","open","openedVia","isOpen","Promise","resolve","take","offsetWidth","enabled","_animationStartListener","_animationDoneListener","exportAs","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-push]","[class.mat-drawer-side]","[class.mat-drawer-opened]","tabIndex","FocusTrapFactory","FocusMonitor","Platform","undefined","Optional","DOCUMENT","propDecorators","Input","HostBinding","Output","_openedStream","openedStart","_closedStream","closedStart","HostListener","_dir","_element","viewportRuler","defaultAutosize","_animationMode","_drawers","QueryList","backdropClick","_doCheckSubject","_contentMargins","left","right","change","_validateDrawers","updateContentMargins","_autosize","_start","_end","_backdropOverride","_userContent","_content","_allDrawers","changes","startWith","drawer","reset","item","notifyOnChanges","forEach","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","length","_isDrawerOpen","debounceTime","_left","_width","width","_right","ngDoCheck","_isPushed","classList","add","_setContainerClass","onMicrotaskEmpty","asObservable","merge","isAdd","className","remove","_onBackdropClicked","_closeModalDrawer","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","providers","provide","useExisting","styles","Directionality","ViewportRuler","String","ANIMATION_MODULE_TYPE","ContentChildren","descendants","ContentChild","ViewChild","autosize","hasBackdrop","MatSidenavContent","changeDetectorRef","container","MatSidenavContainer","MatSidenav","apply","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","coerceNumberProperty","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","fixedBottomGap","MatSidenavModule","NgModule","imports","CommonModule","MatCommonModule","ScrollingModule","PlatformModule","declarations","Éµangular_material_src_material_sidenav_sidenav_a"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,yBAA0BA,QAAQ,0BAA2BA,QAAQ,mBAAoBA,QAAQ,iBAAkBA,QAAQ,0BAA2BA,QAAQ,SAAUA,QAAQ,qBAAsBA,QAAQ,qBAAsBA,QAAQ,yBAA0BA,QAAQ,yBAA0BA,QAAQ,QAASA,QAAQ,kBAAmBA,QAAQ,uBAAwBA,QAAQ,yCAClc,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,4BAA6B,CAAC,UAAW,wBAAyB,yBAA0B,kBAAmB,gBAAiB,yBAA0B,QAAS,oBAAqB,oBAAqB,wBAAyB,wBAAyB,OAAQ,iBAAkB,sBAAuB,wCAAyCJ,GACnXA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,SAAWT,EAAOQ,GAAGC,UAAY,GAAIT,EAAOQ,GAAGC,SAASC,QAAU,IAAKV,EAAOQ,GAAGG,IAAIC,SAAUZ,EAAOQ,GAAGG,IAAIE,UAAWb,EAAOQ,GAAGM,OAAQd,EAAOQ,GAAGO,KAAMf,EAAOQ,GAAGC,SAASM,KAAMf,EAAOgB,MAAOhB,EAAOQ,GAAGG,IAAIM,KAAMjB,EAAOQ,GAAGG,IAAIO,KAAMlB,EAAOQ,GAAGG,IAAIQ,SAAUnB,EAAOQ,GAAGG,IAAIS,SAAUpB,EAAOqB,KAAMrB,EAAOqB,KAAKC,UAAWtB,EAAOQ,GAAGe,WAAYvB,EAAOQ,GAAGgB,gBAAgBD,YAH3b,CAIEE,MAAM,SAAWvB,EAASU,EAAUC,EAAWC,EAAQC,EAAMW,EAAQV,EAAOC,EAAMC,EAAMC,EAAUC,EAAUC,EAAMC,EAAWC,EAAYI,GAAgB;;;;;;;OAavJ,IAAIC,EAAsB,CAEtBC,gBAAiBN,EAAWO,QAAQ,YAAa,CAK7CP,EAAWQ,MAAM,qBAAsBR,EAAWS,MAAM,CACpDC,UAAa,OACbC,WAAc,aAElBX,EAAWQ,MAAM,OAAQR,EAAWS,MAAM,CAEtCG,aAAc,OACdD,WAAc,YAElBX,EAAWa,WAAW,uBAAwBb,EAAWc,QAAQ,QACjEd,EAAWa,WAAW,sCAAuCb,EAAWc,QAAQ,8CAQxF,SAASC,EAA8BC,GACnC,MAAMC,MAAM,iDAAmDD,EAAW,OAG9E,IAAIE,EAA8B,IAAI1B,EAAK2B,eAAe,8BAA+B,CACrFC,WAAY,OACZ1C,QAAS2C,IAMTC,EAAuB,IAAI9B,EAAK2B,eAAe,wBAEnD,SAASE,IACL,OAAO,EAEX,IAAIE,EAAkC,SAAUC,GAE5C,SAASD,EAAiBE,EAAoBC,EAAYC,EAAYC,EAAkBC,GACpF,IAAIC,EAAQN,EAAOO,KAAK7B,KAAMyB,EAAYC,EAAkBC,IAAW3B,KAGvE,OAFA4B,EAAML,mBAAqBA,EAC3BK,EAAMJ,WAAaA,EACZI,EA6BX,OAlCArC,EAAMuC,UAAUT,EAAkBC,GAOlCD,EAAiBU,UAAUC,mBAAqB,WAC5C,IAAIJ,EAAQ5B,KACZA,KAAKwB,WAAWS,sBAAsBC,WAAU,WAC5CN,EAAML,mBAAmBY,mBAGjCd,EAAiBe,WAAa,CAC1B,CAAEC,KAAM/C,EAAKgD,UAAWC,KAAM,CAAC,CACnBC,SAAU,qBACVC,SAAU,4BACVC,KAAM,CACFC,MAAS,qBACTC,yBAA0B,kCAC1BC,0BAA2B,oCAE/BC,gBAAiBxD,EAAKyD,wBAAwBC,OAC9CC,cAAe3D,EAAK4D,kBAAkBC,SAItD9B,EAAiB+B,eAAiB,WAAc,MAAO,CACnD,CAAEf,KAAM/C,EAAK+D,mBACb,CAAEhB,KAAMiB,EAAoBlB,WAAY,CAAC,CAAEC,KAAM/C,EAAKiE,OAAQhB,KAAM,CAACjD,EAAKkE,YAAW,WAAc,OAAOF,SAC1G,CAAEjB,KAAM/C,EAAKmE,YACb,CAAEpB,KAAMjD,EAAUsE,kBAClB,CAAErB,KAAM/C,EAAKqE,UAEVtC,EAnC0B,CAoCnCjC,EAAUwE,eAIRC,EAA2B,WAC3B,SAASA,EAAUC,EAAaC,EAAmBC,EAAeC,EAAWC,EAASC,EAKtF3C,GACI,IAAII,EAAQ5B,KACZA,KAAK8D,YAAcA,EACnB9D,KAAK+D,kBAAoBA,EACzB/D,KAAKgE,cAAgBA,EACrBhE,KAAKiE,UAAYA,EACjBjE,KAAKkE,QAAUA,EACflE,KAAKmE,KAAOA,EACZnE,KAAKwB,WAAaA,EAClBxB,KAAKoE,qCAAuC,KAE5CpE,KAAKqE,mBAAoB,EACzBrE,KAAKsE,UAAY,QACjBtE,KAAKuE,MAAQ,OACbvE,KAAKwE,eAAgB,EACrBxE,KAAKyE,SAAU,EAEfzE,KAAK0E,kBAAoB,IAAI9E,EAAK+E,QAElC3E,KAAK4E,cAAgB,IAAIhF,EAAK+E,QAM9B3E,KAAK6E,gBAAkB,OAEvB7E,KAAK8E,aAEL,IAAIxF,EAAKyF,cAA2B,GAEpC/E,KAAKgF,WAAa,IAAIpF,EAAK+E,QAG3B3E,KAAKiF,kBAAoB,IAAI3F,EAAKyF,aAKlC/E,KAAKkF,aAAe,IAAItF,EAAK+E,QAC7B3E,KAAK8E,aAAa5C,WAAU,SAAUiD,GAC9BA,GACIvD,EAAMuC,OACNvC,EAAMwC,qCAAuCxC,EAAMuC,KAAKiB,eAE5DxD,EAAMyD,cAGNzD,EAAM0D,mBAQdtF,KAAKkE,QAAQqB,mBAAkB,WAC3B3F,EAAK4F,UAAU5D,EAAMkC,YAAY2B,cAAe,WAAWC,KAAK7F,EAAU8F,QAAO,SAAUC,GACvF,OAAOA,EAAMC,UAAYlG,EAASmG,SAAWlE,EAAMmE,eAAiBpG,EAASqG,eAAeJ,MAC5F/F,EAAUoG,UAAUrE,EAAMoD,aAAa9C,WAAU,SAAU0D,GAAS,OAAOhE,EAAMsC,QAAQgC,KAAI,WAC7FtE,EAAMuE,QACNP,EAAMQ,kBACNR,EAAMS,0BAKdrG,KAAK4E,cAAcc,KAAK7F,EAAUyG,sBAAqB,SAAUC,EAAGC,GAChE,OAAOD,EAAEE,YAAcD,EAAEC,WAAaF,EAAEG,UAAYF,EAAEE,YACtDxE,WAAU,SAAU0D,GACpB,IAAIa,EAAYb,EAAMa,UAAWC,EAAUd,EAAMc,SAChB,IAA5BA,EAAQC,QAAQ,SAA+B,SAAdF,GACrB,SAAZC,GAAoD,IAA9BD,EAAUE,QAAQ,UACzC/E,EAAMkD,aAAa8B,KAAKhF,EAAM6C,YA6Q1C,OAzQAoC,OAAOC,eAAejD,EAAU9B,UAAW,WAAY,CAEnDgF,IAAK,WAAc,OAAO/G,KAAKsE,WAC/B0C,IAAK,SAAUC,IAEXA,EAAkB,QAAVA,EAAkB,MAAQ,UACrBjH,KAAKsE,YACdtE,KAAKsE,UAAY2C,EACjBjH,KAAKiF,kBAAkB2B,SAG/BM,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAejD,EAAU9B,UAAW,OAAQ,CAE/CgF,IAAK,WAAc,OAAO/G,KAAKuE,OAC/ByC,IAAK,SAAUC,GACXjH,KAAKuE,MAAQ0C,EACbjH,KAAKoH,wBACLpH,KAAKkF,aAAamC,QAEtBH,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAejD,EAAU9B,UAAW,eAAgB,CAEvDgF,IAAK,WAAc,OAAO/G,KAAKwE,eAC/BwC,IAAK,SAAUC,GAASjH,KAAKwE,cAAgB9E,EAAS4H,sBAAsBL,IAC5EC,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAejD,EAAU9B,UAAW,YAAa,CAMpDgF,IAAK,WACD,IAAIE,EAAQjH,KAAKuH,WAIjB,OAAgB,MAATN,EAA8B,SAAdjH,KAAKwH,KAAkBP,GAElDD,IAAK,SAAUC,GAASjH,KAAKuH,WAAa7H,EAAS4H,sBAAsBL,IACzEC,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAejD,EAAU9B,UAAW,SAAU,CAKjDgF,IAAK,WAAc,OAAO/G,KAAKyE,SAC/BuC,IAAK,SAAUC,GAASjH,KAAKyH,OAAO/H,EAAS4H,sBAAsBL,KACnEC,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAejD,EAAU9B,UAAW,gBAAiB,CAExDgF,IAAK,WACD,OAAO/G,KAAK8E,aAAaY,KAAK7F,EAAU8F,QAAO,SAAU+B,GAAK,OAAOA,KAAO7H,EAAU8H,KAAI,iBAE9FT,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAejD,EAAU9B,UAAW,cAAe,CAEtDgF,IAAK,WACD,OAAO/G,KAAK0E,kBAAkBgB,KAAK7F,EAAU8F,QAAO,SAAUiC,GAAK,OAAOA,EAAEnB,YAAcmB,EAAElB,SAAyC,IAA9BkB,EAAElB,QAAQC,QAAQ,WAAmB9G,EAAU8H,KAAI,iBAE9JT,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAejD,EAAU9B,UAAW,gBAAiB,CAExDgF,IAAK,WACD,OAAO/G,KAAK8E,aAAaY,KAAK7F,EAAU8F,QAAO,SAAU+B,GAAK,OAAQA,KAAO7H,EAAU8H,KAAI,iBAE/FT,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAejD,EAAU9B,UAAW,cAAe,CAEtDgF,IAAK,WACD,OAAO/G,KAAK0E,kBAAkBgB,KAAK7F,EAAU8F,QAAO,SAAUiC,GAAK,OAAOA,EAAEnB,YAAcmB,EAAElB,SAAyB,SAAdkB,EAAElB,WAAwB7G,EAAU8H,KAAI,iBAEnJT,YAAY,EACZC,cAAc,IAMlBtD,EAAU9B,UAAUsD,WAAa,WAC7B,IAAIzD,EAAQ5B,KACPA,KAAK6H,WAAc7H,KAAK8H,YAG7B9H,KAAK8H,WAAWC,+BAA+BC,MAAK,SAAUC,GAGrDA,GAAkE,mBAA1CrG,EAAMkC,YAAY2B,cAAcyC,OACzDtG,EAAMkC,YAAY2B,cAAcyC,YAQ5CrE,EAAU9B,UAAUuD,cAAgB,WAChC,GAAKtF,KAAK6H,UAAV,CAGA,IAAIM,EAAWnI,KAAKmE,MAAQnE,KAAKmE,KAAKiB,cAClC+C,GAAYnI,KAAK8D,YAAY2B,cAAc2C,SAASD,KAEhDnI,KAAKoE,qCACLpE,KAAKgE,cAAcqE,SAASrI,KAAKoE,qCAAsCpE,KAAKsI,YAG5EtI,KAAK8D,YAAY2B,cAAc8C,QAGvCvI,KAAKoE,qCAAuC,KAC5CpE,KAAKsI,WAAa,OAEtBzE,EAAU9B,UAAUC,mBAAqB,WACrChC,KAAK8H,WAAa9H,KAAK+D,kBAAkByE,OAAOxI,KAAK8D,YAAY2B,eACjEzF,KAAKoH,yBAETvD,EAAU9B,UAAU0G,sBAAwB,WAKpCzI,KAAKiE,UAAUyE,YACf1I,KAAKqE,mBAAoB,IAGjCR,EAAU9B,UAAU4G,YAAc,WAC1B3I,KAAK8H,YACL9H,KAAK8H,WAAWc,UAEpB5I,KAAK0E,kBAAkBmE,WACvB7I,KAAK4E,cAAciE,WACnB7I,KAAKkF,aAAa2D,WAClB7I,KAAKgF,WAAWqC,OAChBrH,KAAKgF,WAAW6D,YAOpBhF,EAAU9B,UAAU+G,KAAO,SAAUC,GACjC,OAAO/I,KAAKyH,QAAO,EAAMsB,IAG7BlF,EAAU9B,UAAUoE,MAAQ,WACxB,OAAOnG,KAAKyH,QAAO,IAQvB5D,EAAU9B,UAAU0F,OAAS,SAAUuB,EAAQD,GAC3C,IAAInH,EAAQ5B,KAaZ,YAZe,IAAXgJ,IAAqBA,GAAUhJ,KAAKmF,aACtB,IAAd4D,IAAwBA,EAAY,WACxC/I,KAAKyE,QAAUuE,EACXA,GACAhJ,KAAK6E,gBAAkB7E,KAAKqE,kBAAoB,OAAS,eACzDrE,KAAKsI,WAAaS,IAGlB/I,KAAK6E,gBAAkB,OACvB7E,KAAKsF,iBAETtF,KAAKoH,wBACE,IAAI6B,SAAQ,SAAUC,GACzBtH,EAAMkD,aAAaY,KAAK7F,EAAUsJ,KAAK,IAAIjH,WAAU,SAAU4G,GAAQ,OAAOI,EAAQJ,EAAO,OAAS,gBAG9GjC,OAAOC,eAAejD,EAAU9B,UAAW,SAAU,CACjDgF,IAAK,WACD,OAAO/G,KAAK8D,YAAY2B,eAAiBzF,KAAK8D,YAAY2B,cAAc2D,aAAoB,GAEhGlC,YAAY,EACZC,cAAc,IAGlBtD,EAAU9B,UAAUqF,sBAAwB,WACpCpH,KAAK8H,aAEL9H,KAAK8H,WAAWuB,QAAUrJ,KAAKmF,QAAwB,SAAdnF,KAAKwH,OAQtD3D,EAAU9B,UAAUuH,wBAA0B,SAAU1D,GACpD5F,KAAK0E,kBAAkB2C,KAAKzB,IAOhC/B,EAAU9B,UAAUwH,uBAAyB,SAAU3D,GACnD5F,KAAK4E,cAAcyC,KAAKzB,IAE5B/B,EAAUzB,WAAa,CACnB,CAAEC,KAAM/C,EAAKgD,UAAWC,KAAM,CAAC,CACnBC,SAAU,aACVgH,SAAU,YACV/G,SAAU,wFACV3C,WAAY,CAACK,EAAoBC,iBACjCsC,KAAM,CACFC,MAAS,aAET8G,eAAgB,OAChBC,yBAA0B,qBAC1BC,0BAA2B,kBAC3BC,0BAA2B,kBAC3BC,0BAA2B,kBAC3BC,4BAA6B,SAC7BC,SAAY,MAEhBjH,gBAAiBxD,EAAKyD,wBAAwBC,OAC9CC,cAAe3D,EAAK4D,kBAAkBC,SAItDU,EAAUT,eAAiB,WAAc,MAAO,CAC5C,CAAEf,KAAM/C,EAAKmE,YACb,CAAEpB,KAAM7C,EAAKwK,kBACb,CAAE3H,KAAM7C,EAAKyK,cACb,CAAE5H,KAAMlD,EAAS+K,UACjB,CAAE7H,KAAM/C,EAAKqE,QACb,CAAEtB,UAAM8H,EAAW/H,WAAY,CAAC,CAAEC,KAAM/C,EAAK8K,UAAY,CAAE/H,KAAM/C,EAAKiE,OAAQhB,KAAM,CAAClD,EAAOgL,aAC5F,CAAEhI,KAAMiB,EAAoBlB,WAAY,CAAC,CAAEC,KAAM/C,EAAK8K,UAAY,CAAE/H,KAAM/C,EAAKiE,OAAQhB,KAAM,CAACnB,QAElGyC,EAAUyG,eAAiB,CACvBxJ,SAAU,CAAC,CAAEuB,KAAM/C,EAAKiL,QACxB/C,KAAM,CAAC,CAAEnF,KAAM/C,EAAKiL,QACpBxE,aAAc,CAAC,CAAE1D,KAAM/C,EAAKiL,QAC5B1C,UAAW,CAAC,CAAExF,KAAM/C,EAAKiL,QACzBpF,OAAQ,CAAC,CAAE9C,KAAM/C,EAAKiL,QACtB1F,gBAAiB,CAAC,CAAExC,KAAM/C,EAAKkL,YAAajI,KAAM,CAAC,gBACnDuC,aAAc,CAAC,CAAEzC,KAAM/C,EAAKmL,SAC5BC,cAAe,CAAC,CAAErI,KAAM/C,EAAKmL,OAAQlI,KAAM,CAAC,YAC5CoI,YAAa,CAAC,CAAEtI,KAAM/C,EAAKmL,SAC3BG,cAAe,CAAC,CAAEvI,KAAM/C,EAAKmL,OAAQlI,KAAM,CAAC,YAC5CsI,YAAa,CAAC,CAAExI,KAAM/C,EAAKmL,SAC3BxF,kBAAmB,CAAC,CAAE5C,KAAM/C,EAAKmL,OAAQlI,KAAM,CAAC,qBAChD+G,wBAAyB,CAAC,CAAEjH,KAAM/C,EAAKwL,aAAcvI,KAAM,CAAC,mBAAoB,CAAC,aACjFgH,uBAAwB,CAAC,CAAElH,KAAM/C,EAAKwL,aAAcvI,KAAM,CAAC,kBAAmB,CAAC,cAE5EsB,EA5VmB,GAoW1BP,EAAoC,WACpC,SAASA,EAAmByH,EAAMC,EAAU9G,EAAS3C,EAAoB0J,EAAeC,EAAiBC,GACrG,IAAIvJ,EAAQ5B,UACY,IAApBkL,IAA8BA,GAAkB,GACpDlL,KAAK+K,KAAOA,EACZ/K,KAAKgL,SAAWA,EAChBhL,KAAKkE,QAAUA,EACflE,KAAKuB,mBAAqBA,EAC1BvB,KAAKmL,eAAiBA,EAEtBnL,KAAKoL,SAAW,IAAI9L,EAAK+L,UAEzBrL,KAAKsL,cAAgB,IAAIhM,EAAKyF,aAE9B/E,KAAKgF,WAAa,IAAIpF,EAAK+E,QAE3B3E,KAAKuL,gBAAkB,IAAI3L,EAAK+E,QAMhC3E,KAAKwL,gBAAkB,CAAEC,KAAM,KAAMC,MAAO,MAC5C1L,KAAKiC,sBAAwB,IAAIrC,EAAK+E,QAGlCoG,GACAA,EAAKY,OAAOjG,KAAK7F,EAAUoG,UAAUjG,KAAKgF,aAAa9C,WAAU,WAC7DN,EAAMgK,mBACNhK,EAAMiK,0BAKdZ,EAAcU,SACTjG,KAAK7F,EAAUoG,UAAUjG,KAAKgF,aAC9B9C,WAAU,WAAc,OAAON,EAAMiK,0BAC1C7L,KAAK8L,UAAYZ,EAoTrB,OAlTArE,OAAOC,eAAexD,EAAmBvB,UAAW,QAAS,CAEzDgF,IAAK,WAAc,OAAO/G,KAAK+L,QAC/B7E,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAexD,EAAmBvB,UAAW,MAAO,CAEvDgF,IAAK,WAAc,OAAO/G,KAAKgM,MAC/B9E,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAexD,EAAmBvB,UAAW,WAAY,CAS5DgF,IAAK,WAAc,OAAO/G,KAAK8L,WAC/B9E,IAAK,SAAUC,GAASjH,KAAK8L,UAAYpM,EAAS4H,sBAAsBL,IACxEC,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAexD,EAAmBvB,UAAW,cAAe,CAM/DgF,IAAK,WACD,OAA8B,MAA1B/G,KAAKiM,mBACGjM,KAAK+L,QAA+B,SAArB/L,KAAK+L,OAAOvE,OAAoBxH,KAAKgM,MAA2B,SAAnBhM,KAAKgM,KAAKxE,KAE3ExH,KAAKiM,mBAEhBjF,IAAK,SAAUC,GACXjH,KAAKiM,kBAA6B,MAAThF,EAAgB,KAAOvH,EAAS4H,sBAAsBL,IAEnFC,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAexD,EAAmBvB,UAAW,aAAc,CAE9DgF,IAAK,WACD,OAAO/G,KAAKkM,cAAgBlM,KAAKmM,UAErCjF,YAAY,EACZC,cAAc,IAElB7D,EAAmBvB,UAAUC,mBAAqB,WAC9C,IAAIJ,EAAQ5B,KACZA,KAAKoM,YAAYC,QACZ3G,KAAK7F,EAAUyM,UAAUtM,KAAKoM,aAAcvM,EAAUoG,UAAUjG,KAAKgF,aACrE9C,WAAU,SAAUqK,GAErB3K,EAAMwJ,SAASoB,MAAMD,EAAO5G,QAAO,SAAU8G,GAAQ,OAAQA,EAAKjL,YAAciL,EAAKjL,aAAeI,MACpGA,EAAMwJ,SAASsB,qBAEnB1M,KAAKoL,SAASiB,QAAQ3G,KAAK7F,EAAUyM,UAAU,OAAOpK,WAAU,WAC5DN,EAAMgK,mBACNhK,EAAMwJ,SAASuB,SAAQ,SAAUJ,GAC7B3K,EAAMgL,mBAAmBL,GACzB3K,EAAMiL,qBAAqBN,GAC3B3K,EAAMkL,iBAAiBP,QAEtB3K,EAAMwJ,SAAS2B,QAChBnL,EAAMoL,cAAcpL,EAAMmK,SAC1BnK,EAAMoL,cAAcpL,EAAMoK,QAC1BpK,EAAMiK,uBAEVjK,EAAML,mBAAmBY,kBAE7BnC,KAAKuL,gBAAgB7F,KAAK7F,EAAUoN,aAAa,IACjDpN,EAAUoG,UAAUjG,KAAKgF,aAAa9C,WAAU,WAAc,OAAON,EAAMiK,2BAE/EvI,EAAmBvB,UAAU4G,YAAc,WACvC3I,KAAKiC,sBAAsB4G,WAC3B7I,KAAKuL,gBAAgB1C,WACrB7I,KAAKoL,SAASxC,UACd5I,KAAKgF,WAAWqC,OAChBrH,KAAKgF,WAAW6D,YAGpBvF,EAAmBvB,UAAU+G,KAAO,WAChC9I,KAAKoL,SAASuB,SAAQ,SAAUJ,GAAU,OAAOA,EAAOzD,WAG5DxF,EAAmBvB,UAAUoE,MAAQ,WACjCnG,KAAKoL,SAASuB,SAAQ,SAAUJ,GAAU,OAAOA,EAAOpG,YAM5D7C,EAAmBvB,UAAU8J,qBAAuB,WAChD,IAAIjK,EAAQ5B,KAORyL,EAAO,EACPC,EAAQ,EAWZ,GAVI1L,KAAKkN,OAASlN,KAAKkN,MAAM/H,SACF,QAAnBnF,KAAKkN,MAAM1F,KACXiE,GAAQzL,KAAKkN,MAAMC,OAEK,QAAnBnN,KAAKkN,MAAM1F,OAEhBiE,GADI2B,EAAQpN,KAAKkN,MAAMC,OAEvBzB,GAAS0B,IAGbpN,KAAKqN,QAAUrN,KAAKqN,OAAOlI,OAC3B,GAAwB,QAApBnF,KAAKqN,OAAO7F,KACZkE,GAAS1L,KAAKqN,OAAOF,YAEpB,GAAwB,QAApBnN,KAAKqN,OAAO7F,KAAgB,CACjC,IAAI4F,EACJ1B,GADI0B,EAAQpN,KAAKqN,OAAOF,OAExB1B,GAAQ2B,EAQhB1B,EAAQA,GAAS,MADjBD,EAAOA,GAAQ,QAEFzL,KAAKwL,gBAAgBC,MAAQC,IAAU1L,KAAKwL,gBAAgBE,QACrE1L,KAAKwL,gBAAkB,CAAEC,KAAMA,EAAMC,MAAOA,GAG5C1L,KAAKkE,QAAQgC,KAAI,WAAc,OAAOtE,EAAMK,sBAAsBoF,KAAKzF,EAAM4J,sBAGrFlI,EAAmBvB,UAAUuL,UAAY,WACrC,IAAI1L,EAAQ5B,KAERA,KAAK8L,WAAa9L,KAAKuN,aAEvBvN,KAAKkE,QAAQqB,mBAAkB,WAAc,OAAO3D,EAAM2J,gBAAgBlE,WAQlF/D,EAAmBvB,UAAU6K,mBAAqB,SAAUL,GACxD,IAAI3K,EAAQ5B,KACZuM,EAAO7H,kBAAkBgB,KAAK7F,EAAU8F,QAAO,SAAUC,GAAS,OAAOA,EAAMa,YAAcb,EAAMc,WAAa7G,EAAUoG,UAAUjG,KAAKoL,SAASiB,UAC7InK,WAAU,SAAU0D,GAGC,iBAAlBA,EAAMc,SAAuD,mBAAzB9E,EAAMuJ,gBAC1CvJ,EAAMoJ,SAASvF,cAAc+H,UAAUC,IAAI,yBAE/C7L,EAAMiK,uBACNjK,EAAML,mBAAmBY,kBAET,SAAhBoK,EAAO/E,MACP+E,EAAOzH,aAAaY,KAAK7F,EAAUoG,UAAUjG,KAAKoL,SAASiB,UAAUnK,WAAU,WAC3E,OAAON,EAAM8L,mBAAmBnB,EAAOpH,YAQnD7B,EAAmBvB,UAAU8K,qBAAuB,SAAUN,GAC1D,IAAI3K,EAAQ5B,KACPuM,GAKLA,EAAOtH,kBAAkBS,KAAK7F,EAAUoG,UAAUjG,KAAKoL,SAASiB,UAAUnK,WAAU,WAChFN,EAAMsC,QAAQyJ,iBAAiBC,eAAelI,KAAK7F,EAAUsJ,KAAK,IAAIjH,WAAU,WAC5EN,EAAMgK,0BAKlBtI,EAAmBvB,UAAU+K,iBAAmB,SAAUP,GACtD,IAAI3K,EAAQ5B,KACRuM,GACAA,EAAOrH,aAAaQ,KAAK7F,EAAUoG,UAAUrG,EAAKiO,MAAM7N,KAAKoL,SAASiB,QAASrM,KAAKgF,cAC/E9C,WAAU,WACXN,EAAMiK,uBACNjK,EAAML,mBAAmBY,mBAKrCmB,EAAmBvB,UAAU2L,mBAAqB,SAAUI,GACxD,IAAIN,EAAYxN,KAAKgL,SAASvF,cAAc+H,UACxCO,EAAY,gCACZD,EACAN,EAAUC,IAAIM,GAGdP,EAAUQ,OAAOD,IAIzBzK,EAAmBvB,UAAU6J,iBAAmB,WAC5C,IAAIhK,EAAQ5B,KACZA,KAAK+L,OAAS/L,KAAKgM,KAAO,KAE1BhM,KAAKoL,SAASuB,SAAQ,SAAUJ,GACL,OAAnBA,EAAOzL,UACW,MAAdc,EAAMoK,MACNnL,EAA8B,OAElCe,EAAMoK,KAAOO,IAGO,MAAhB3K,EAAMmK,QACNlL,EAA8B,SAElCe,EAAMmK,OAASQ,MAGvBvM,KAAKqN,OAASrN,KAAKkN,MAAQ,KAEvBlN,KAAK+K,MAA4B,QAApB/K,KAAK+K,KAAK9D,OACvBjH,KAAKkN,MAAQlN,KAAKgM,KAClBhM,KAAKqN,OAASrN,KAAK+L,SAGnB/L,KAAKkN,MAAQlN,KAAK+L,OAClB/L,KAAKqN,OAASrN,KAAKgM,OAI3B1I,EAAmBvB,UAAUwL,UAAY,WACrC,OAAQvN,KAAKgN,cAAchN,KAAK+L,SAA+B,QAApB/L,KAAK+L,OAAOvE,MAClDxH,KAAKgN,cAAchN,KAAKgM,OAA2B,QAAlBhM,KAAKgM,KAAKxE,MAEpDlE,EAAmBvB,UAAUkM,mBAAqB,WAC9CjO,KAAKsL,cAAc1E,OACnB5G,KAAKkO,qBAET5K,EAAmBvB,UAAUmM,kBAAoB,WAC7C,IAAItM,EAAQ5B,KAEZ,CAACA,KAAK+L,OAAQ/L,KAAKgM,MACdrG,QAAO,SAAU4G,GAAU,OAAOA,IAAWA,EAAOxG,cAAgBnE,EAAMuM,iBAAiB5B,MAC3FI,SAAQ,SAAUJ,GAAU,OAAOA,EAAOpG,YAEnD7C,EAAmBvB,UAAUqM,mBAAqB,WAC9C,OAAQpO,KAAKgN,cAAchN,KAAK+L,SAAW/L,KAAKmO,iBAAiBnO,KAAK+L,SACjE/L,KAAKgN,cAAchN,KAAKgM,OAAShM,KAAKmO,iBAAiBnO,KAAKgM,OAErE1I,EAAmBvB,UAAUoM,iBAAmB,SAAU5B,GACtD,MAAuB,SAAhBA,EAAO/E,QAAqBxH,KAAKiM,mBAE5C3I,EAAmBvB,UAAUiL,cAAgB,SAAUT,GACnD,OAAiB,MAAVA,GAAkBA,EAAOpH,QAEpC7B,EAAmBlB,WAAa,CAC5B,CAAEC,KAAM/C,EAAKgD,UAAWC,KAAM,CAAC,CACnBC,SAAU,uBACVgH,SAAU,qBACV/G,SAAU,6VACVC,KAAM,CACFC,MAAS,uBACT0L,iDAAkD,qBAEtDvL,gBAAiBxD,EAAKyD,wBAAwBC,OAC9CC,cAAe3D,EAAK4D,kBAAkBC,KACtCmL,UAAW,CAAC,CACJC,QAASnN,EACToN,YAAalL,IAErBmL,OAAQ,CAAC,mpEAIzBnL,EAAmBF,eAAiB,WAAc,MAAO,CACrD,CAAEf,KAAM5C,EAAKiP,eAAgBtM,WAAY,CAAC,CAAEC,KAAM/C,EAAK8K,YACvD,CAAE/H,KAAM/C,EAAKmE,YACb,CAAEpB,KAAM/C,EAAKqE,QACb,CAAEtB,KAAM/C,EAAK+D,mBACb,CAAEhB,KAAMjD,EAAUuP,eAClB,CAAEtM,UAAM8H,EAAW/H,WAAY,CAAC,CAAEC,KAAM/C,EAAKiE,OAAQhB,KAAM,CAACvB,MAC5D,CAAEqB,KAAMuM,OAAQxM,WAAY,CAAC,CAAEC,KAAM/C,EAAK8K,UAAY,CAAE/H,KAAM/C,EAAKiE,OAAQhB,KAAM,CAACrC,EAAa2O,4BAEnGvL,EAAmBgH,eAAiB,CAChC8B,YAAa,CAAC,CAAE/J,KAAM/C,EAAKwP,gBAAiBvM,KAAM,CAACsB,EAAW,CAG9CkL,aAAa,MAE7B5C,SAAU,CAAC,CAAE9J,KAAM/C,EAAK0P,aAAczM,KAAM,CAAClB,KAC7C6K,aAAc,CAAC,CAAE7J,KAAM/C,EAAK2P,UAAW1M,KAAM,CAAClB,KAC9C6N,SAAU,CAAC,CAAE7M,KAAM/C,EAAKiL,QACxB4E,YAAa,CAAC,CAAE9M,KAAM/C,EAAKiL,QAC3Be,cAAe,CAAC,CAAEjJ,KAAM/C,EAAKmL,UAE1BnH,EAzV4B,GAmWnC8L,EAAmC,SAAU9N,GAE7C,SAAS8N,EAAkBC,EAAmBC,EAAW7N,EAAYC,EAAkBC,GACnF,OAAOL,EAAOO,KAAK7B,KAAMqP,EAAmBC,EAAW7N,EAAYC,EAAkBC,IAAW3B,KAuBpG,OAzBAT,EAAMuC,UAAUsN,EAAmB9N,GAInC8N,EAAkBhN,WAAa,CAC3B,CAAEC,KAAM/C,EAAKgD,UAAWC,KAAM,CAAC,CACnBC,SAAU,sBACVC,SAAU,4BACVC,KAAM,CACFC,MAAS,yCACTC,yBAA0B,kCAC1BC,0BAA2B,oCAE/BC,gBAAiBxD,EAAKyD,wBAAwBC,OAC9CC,cAAe3D,EAAK4D,kBAAkBC,SAItDiM,EAAkBhM,eAAiB,WAAc,MAAO,CACpD,CAAEf,KAAM/C,EAAK+D,mBACb,CAAEhB,KAAMkN,EAAqBnN,WAAY,CAAC,CAAEC,KAAM/C,EAAKiE,OAAQhB,KAAM,CAACjD,EAAKkE,YAAW,WAAc,OAAO+L,SAC3G,CAAElN,KAAM/C,EAAKmE,YACb,CAAEpB,KAAMjD,EAAUsE,kBAClB,CAAErB,KAAM/C,EAAKqE,UAEVyL,EA1B2B,CA2BpC/N,GACEmO,EAA4B,SAAUlO,GAEtC,SAASkO,IACL,IAAI5N,EAAmB,OAAXN,GAAmBA,EAAOmO,MAAMzP,KAAM0P,YAAc1P,KAIhE,OAHA4B,EAAM+N,kBAAmB,EACzB/N,EAAMgO,aAAe,EACrBhO,EAAMiO,gBAAkB,EACjBjO,EA0DX,OAhEArC,EAAMuC,UAAU0N,EAAYlO,GAQ5BuF,OAAOC,eAAe0I,EAAWzN,UAAW,kBAAmB,CAE3DgF,IAAK,WAAc,OAAO/G,KAAK2P,kBAC/B3I,IAAK,SAAUC,GAASjH,KAAK2P,iBAAmBjQ,EAAS4H,sBAAsBL,IAC/EC,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAe0I,EAAWzN,UAAW,cAAe,CAKvDgF,IAAK,WAAc,OAAO/G,KAAK4P,cAC/B5I,IAAK,SAAUC,GAASjH,KAAK4P,aAAelQ,EAASoQ,qBAAqB7I,IAC1EC,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAe0I,EAAWzN,UAAW,iBAAkB,CAK1DgF,IAAK,WAAc,OAAO/G,KAAK6P,iBAC/B7I,IAAK,SAAUC,GAASjH,KAAK6P,gBAAkBnQ,EAASoQ,qBAAqB7I,IAC7EC,YAAY,EACZC,cAAc,IAElBqI,EAAWpN,WAAa,CACpB,CAAEC,KAAM/C,EAAKgD,UAAWC,KAAM,CAAC,CACnBC,SAAU,cACVgH,SAAU,aACV/G,SAAU,wFACV3C,WAAY,CAACK,EAAoBC,iBACjCsC,KAAM,CACFC,MAAS,yBACToH,SAAY,KAEZN,eAAgB,OAChBC,yBAA0B,qBAC1BC,0BAA2B,kBAC3BC,0BAA2B,kBAC3BC,0BAA2B,kBAC3BC,4BAA6B,SAC7BiG,4BAA6B,kBAC7BC,iBAAkB,uCAClBC,oBAAqB,2CAEzBnN,gBAAiBxD,EAAKyD,wBAAwBC,OAC9CC,cAAe3D,EAAK4D,kBAAkBC,SAGtDqM,EAAWlF,eAAiB,CACxB4F,gBAAiB,CAAC,CAAE7N,KAAM/C,EAAKiL,QAC/B4F,YAAa,CAAC,CAAE9N,KAAM/C,EAAKiL,QAC3B6F,eAAgB,CAAC,CAAE/N,KAAM/C,EAAKiL,SAE3BiF,EAjEoB,CAkE7B3L,GACE0L,EAAqC,SAAUjO,GAE/C,SAASiO,IACL,OAAkB,OAAXjO,GAAmBA,EAAOmO,MAAMzP,KAAM0P,YAAc1P,KA4B/D,OA9BAT,EAAMuC,UAAUyN,EAAqBjO,GAIrCiO,EAAoBnN,WAAa,CAC7B,CAAEC,KAAM/C,EAAKgD,UAAWC,KAAM,CAAC,CACnBC,SAAU,wBACVgH,SAAU,sBACV/G,SAAU,+WACVC,KAAM,CACFC,MAAS,6CACT0L,iDAAkD,qBAEtDvL,gBAAiBxD,EAAKyD,wBAAwBC,OAC9CC,cAAe3D,EAAK4D,kBAAkBC,KACtCmL,UAAW,CAAC,CACJC,QAASnN,EACToN,YAAae,IAErBd,OAAQ,CAAC,mpEAGzBc,EAAoBjF,eAAiB,CACjC8B,YAAa,CAAC,CAAE/J,KAAM/C,EAAKwP,gBAAiBvM,KAAM,CAACiN,EAAY,CAG/CT,aAAa,MAE7B5C,SAAU,CAAC,CAAE9J,KAAM/C,EAAK0P,aAAczM,KAAM,CAAC6M,MAE1CG,EA/B6B,CAgCtCjM,GASE+M,EAAkC,WAClC,SAASA,KA6BT,OA3BAA,EAAiBjO,WAAa,CAC1B,CAAEC,KAAM/C,EAAKgR,SAAU/N,KAAM,CAAC,CAClBgO,QAAS,CACLlR,EAAOmR,aACPvQ,EAAOwQ,gBACPrR,EAAUsR,gBACVvR,EAASwR,gBAEblS,QAAS,CACLwB,EAAOwQ,gBACP5M,EACAP,EACAjC,EACAmO,EACAD,EACAH,GAEJwB,aAAc,CACV/M,EACAP,EACAjC,EACAmO,EACAD,EACAH,OAIbiB,EA9B0B;;;;;;;;AA6CrC5R,EAAQuC,4BAA8BA,EACtCvC,EAAQ0C,oCAAsCA,EAC9C1C,EAAQoF,UAAYA,EACpBpF,EAAQ6E,mBAAqBA,EAC7B7E,EAAQ4C,iBAAmBA,EAC3B5C,EAAQ+Q,WAAaA,EACrB/Q,EAAQ8Q,oBAAsBA,EAC9B9Q,EAAQ2Q,kBAAoBA,EAC5B3Q,EAAQ4R,iBAAmBA,EAC3B5R,EAAQ0B,oBAAsBA,EAC9B1B,EAAQoC,8BAAgCA,EACxCpC,EAAQoS,iDAAmDzP,EAE3DyF,OAAOC,eAAerI,EAAS,aAAc,CAAEwI,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/platform'), require('@angular/cdk/scrolling'), require('@angular/common'), require('@angular/core'), require('@angular/material/core'), require('tslib'), require('@angular/cdk/a11y'), require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/cdk/keycodes'), require('rxjs'), require('rxjs/operators'), require('@angular/animations'), require('@angular/platform-browser/animations')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/sidenav', ['exports', '@angular/cdk/platform', '@angular/cdk/scrolling', '@angular/common', '@angular/core', '@angular/material/core', 'tslib', '@angular/cdk/a11y', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/cdk/keycodes', 'rxjs', 'rxjs/operators', '@angular/animations', '@angular/platform-browser/animations'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.sidenav = {}), global.ng.cdk.platform, global.ng.cdk.scrolling, global.ng.common, global.ng.core, global.ng.material.core, global.tslib, global.ng.cdk.a11y, global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.cdk.keycodes, global.rxjs, global.rxjs.operators, global.ng.animations, global.ng.platformBrowser.animations));\n}(this, (function (exports, platform, scrolling, common, core, core$1, tslib, a11y, bidi, coercion, keycodes, rxjs, operators, animations, animations$1) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Animations used by the Material drawers.\n     * @docs-private\n     */\n    var matDrawerAnimations = {\n        /** Animation that slides a drawer in and out. */\n        transformDrawer: animations.trigger('transform', [\n            // We remove the `transform` here completely, rather than setting it to zero, because:\n            // 1. Having a transform can cause elements with ripples or an animated\n            //    transform to shift around in Chrome with an RTL layout (see #10023).\n            // 2. 3d transforms causes text to appear blurry on IE and Edge.\n            animations.state('open, open-instant', animations.style({\n                'transform': 'none',\n                'visibility': 'visible',\n            })),\n            animations.state('void', animations.style({\n                // Avoids the shadow showing up when closed in SSR.\n                'box-shadow': 'none',\n                'visibility': 'hidden',\n            })),\n            animations.transition('void => open-instant', animations.animate('0ms')),\n            animations.transition('void <=> open, open-instant => void', animations.animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n        ])\n    };\n\n    /**\n     * Throws an exception when two MatDrawer are matching the same position.\n     * @docs-private\n     */\n    function throwMatDuplicatedDrawerError(position) {\n        throw Error(\"A drawer was already declared for 'position=\\\"\" + position + \"\\\"'\");\n    }\n    /** Configures whether drawers should use auto sizing by default. */\n    var MAT_DRAWER_DEFAULT_AUTOSIZE = new core.InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n        providedIn: 'root',\n        factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n    /**\n     * Used to provide a drawer container to a drawer while avoiding circular references.\n     * @docs-private\n     */\n    var MAT_DRAWER_CONTAINER = new core.InjectionToken('MAT_DRAWER_CONTAINER');\n    /** @docs-private */\n    function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n        return false;\n    }\n    var MatDrawerContent = /** @class */ (function (_super) {\n        tslib.__extends(MatDrawerContent, _super);\n        function MatDrawerContent(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n            var _this = _super.call(this, elementRef, scrollDispatcher, ngZone) || this;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._container = _container;\n            return _this;\n        }\n        MatDrawerContent.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._container._contentMarginChanges.subscribe(function () {\n                _this._changeDetectorRef.markForCheck();\n            });\n        };\n        MatDrawerContent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-drawer-content',\n                        template: '<ng-content></ng-content>',\n                        host: {\n                            'class': 'mat-drawer-content',\n                            '[style.margin-left.px]': '_container._contentMargins.left',\n                            '[style.margin-right.px]': '_container._contentMargins.right',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        /** @nocollapse */\n        MatDrawerContent.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: MatDrawerContainer, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return MatDrawerContainer; }),] }] },\n            { type: core.ElementRef },\n            { type: scrolling.ScrollDispatcher },\n            { type: core.NgZone }\n        ]; };\n        return MatDrawerContent;\n    }(scrolling.CdkScrollable));\n    /**\n     * This component corresponds to a drawer that can be opened on the drawer container.\n     */\n    var MatDrawer = /** @class */ (function () {\n        function MatDrawer(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, \n        /**\n         * @deprecated `_container` parameter to be made required.\n         * @breaking-change 10.0.0\n         */\n        _container) {\n            var _this = this;\n            this._elementRef = _elementRef;\n            this._focusTrapFactory = _focusTrapFactory;\n            this._focusMonitor = _focusMonitor;\n            this._platform = _platform;\n            this._ngZone = _ngZone;\n            this._doc = _doc;\n            this._container = _container;\n            this._elementFocusedBeforeDrawerWasOpened = null;\n            /** Whether the drawer is initialized. Used for disabling the initial animation. */\n            this._enableAnimations = false;\n            this._position = 'start';\n            this._mode = 'over';\n            this._disableClose = false;\n            this._opened = false;\n            /** Emits whenever the drawer has started animating. */\n            this._animationStarted = new rxjs.Subject();\n            /** Emits whenever the drawer is done animating. */\n            this._animationEnd = new rxjs.Subject();\n            /** Current state of the sidenav animation. */\n            // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n            // metadata is not inherited by child classes, instead the host binding data is defined in a way\n            // that can be inherited.\n            // tslint:disable:no-host-decorator-in-concrete\n            this._animationState = 'void';\n            /** Event emitted when the drawer open state is changed. */\n            this.openedChange = \n            // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n            new core.EventEmitter(/* isAsync */ true);\n            /** Emits when the component is destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /** Event emitted when the drawer's position changes. */\n            // tslint:disable-next-line:no-output-on-prefix\n            this.onPositionChanged = new core.EventEmitter();\n            /**\n             * An observable that emits when the drawer mode changes. This is used by the drawer container to\n             * to know when to when the mode changes so it can adapt the margins on the content.\n             */\n            this._modeChanged = new rxjs.Subject();\n            this.openedChange.subscribe(function (opened) {\n                if (opened) {\n                    if (_this._doc) {\n                        _this._elementFocusedBeforeDrawerWasOpened = _this._doc.activeElement;\n                    }\n                    _this._takeFocus();\n                }\n                else {\n                    _this._restoreFocus();\n                }\n            });\n            /**\n             * Listen to `keydown` events outside the zone so that change detection is not run every\n             * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n             * and we don't have close disabled.\n             */\n            this._ngZone.runOutsideAngular(function () {\n                rxjs.fromEvent(_this._elementRef.nativeElement, 'keydown').pipe(operators.filter(function (event) {\n                    return event.keyCode === keycodes.ESCAPE && !_this.disableClose && !keycodes.hasModifierKey(event);\n                }), operators.takeUntil(_this._destroyed)).subscribe(function (event) { return _this._ngZone.run(function () {\n                    _this.close();\n                    event.stopPropagation();\n                    event.preventDefault();\n                }); });\n            });\n            // We need a Subject with distinctUntilChanged, because the `done` event\n            // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n            this._animationEnd.pipe(operators.distinctUntilChanged(function (x, y) {\n                return x.fromState === y.fromState && x.toState === y.toState;\n            })).subscribe(function (event) {\n                var fromState = event.fromState, toState = event.toState;\n                if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                    (toState === 'void' && fromState.indexOf('open') === 0)) {\n                    _this.openedChange.emit(_this._opened);\n                }\n            });\n        }\n        Object.defineProperty(MatDrawer.prototype, \"position\", {\n            /** The side that the drawer is attached to. */\n            get: function () { return this._position; },\n            set: function (value) {\n                // Make sure we have a valid value.\n                value = value === 'end' ? 'end' : 'start';\n                if (value != this._position) {\n                    this._position = value;\n                    this.onPositionChanged.emit();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"mode\", {\n            /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n            get: function () { return this._mode; },\n            set: function (value) {\n                this._mode = value;\n                this._updateFocusTrapState();\n                this._modeChanged.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"disableClose\", {\n            /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n            get: function () { return this._disableClose; },\n            set: function (value) { this._disableClose = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"autoFocus\", {\n            /**\n             * Whether the drawer should focus the first focusable element automatically when opened.\n             * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n             * enabled, focus will be moved into the sidenav in `side` mode as well.\n             */\n            get: function () {\n                var value = this._autoFocus;\n                // Note that usually we disable auto focusing in `side` mode, because we don't know how the\n                // sidenav is being used, but in some cases it still makes sense to do it. If the consumer\n                // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.\n                return value == null ? this.mode !== 'side' : value;\n            },\n            set: function (value) { this._autoFocus = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"opened\", {\n            /**\n             * Whether the drawer is opened. We overload this because we trigger an event when it\n             * starts or end.\n             */\n            get: function () { return this._opened; },\n            set: function (value) { this.toggle(coercion.coerceBooleanProperty(value)); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"_openedStream\", {\n            /** Event emitted when the drawer has been opened. */\n            get: function () {\n                return this.openedChange.pipe(operators.filter(function (o) { return o; }), operators.map(function () { }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"openedStart\", {\n            /** Event emitted when the drawer has started opening. */\n            get: function () {\n                return this._animationStarted.pipe(operators.filter(function (e) { return e.fromState !== e.toState && e.toState.indexOf('open') === 0; }), operators.map(function () { }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"_closedStream\", {\n            /** Event emitted when the drawer has been closed. */\n            get: function () {\n                return this.openedChange.pipe(operators.filter(function (o) { return !o; }), operators.map(function () { }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"closedStart\", {\n            /** Event emitted when the drawer has started closing. */\n            get: function () {\n                return this._animationStarted.pipe(operators.filter(function (e) { return e.fromState !== e.toState && e.toState === 'void'; }), operators.map(function () { }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Moves focus into the drawer. Note that this works even if\n         * the focus trap is disabled in `side` mode.\n         */\n        MatDrawer.prototype._takeFocus = function () {\n            var _this = this;\n            if (!this.autoFocus || !this._focusTrap) {\n                return;\n            }\n            this._focusTrap.focusInitialElementWhenReady().then(function (hasMovedFocus) {\n                // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n                // still works. We need to check that `focus` is a function due to Universal.\n                if (!hasMovedFocus && typeof _this._elementRef.nativeElement.focus === 'function') {\n                    _this._elementRef.nativeElement.focus();\n                }\n            });\n        };\n        /**\n         * If focus is currently inside the drawer, restores it to where it was before the drawer\n         * opened.\n         */\n        MatDrawer.prototype._restoreFocus = function () {\n            if (!this.autoFocus) {\n                return;\n            }\n            var activeEl = this._doc && this._doc.activeElement;\n            if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n                // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.\n                if (this._elementFocusedBeforeDrawerWasOpened) {\n                    this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n                }\n                else {\n                    this._elementRef.nativeElement.blur();\n                }\n            }\n            this._elementFocusedBeforeDrawerWasOpened = null;\n            this._openedVia = null;\n        };\n        MatDrawer.prototype.ngAfterContentInit = function () {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            this._updateFocusTrapState();\n        };\n        MatDrawer.prototype.ngAfterContentChecked = function () {\n            // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n            // drawers that are open by default. When we're on the server, we shouldn't enable the\n            // animations, because we don't want the drawer to animate the first time the user sees\n            // the page.\n            if (this._platform.isBrowser) {\n                this._enableAnimations = true;\n            }\n        };\n        MatDrawer.prototype.ngOnDestroy = function () {\n            if (this._focusTrap) {\n                this._focusTrap.destroy();\n            }\n            this._animationStarted.complete();\n            this._animationEnd.complete();\n            this._modeChanged.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /**\n         * Open the drawer.\n         * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n         * Used for focus management after the sidenav is closed.\n         */\n        MatDrawer.prototype.open = function (openedVia) {\n            return this.toggle(true, openedVia);\n        };\n        /** Close the drawer. */\n        MatDrawer.prototype.close = function () {\n            return this.toggle(false);\n        };\n        /**\n         * Toggle this drawer.\n         * @param isOpen Whether the drawer should be open.\n         * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n         * Used for focus management after the sidenav is closed.\n         */\n        MatDrawer.prototype.toggle = function (isOpen, openedVia) {\n            var _this = this;\n            if (isOpen === void 0) { isOpen = !this.opened; }\n            if (openedVia === void 0) { openedVia = 'program'; }\n            this._opened = isOpen;\n            if (isOpen) {\n                this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n                this._openedVia = openedVia;\n            }\n            else {\n                this._animationState = 'void';\n                this._restoreFocus();\n            }\n            this._updateFocusTrapState();\n            return new Promise(function (resolve) {\n                _this.openedChange.pipe(operators.take(1)).subscribe(function (open) { return resolve(open ? 'open' : 'close'); });\n            });\n        };\n        Object.defineProperty(MatDrawer.prototype, \"_width\", {\n            get: function () {\n                return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Updates the enabled state of the focus trap. */\n        MatDrawer.prototype._updateFocusTrapState = function () {\n            if (this._focusTrap) {\n                // The focus trap is only enabled when the drawer is open in any mode other than side.\n                this._focusTrap.enabled = this.opened && this.mode !== 'side';\n            }\n        };\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        MatDrawer.prototype._animationStartListener = function (event) {\n            this._animationStarted.next(event);\n        };\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        MatDrawer.prototype._animationDoneListener = function (event) {\n            this._animationEnd.next(event);\n        };\n        MatDrawer.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-drawer',\n                        exportAs: 'matDrawer',\n                        template: \"<div class=\\\"mat-drawer-inner-container\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                        animations: [matDrawerAnimations.transformDrawer],\n                        host: {\n                            'class': 'mat-drawer',\n                            // must prevent the browser from aligning text based on value\n                            '[attr.align]': 'null',\n                            '[class.mat-drawer-end]': 'position === \"end\"',\n                            '[class.mat-drawer-over]': 'mode === \"over\"',\n                            '[class.mat-drawer-push]': 'mode === \"push\"',\n                            '[class.mat-drawer-side]': 'mode === \"side\"',\n                            '[class.mat-drawer-opened]': 'opened',\n                            'tabIndex': '-1',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        /** @nocollapse */\n        MatDrawer.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: a11y.FocusTrapFactory },\n            { type: a11y.FocusMonitor },\n            { type: platform.Platform },\n            { type: core.NgZone },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] },\n            { type: MatDrawerContainer, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_DRAWER_CONTAINER,] }] }\n        ]; };\n        MatDrawer.propDecorators = {\n            position: [{ type: core.Input }],\n            mode: [{ type: core.Input }],\n            disableClose: [{ type: core.Input }],\n            autoFocus: [{ type: core.Input }],\n            opened: [{ type: core.Input }],\n            _animationState: [{ type: core.HostBinding, args: ['@transform',] }],\n            openedChange: [{ type: core.Output }],\n            _openedStream: [{ type: core.Output, args: ['opened',] }],\n            openedStart: [{ type: core.Output }],\n            _closedStream: [{ type: core.Output, args: ['closed',] }],\n            closedStart: [{ type: core.Output }],\n            onPositionChanged: [{ type: core.Output, args: ['positionChanged',] }],\n            _animationStartListener: [{ type: core.HostListener, args: ['@transform.start', ['$event'],] }],\n            _animationDoneListener: [{ type: core.HostListener, args: ['@transform.done', ['$event'],] }]\n        };\n        return MatDrawer;\n    }());\n    /**\n     * `<mat-drawer-container>` component.\n     *\n     * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n     * and coordinates the backdrop and content styling.\n     */\n    var MatDrawerContainer = /** @class */ (function () {\n        function MatDrawerContainer(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize, _animationMode) {\n            var _this = this;\n            if (defaultAutosize === void 0) { defaultAutosize = false; }\n            this._dir = _dir;\n            this._element = _element;\n            this._ngZone = _ngZone;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._animationMode = _animationMode;\n            /** Drawers that belong to this container. */\n            this._drawers = new core.QueryList();\n            /** Event emitted when the drawer backdrop is clicked. */\n            this.backdropClick = new core.EventEmitter();\n            /** Emits when the component is destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /** Emits on every ngDoCheck. Used for debouncing reflows. */\n            this._doCheckSubject = new rxjs.Subject();\n            /**\n             * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n             * drawer is open. We use margin rather than transform even for push mode because transform breaks\n             * fixed position elements inside of the transformed element.\n             */\n            this._contentMargins = { left: null, right: null };\n            this._contentMarginChanges = new rxjs.Subject();\n            // If a `Dir` directive exists up the tree, listen direction changes\n            // and update the left/right properties to point to the proper start/end.\n            if (_dir) {\n                _dir.change.pipe(operators.takeUntil(this._destroyed)).subscribe(function () {\n                    _this._validateDrawers();\n                    _this.updateContentMargins();\n                });\n            }\n            // Since the minimum width of the sidenav depends on the viewport width,\n            // we need to recompute the margins if the viewport changes.\n            viewportRuler.change()\n                .pipe(operators.takeUntil(this._destroyed))\n                .subscribe(function () { return _this.updateContentMargins(); });\n            this._autosize = defaultAutosize;\n        }\n        Object.defineProperty(MatDrawerContainer.prototype, \"start\", {\n            /** The drawer child with the `start` position. */\n            get: function () { return this._start; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawerContainer.prototype, \"end\", {\n            /** The drawer child with the `end` position. */\n            get: function () { return this._end; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawerContainer.prototype, \"autosize\", {\n            /**\n             * Whether to automatically resize the container whenever\n             * the size of any of its drawers changes.\n             *\n             * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n             * the drawers on every change detection cycle. Can be configured globally via the\n             * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n             */\n            get: function () { return this._autosize; },\n            set: function (value) { this._autosize = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawerContainer.prototype, \"hasBackdrop\", {\n            /**\n             * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n             * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n             * mode as well.\n             */\n            get: function () {\n                if (this._backdropOverride == null) {\n                    return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n                }\n                return this._backdropOverride;\n            },\n            set: function (value) {\n                this._backdropOverride = value == null ? null : coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawerContainer.prototype, \"scrollable\", {\n            /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n            get: function () {\n                return this._userContent || this._content;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatDrawerContainer.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._allDrawers.changes\n                .pipe(operators.startWith(this._allDrawers), operators.takeUntil(this._destroyed))\n                .subscribe(function (drawer) {\n                // @breaking-change 10.0.0 Remove `_container` check once container parameter is required.\n                _this._drawers.reset(drawer.filter(function (item) { return !item._container || item._container === _this; }));\n                _this._drawers.notifyOnChanges();\n            });\n            this._drawers.changes.pipe(operators.startWith(null)).subscribe(function () {\n                _this._validateDrawers();\n                _this._drawers.forEach(function (drawer) {\n                    _this._watchDrawerToggle(drawer);\n                    _this._watchDrawerPosition(drawer);\n                    _this._watchDrawerMode(drawer);\n                });\n                if (!_this._drawers.length ||\n                    _this._isDrawerOpen(_this._start) ||\n                    _this._isDrawerOpen(_this._end)) {\n                    _this.updateContentMargins();\n                }\n                _this._changeDetectorRef.markForCheck();\n            });\n            this._doCheckSubject.pipe(operators.debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            operators.takeUntil(this._destroyed)).subscribe(function () { return _this.updateContentMargins(); });\n        };\n        MatDrawerContainer.prototype.ngOnDestroy = function () {\n            this._contentMarginChanges.complete();\n            this._doCheckSubject.complete();\n            this._drawers.destroy();\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /** Calls `open` of both start and end drawers */\n        MatDrawerContainer.prototype.open = function () {\n            this._drawers.forEach(function (drawer) { return drawer.open(); });\n        };\n        /** Calls `close` of both start and end drawers */\n        MatDrawerContainer.prototype.close = function () {\n            this._drawers.forEach(function (drawer) { return drawer.close(); });\n        };\n        /**\n         * Recalculates and updates the inline styles for the content. Note that this should be used\n         * sparingly, because it causes a reflow.\n         */\n        MatDrawerContainer.prototype.updateContentMargins = function () {\n            var _this = this;\n            // 1. For drawers in `over` mode, they don't affect the content.\n            // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n            //    left margin (for left drawer) or right margin (for right the drawer).\n            // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n            //    adding to the left or right margin and simultaneously subtracting the same amount of\n            //    margin from the other side.\n            var left = 0;\n            var right = 0;\n            if (this._left && this._left.opened) {\n                if (this._left.mode == 'side') {\n                    left += this._left._width;\n                }\n                else if (this._left.mode == 'push') {\n                    var width = this._left._width;\n                    left += width;\n                    right -= width;\n                }\n            }\n            if (this._right && this._right.opened) {\n                if (this._right.mode == 'side') {\n                    right += this._right._width;\n                }\n                else if (this._right.mode == 'push') {\n                    var width = this._right._width;\n                    right += width;\n                    left -= width;\n                }\n            }\n            // If either `right` or `left` is zero, don't set a style to the element. This\n            // allows users to specify a custom size via CSS class in SSR scenarios where the\n            // measured widths will always be zero. Note that we reset to `null` here, rather\n            // than below, in order to ensure that the types in the `if` below are consistent.\n            left = left || null;\n            right = right || null;\n            if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n                this._contentMargins = { left: left, right: right };\n                // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n                // to do it only when something changed, otherwise we can end up hitting the zone too often.\n                this._ngZone.run(function () { return _this._contentMarginChanges.next(_this._contentMargins); });\n            }\n        };\n        MatDrawerContainer.prototype.ngDoCheck = function () {\n            var _this = this;\n            // If users opted into autosizing, do a check every change detection cycle.\n            if (this._autosize && this._isPushed()) {\n                // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n                this._ngZone.runOutsideAngular(function () { return _this._doCheckSubject.next(); });\n            }\n        };\n        /**\n         * Subscribes to drawer events in order to set a class on the main container element when the\n         * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n         * is properly hidden.\n         */\n        MatDrawerContainer.prototype._watchDrawerToggle = function (drawer) {\n            var _this = this;\n            drawer._animationStarted.pipe(operators.filter(function (event) { return event.fromState !== event.toState; }), operators.takeUntil(this._drawers.changes))\n                .subscribe(function (event) {\n                // Set the transition class on the container so that the animations occur. This should not\n                // be set initially because animations should only be triggered via a change in state.\n                if (event.toState !== 'open-instant' && _this._animationMode !== 'NoopAnimations') {\n                    _this._element.nativeElement.classList.add('mat-drawer-transition');\n                }\n                _this.updateContentMargins();\n                _this._changeDetectorRef.markForCheck();\n            });\n            if (drawer.mode !== 'side') {\n                drawer.openedChange.pipe(operators.takeUntil(this._drawers.changes)).subscribe(function () {\n                    return _this._setContainerClass(drawer.opened);\n                });\n            }\n        };\n        /**\n         * Subscribes to drawer onPositionChanged event in order to\n         * re-validate drawers when the position changes.\n         */\n        MatDrawerContainer.prototype._watchDrawerPosition = function (drawer) {\n            var _this = this;\n            if (!drawer) {\n                return;\n            }\n            // NOTE: We need to wait for the microtask queue to be empty before validating,\n            // since both drawers may be swapping positions at the same time.\n            drawer.onPositionChanged.pipe(operators.takeUntil(this._drawers.changes)).subscribe(function () {\n                _this._ngZone.onMicrotaskEmpty.asObservable().pipe(operators.take(1)).subscribe(function () {\n                    _this._validateDrawers();\n                });\n            });\n        };\n        /** Subscribes to changes in drawer mode so we can run change detection. */\n        MatDrawerContainer.prototype._watchDrawerMode = function (drawer) {\n            var _this = this;\n            if (drawer) {\n                drawer._modeChanged.pipe(operators.takeUntil(rxjs.merge(this._drawers.changes, this._destroyed)))\n                    .subscribe(function () {\n                    _this.updateContentMargins();\n                    _this._changeDetectorRef.markForCheck();\n                });\n            }\n        };\n        /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n        MatDrawerContainer.prototype._setContainerClass = function (isAdd) {\n            var classList = this._element.nativeElement.classList;\n            var className = 'mat-drawer-container-has-open';\n            if (isAdd) {\n                classList.add(className);\n            }\n            else {\n                classList.remove(className);\n            }\n        };\n        /** Validate the state of the drawer children components. */\n        MatDrawerContainer.prototype._validateDrawers = function () {\n            var _this = this;\n            this._start = this._end = null;\n            // Ensure that we have at most one start and one end drawer.\n            this._drawers.forEach(function (drawer) {\n                if (drawer.position == 'end') {\n                    if (_this._end != null) {\n                        throwMatDuplicatedDrawerError('end');\n                    }\n                    _this._end = drawer;\n                }\n                else {\n                    if (_this._start != null) {\n                        throwMatDuplicatedDrawerError('start');\n                    }\n                    _this._start = drawer;\n                }\n            });\n            this._right = this._left = null;\n            // Detect if we're LTR or RTL.\n            if (this._dir && this._dir.value === 'rtl') {\n                this._left = this._end;\n                this._right = this._start;\n            }\n            else {\n                this._left = this._start;\n                this._right = this._end;\n            }\n        };\n        /** Whether the container is being pushed to the side by one of the drawers. */\n        MatDrawerContainer.prototype._isPushed = function () {\n            return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n                (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n        };\n        MatDrawerContainer.prototype._onBackdropClicked = function () {\n            this.backdropClick.emit();\n            this._closeModalDrawer();\n        };\n        MatDrawerContainer.prototype._closeModalDrawer = function () {\n            var _this = this;\n            // Close all open drawers where closing is not disabled and the mode is not `side`.\n            [this._start, this._end]\n                .filter(function (drawer) { return drawer && !drawer.disableClose && _this._canHaveBackdrop(drawer); })\n                .forEach(function (drawer) { return drawer.close(); });\n        };\n        MatDrawerContainer.prototype._isShowingBackdrop = function () {\n            return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n                (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n        };\n        MatDrawerContainer.prototype._canHaveBackdrop = function (drawer) {\n            return drawer.mode !== 'side' || !!this._backdropOverride;\n        };\n        MatDrawerContainer.prototype._isDrawerOpen = function (drawer) {\n            return drawer != null && drawer.opened;\n        };\n        MatDrawerContainer.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-drawer-container',\n                        exportAs: 'matDrawerContainer',\n                        template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\",\n                        host: {\n                            'class': 'mat-drawer-container',\n                            '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None,\n                        providers: [{\n                                provide: MAT_DRAWER_CONTAINER,\n                                useExisting: MatDrawerContainer\n                            }],\n                        styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatDrawerContainer.ctorParameters = function () { return [\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: core.ElementRef },\n            { type: core.NgZone },\n            { type: core.ChangeDetectorRef },\n            { type: scrolling.ViewportRuler },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_DRAWER_DEFAULT_AUTOSIZE,] }] },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations$1.ANIMATION_MODULE_TYPE,] }] }\n        ]; };\n        MatDrawerContainer.propDecorators = {\n            _allDrawers: [{ type: core.ContentChildren, args: [MatDrawer, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }],\n            _content: [{ type: core.ContentChild, args: [MatDrawerContent,] }],\n            _userContent: [{ type: core.ViewChild, args: [MatDrawerContent,] }],\n            autosize: [{ type: core.Input }],\n            hasBackdrop: [{ type: core.Input }],\n            backdropClick: [{ type: core.Output }]\n        };\n        return MatDrawerContainer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatSidenavContent = /** @class */ (function (_super) {\n        tslib.__extends(MatSidenavContent, _super);\n        function MatSidenavContent(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n            return _super.call(this, changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) || this;\n        }\n        MatSidenavContent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-sidenav-content',\n                        template: '<ng-content></ng-content>',\n                        host: {\n                            'class': 'mat-drawer-content mat-sidenav-content',\n                            '[style.margin-left.px]': '_container._contentMargins.left',\n                            '[style.margin-right.px]': '_container._contentMargins.right',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        /** @nocollapse */\n        MatSidenavContent.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: MatSidenavContainer, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return MatSidenavContainer; }),] }] },\n            { type: core.ElementRef },\n            { type: scrolling.ScrollDispatcher },\n            { type: core.NgZone }\n        ]; };\n        return MatSidenavContent;\n    }(MatDrawerContent));\n    var MatSidenav = /** @class */ (function (_super) {\n        tslib.__extends(MatSidenav, _super);\n        function MatSidenav() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._fixedInViewport = false;\n            _this._fixedTopGap = 0;\n            _this._fixedBottomGap = 0;\n            return _this;\n        }\n        Object.defineProperty(MatSidenav.prototype, \"fixedInViewport\", {\n            /** Whether the sidenav is fixed in the viewport. */\n            get: function () { return this._fixedInViewport; },\n            set: function (value) { this._fixedInViewport = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSidenav.prototype, \"fixedTopGap\", {\n            /**\n             * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n             * mode.\n             */\n            get: function () { return this._fixedTopGap; },\n            set: function (value) { this._fixedTopGap = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSidenav.prototype, \"fixedBottomGap\", {\n            /**\n             * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n             * fixed mode.\n             */\n            get: function () { return this._fixedBottomGap; },\n            set: function (value) { this._fixedBottomGap = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        MatSidenav.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-sidenav',\n                        exportAs: 'matSidenav',\n                        template: \"<div class=\\\"mat-drawer-inner-container\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                        animations: [matDrawerAnimations.transformDrawer],\n                        host: {\n                            'class': 'mat-drawer mat-sidenav',\n                            'tabIndex': '-1',\n                            // must prevent the browser from aligning text based on value\n                            '[attr.align]': 'null',\n                            '[class.mat-drawer-end]': 'position === \"end\"',\n                            '[class.mat-drawer-over]': 'mode === \"over\"',\n                            '[class.mat-drawer-push]': 'mode === \"push\"',\n                            '[class.mat-drawer-side]': 'mode === \"side\"',\n                            '[class.mat-drawer-opened]': 'opened',\n                            '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                            '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                            '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        MatSidenav.propDecorators = {\n            fixedInViewport: [{ type: core.Input }],\n            fixedTopGap: [{ type: core.Input }],\n            fixedBottomGap: [{ type: core.Input }]\n        };\n        return MatSidenav;\n    }(MatDrawer));\n    var MatSidenavContainer = /** @class */ (function (_super) {\n        tslib.__extends(MatSidenavContainer, _super);\n        function MatSidenavContainer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatSidenavContainer.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-sidenav-container',\n                        exportAs: 'matSidenavContainer',\n                        template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable>\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\",\n                        host: {\n                            'class': 'mat-drawer-container mat-sidenav-container',\n                            '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None,\n                        providers: [{\n                                provide: MAT_DRAWER_CONTAINER,\n                                useExisting: MatSidenavContainer\n                            }],\n                        styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n                    }] }\n        ];\n        MatSidenavContainer.propDecorators = {\n            _allDrawers: [{ type: core.ContentChildren, args: [MatSidenav, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }],\n            _content: [{ type: core.ContentChild, args: [MatSidenavContent,] }]\n        };\n        return MatSidenavContainer;\n    }(MatDrawerContainer));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatSidenavModule = /** @class */ (function () {\n        function MatSidenavModule() {\n        }\n        MatSidenavModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            core$1.MatCommonModule,\n                            scrolling.ScrollingModule,\n                            platform.PlatformModule,\n                        ],\n                        exports: [\n                            core$1.MatCommonModule,\n                            MatDrawer,\n                            MatDrawerContainer,\n                            MatDrawerContent,\n                            MatSidenav,\n                            MatSidenavContainer,\n                            MatSidenavContent,\n                        ],\n                        declarations: [\n                            MatDrawer,\n                            MatDrawerContainer,\n                            MatDrawerContent,\n                            MatSidenav,\n                            MatSidenavContainer,\n                            MatSidenavContent,\n                        ],\n                    },] }\n        ];\n        return MatSidenavModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_DRAWER_DEFAULT_AUTOSIZE = MAT_DRAWER_DEFAULT_AUTOSIZE;\n    exports.MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY = MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY;\n    exports.MatDrawer = MatDrawer;\n    exports.MatDrawerContainer = MatDrawerContainer;\n    exports.MatDrawerContent = MatDrawerContent;\n    exports.MatSidenav = MatSidenav;\n    exports.MatSidenavContainer = MatSidenavContainer;\n    exports.MatSidenavContent = MatSidenavContent;\n    exports.MatSidenavModule = MatSidenavModule;\n    exports.matDrawerAnimations = matDrawerAnimations;\n    exports.throwMatDuplicatedDrawerError = throwMatDuplicatedDrawerError;\n    exports.Éµangular_material_src_material_sidenav_sidenav_a = MAT_DRAWER_CONTAINER;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-sidenav.umd.js.map\n"]}