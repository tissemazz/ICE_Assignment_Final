{"version":3,"file":"material-slider-testing.umd.js","sources":["../../../../../../../src/material/slider/testing/slider-harness.ts","../../../../../../../src/material/slider/testing/public-api.ts","../../../../../../../src/material/slider/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {SliderHarnessFilters} from './slider-harness-filters';\n\n/** Harness for interacting with a standard mat-slider in tests. */\nexport class MatSliderHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatSlider` instance. */\n  static hostSelector = 'mat-slider';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSliderHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which slider instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SliderHarnessFilters = {}): HarnessPredicate<MatSliderHarness> {\n    return new HarnessPredicate(MatSliderHarness, options);\n  }\n\n  private _textLabel = this.locatorFor('.mat-slider-thumb-label-text');\n  private _wrapper = this.locatorFor('.mat-slider-wrapper');\n\n  /** Gets the slider's id. */\n  async getId(): Promise<string|null> {\n    const id = await (await this.host()).getAttribute('id');\n    // In case no id has been specified, the \"id\" property always returns\n    // an empty string. To make this method more explicit, we return null.\n    return id !== '' ? id : null;\n  }\n\n  /**\n   * Gets the current display value of the slider. Returns a null promise if the thumb label is\n   * disabled.\n   */\n  async getDisplayValue(): Promise<string|null> {\n    const [host, textLabel] = await Promise.all([this.host(), this._textLabel()]);\n    if (await host.hasClass('mat-slider-thumb-label-showing')) {\n      return textLabel.text();\n    }\n    return null;\n  }\n\n  /** Gets the current percentage value of the slider. */\n  async getPercentage(): Promise<number> {\n    return this._calculatePercentage(await this.getValue());\n  }\n\n  /** Gets the current value of the slider. */\n  async getValue(): Promise<number> {\n    return coerceNumberProperty(await (await this.host()).getAttribute('aria-valuenow'));\n  }\n\n  /** Gets the maximum value of the slider. */\n  async getMaxValue(): Promise<number> {\n    return coerceNumberProperty(await (await this.host()).getAttribute('aria-valuemax'));\n  }\n\n  /** Gets the minimum value of the slider. */\n  async getMinValue(): Promise<number> {\n    return coerceNumberProperty(await (await this.host()).getAttribute('aria-valuemin'));\n  }\n\n  /** Whether the slider is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('aria-disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  /** Gets the orientation of the slider. */\n  async getOrientation(): Promise<'horizontal'|'vertical'> {\n    // \"aria-orientation\" will always be set to either \"horizontal\" or \"vertical\".\n    return (await this.host()).getAttribute('aria-orientation') as any;\n  }\n\n  /**\n   * Sets the value of the slider by clicking on the slider track.\n   *\n   * Note that in rare cases the value cannot be set to the exact specified value. This\n   * can happen if not every value of the slider maps to a single pixel that could be\n   * clicked using mouse interaction. In such cases consider using the keyboard to\n   * select the given value or expand the slider's size for a better user experience.\n   */\n  async setValue(value: number): Promise<void> {\n    const [sliderEl, wrapperEl, orientation] =\n        await Promise.all([this.host(), this._wrapper(), this.getOrientation()]);\n    let percentage = await this._calculatePercentage(value);\n    const {height, width} = await wrapperEl.getDimensions();\n    const isVertical = orientation === 'vertical';\n\n    // In case the slider is inverted in LTR mode or not inverted in RTL mode,\n    // we need to invert the percentage so that the proper value is set.\n    if (await sliderEl.hasClass('mat-slider-invert-mouse-coords')) {\n      percentage = 1 - percentage;\n    }\n\n    // We need to round the new coordinates because creating fake DOM\n    // events will cause the coordinates to be rounded down.\n    const relativeX = isVertical ? 0 : Math.round(width * percentage);\n    const relativeY = isVertical ? Math.round(height * percentage) : 0;\n\n    await wrapperEl.click(relativeX, relativeY);\n  }\n\n  /** Focuses the slider. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the slider. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Calculates the percentage of the given value. */\n  private async _calculatePercentage(value: number) {\n    const [min, max] = await Promise.all([this.getMinValue(), this.getMaxValue()]);\n    return (value - min) / (max - min);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slider-harness';\nexport * from './slider-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["__extends","HarnessPredicate","__read","coerceNumberProperty","coerceBooleanProperty","ComponentHarness"],"mappings":";;;;;;IAAA;;;;;;;IAYA;AACA;QAAsCA,0CAAgB;QAAtD;YAAA,qEAiHC;YAnGS,gBAAU,GAAG,KAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC;YAC7D,cAAQ,GAAG,KAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC;;SAkG3D;;;;;;;QAvGQ,qBAAI,GAAX,UAAY,OAAkC;YAAlC,wBAAA,EAAA,YAAkC;YAC5C,OAAO,IAAIC,wBAAgB,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;SACxD;;QAMK,gCAAK,GAAX;;;;;gCACoB,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;gCAAxB,qBAAM,CAAC,SAAiB,EAAE,YAAY,CAAC,IAAI,CAAC,EAAA;;4BAAjD,EAAE,GAAG,SAA4C;;;4BAGvD,sBAAO,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,IAAI,EAAC;;;;SAC9B;;;;;QAMK,0CAAe,GAArB;;;;;gCAC4B,qBAAM,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,EAAA;;4BAAvE,KAAAC,4BAAoB,SAAmD,KAAA,EAAtE,IAAI,QAAA,EAAE,SAAS,QAAA;4BAClB,qBAAM,IAAI,CAAC,QAAQ,CAAC,gCAAgC,CAAC,EAAA;;4BAAzD,IAAI,SAAqD,EAAE;gCACzD,sBAAO,SAAS,CAAC,IAAI,EAAE,EAAC;6BACzB;4BACD,sBAAO,IAAI,EAAC;;;;SACb;;QAGK,wCAAa,GAAnB;;;;;;4BACS,KAAA,IAAI,CAAC,oBAAoB,CAAA;4BAAC,qBAAM,IAAI,CAAC,QAAQ,EAAE,EAAA;gCAAtD,sBAAO,SAAA,IAAI,GAAsB,SAAqB,EAAC,EAAC;;;;SACzD;;QAGK,mCAAQ,GAAd;;;;;;4BACS,KAAAC,6BAAoB,CAAA;4BAAQ,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;gCAAxB,qBAAM,CAAC,SAAiB,EAAE,YAAY,CAAC,eAAe,CAAC,EAAA;gCAAnF,sBAAO,kBAAqB,SAAuD,EAAC,EAAC;;;;SACtF;;QAGK,sCAAW,GAAjB;;;;;;4BACS,KAAAA,6BAAoB,CAAA;4BAAQ,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;gCAAxB,qBAAM,CAAC,SAAiB,EAAE,YAAY,CAAC,eAAe,CAAC,EAAA;gCAAnF,sBAAO,kBAAqB,SAAuD,EAAC,EAAC;;;;SACtF;;QAGK,sCAAW,GAAjB;;;;;;4BACS,KAAAA,6BAAoB,CAAA;4BAAQ,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;gCAAxB,qBAAM,CAAC,SAAiB,EAAE,YAAY,CAAC,eAAe,CAAC,EAAA;gCAAnF,sBAAO,kBAAqB,SAAuD,EAAC,EAAC;;;;SACtF;;QAGK,qCAAU,GAAhB;;;;;gCACoB,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;4BAA7B,QAAQ,GAAG,CAAC,SAAiB,EAAE,YAAY,CAAC,eAAe,CAAC;4BAC3D,KAAAC,8BAAqB,CAAA;4BAAC,qBAAM,QAAQ,EAAA;gCAA3C,sBAAO,kBAAsB,SAAc,EAAC,EAAC;;;;SAC9C;;QAGK,yCAAc,GAApB;;;;gCAEU,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;;wBAAzB,sBAAO,CAAC,SAAiB,EAAE,YAAY,CAAC,kBAAkB,CAAQ,EAAC;;;;SACpE;;;;;;;;;QAUK,mCAAQ,GAAd,UAAe,KAAa;;;;;gCAEtB,qBAAM,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,EAAA;;4BADtE,KAAAF,4BACF,SAAwE,KAAA,EADrE,QAAQ,QAAA,EAAE,SAAS,QAAA,EAAE,WAAW,QAAA;4BAEtB,qBAAM,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAA;;4BAAnD,UAAU,GAAG,SAAsC;4BAC/B,qBAAM,SAAS,CAAC,aAAa,EAAE,EAAA;;4BAAjD,KAAkB,SAA+B,EAAhD,MAAM,YAAA,EAAE,KAAK,WAAA;4BACd,UAAU,GAAG,WAAW,KAAK,UAAU,CAAC;4BAI1C,qBAAM,QAAQ,CAAC,QAAQ,CAAC,gCAAgC,CAAC,EAAA;;;;4BAA7D,IAAI,SAAyD,EAAE;gCAC7D,UAAU,GAAG,CAAC,GAAG,UAAU,CAAC;6BAC7B;4BAIK,SAAS,GAAG,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC;4BAC5D,SAAS,GAAG,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;4BAEnE,qBAAM,SAAS,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,EAAA;;4BAA3C,SAA2C,CAAC;;;;;SAC7C;;QAGK,gCAAK,GAAX;;;;gCACU,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;gCAAzB,sBAAO,CAAC,SAAiB,EAAE,KAAK,EAAE,EAAC;;;;SACpC;;QAGK,+BAAI,GAAV;;;;gCACU,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;gCAAzB,sBAAO,CAAC,SAAiB,EAAE,IAAI,EAAE,EAAC;;;;SACnC;;QAGa,+CAAoB,GAAlC,UAAmC,KAAa;;;;;gCAC3B,qBAAM,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,EAAA;;4BAAxE,KAAAA,4BAAa,SAA2D,KAAA,EAAvE,GAAG,QAAA,EAAE,GAAG,QAAA;4BACf,sBAAO,CAAC,KAAK,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,EAAC;;;;SACpC;;QA9GM,6BAAY,GAAG,YAAY,CAAC;QA+GrC,uBAAC;KAAA,CAjHqCG,wBAAgB;;ICbtD;;;;;;OAMG;;ICNH;;;;;;OAMG;;;;;;;;;;;;"}