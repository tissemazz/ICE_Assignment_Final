{"version":3,"sources":["src/material/material-radio-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","radio","testing","tslib","cdk","coercion","this","MatRadioGroupHarness","_super","apply","arguments","__extends","with","options","HarnessPredicate","addOption","name","_checkRadioGroupName","prototype","getName","__awaiter","hostName","radioNames","__generator","_a","label","_getGroupNameFromHost","sent","_getNamesFromRadioButtons","length","_checkRadioNamesInGroupEqual","Error","getId","host","getProperty","getCheckedRadioButton","_b","radioButton","e_1_1","e_1","_c","_d","trys","push","getRadioButtons","__values","next","done","value","isChecked","error","return","call","getCheckedValue","checkedRadio","getValue","filter","locatorForAll","MatRadioButtonHarness","checkRadioButton","radioButtons","JSON","stringify","check","getAttribute","groupNames","radioName","e_2_1","e_2","e_3","groupName","radioNames_1","radioNames_1_1","e_3_1","harness","indexOf","hostSelector","ComponentHarness","_this","_textLabel","locatorFor","_clickLabel","_input","stringMatches","getLabelText","checked","coerceBooleanProperty","isDisabled","disabled","isRequired","required","text","focus","blur","click","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/coercion'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/radio/testing', ['exports', 'tslib', '@angular/cdk/coercion', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.radio = global.ng.material.radio || {}, global.ng.material.radio.testing = {}), global.tslib, global.ng.cdk.coercion, global.ng.cdk.testing));\n}(this, (function (exports, tslib, coercion, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-radio-group in tests. */\n    var MatRadioGroupHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatRadioGroupHarness, _super);\n        function MatRadioGroupHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatRadioGroupHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which radio group instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatRadioGroupHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatRadioGroupHarness, options)\n                .addOption('name', options.name, this._checkRadioGroupName);\n        };\n        /** Gets the name of the radio-group. */\n        MatRadioGroupHarness.prototype.getName = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var hostName, radioNames;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._getGroupNameFromHost()];\n                        case 1:\n                            hostName = _a.sent();\n                            // It's not possible to always determine the \"name\" of a radio-group by reading\n                            // the attribute. This is because the radio-group does not set the \"name\" as an\n                            // element attribute if the \"name\" value is set through a binding.\n                            if (hostName !== null) {\n                                return [2 /*return*/, hostName];\n                            }\n                            return [4 /*yield*/, this._getNamesFromRadioButtons()];\n                        case 2:\n                            radioNames = _a.sent();\n                            if (!radioNames.length) {\n                                return [2 /*return*/, null];\n                            }\n                            if (!this._checkRadioNamesInGroupEqual(radioNames)) {\n                                throw Error('Radio buttons in radio-group have mismatching names.');\n                            }\n                            return [2 /*return*/, radioNames[0]];\n                    }\n                });\n            });\n        };\n        /** Gets the id of the radio-group. */\n        MatRadioGroupHarness.prototype.getId = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getProperty('id')];\n                    }\n                });\n            });\n        };\n        /** Gets the checked radio-button in a radio-group. */\n        MatRadioGroupHarness.prototype.getCheckedRadioButton = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a, _b, radioButton, e_1_1;\n                var e_1, _c;\n                return tslib.__generator(this, function (_d) {\n                    switch (_d.label) {\n                        case 0:\n                            _d.trys.push([0, 6, 7, 8]);\n                            return [4 /*yield*/, this.getRadioButtons()];\n                        case 1:\n                            _a = tslib.__values.apply(void 0, [_d.sent()]), _b = _a.next();\n                            _d.label = 2;\n                        case 2:\n                            if (!!_b.done) return [3 /*break*/, 5];\n                            radioButton = _b.value;\n                            return [4 /*yield*/, radioButton.isChecked()];\n                        case 3:\n                            if (_d.sent()) {\n                                return [2 /*return*/, radioButton];\n                            }\n                            _d.label = 4;\n                        case 4:\n                            _b = _a.next();\n                            return [3 /*break*/, 2];\n                        case 5: return [3 /*break*/, 8];\n                        case 6:\n                            e_1_1 = _d.sent();\n                            e_1 = { error: e_1_1 };\n                            return [3 /*break*/, 8];\n                        case 7:\n                            try {\n                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                            }\n                            finally { if (e_1) throw e_1.error; }\n                            return [7 /*endfinally*/];\n                        case 8: return [2 /*return*/, null];\n                    }\n                });\n            });\n        };\n        /** Gets the checked value of the radio-group. */\n        MatRadioGroupHarness.prototype.getCheckedValue = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var checkedRadio;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.getCheckedRadioButton()];\n                        case 1:\n                            checkedRadio = _a.sent();\n                            if (!checkedRadio) {\n                                return [2 /*return*/, null];\n                            }\n                            return [2 /*return*/, checkedRadio.getValue()];\n                    }\n                });\n            });\n        };\n        /**\n         * Gets a list of radio buttons which are part of the radio-group.\n         * @param filter Optionally filters which radio buttons are included.\n         */\n        MatRadioGroupHarness.prototype.getRadioButtons = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorForAll(MatRadioButtonHarness.with(filter))()];\n                });\n            });\n        };\n        /**\n         * Checks a radio button in this group.\n         * @param filter An optional filter to apply to the child radio buttons. The first tab matching\n         *     the filter will be selected.\n         */\n        MatRadioGroupHarness.prototype.checkRadioButton = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var radioButtons;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.getRadioButtons(filter)];\n                        case 1:\n                            radioButtons = _a.sent();\n                            if (!radioButtons.length) {\n                                throw Error(\"Could not find radio button matching \" + JSON.stringify(filter));\n                            }\n                            return [2 /*return*/, radioButtons[0].check()];\n                    }\n                });\n            });\n        };\n        /** Gets the name attribute of the host element. */\n        MatRadioGroupHarness.prototype._getGroupNameFromHost = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('name')];\n                    }\n                });\n            });\n        };\n        /** Gets a list of the name attributes of all child radio buttons. */\n        MatRadioGroupHarness.prototype._getNamesFromRadioButtons = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var groupNames, _a, _b, radio, radioName, e_2_1;\n                var e_2, _c;\n                return tslib.__generator(this, function (_d) {\n                    switch (_d.label) {\n                        case 0:\n                            groupNames = [];\n                            _d.label = 1;\n                        case 1:\n                            _d.trys.push([1, 7, 8, 9]);\n                            return [4 /*yield*/, this.getRadioButtons()];\n                        case 2:\n                            _a = tslib.__values.apply(void 0, [_d.sent()]), _b = _a.next();\n                            _d.label = 3;\n                        case 3:\n                            if (!!_b.done) return [3 /*break*/, 6];\n                            radio = _b.value;\n                            return [4 /*yield*/, radio.getName()];\n                        case 4:\n                            radioName = _d.sent();\n                            if (radioName !== null) {\n                                groupNames.push(radioName);\n                            }\n                            _d.label = 5;\n                        case 5:\n                            _b = _a.next();\n                            return [3 /*break*/, 3];\n                        case 6: return [3 /*break*/, 9];\n                        case 7:\n                            e_2_1 = _d.sent();\n                            e_2 = { error: e_2_1 };\n                            return [3 /*break*/, 9];\n                        case 8:\n                            try {\n                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                            }\n                            finally { if (e_2) throw e_2.error; }\n                            return [7 /*endfinally*/];\n                        case 9: return [2 /*return*/, groupNames];\n                    }\n                });\n            });\n        };\n        /** Checks if the specified radio names are all equal. */\n        MatRadioGroupHarness.prototype._checkRadioNamesInGroupEqual = function (radioNames) {\n            var e_3, _a;\n            var groupName = null;\n            try {\n                for (var radioNames_1 = tslib.__values(radioNames), radioNames_1_1 = radioNames_1.next(); !radioNames_1_1.done; radioNames_1_1 = radioNames_1.next()) {\n                    var radioName = radioNames_1_1.value;\n                    if (groupName === null) {\n                        groupName = radioName;\n                    }\n                    else if (groupName !== radioName) {\n                        return false;\n                    }\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (radioNames_1_1 && !radioNames_1_1.done && (_a = radioNames_1.return)) _a.call(radioNames_1);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n            return true;\n        };\n        /**\n         * Checks if a radio-group harness has the given name. Throws if a radio-group with\n         * matching name could be found but has mismatching radio-button names.\n         */\n        MatRadioGroupHarness._checkRadioGroupName = function (harness, name) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var radioNames;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, harness._getGroupNameFromHost()];\n                        case 1:\n                            // Check if there is a radio-group which has the \"name\" attribute set\n                            // to the expected group name. It's not possible to always determine\n                            // the \"name\" of a radio-group by reading the attribute. This is because\n                            // the radio-group does not set the \"name\" as an element attribute if the\n                            // \"name\" value is set through a binding.\n                            if ((_a.sent()) === name) {\n                                return [2 /*return*/, true];\n                            }\n                            return [4 /*yield*/, harness._getNamesFromRadioButtons()];\n                        case 2:\n                            radioNames = _a.sent();\n                            if (radioNames.indexOf(name) === -1) {\n                                return [2 /*return*/, false];\n                            }\n                            if (!harness._checkRadioNamesInGroupEqual(radioNames)) {\n                                throw Error(\"The locator found a radio-group with name \\\"\" + name + \"\\\", but some \" +\n                                    \"radio-button's within the group have mismatching names, which is invalid.\");\n                            }\n                            return [2 /*return*/, true];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatRadioGroup` instance. */\n        MatRadioGroupHarness.hostSelector = 'mat-radio-group';\n        return MatRadioGroupHarness;\n    }(testing.ComponentHarness));\n    /** Harness for interacting with a standard mat-radio-button in tests. */\n    var MatRadioButtonHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatRadioButtonHarness, _super);\n        function MatRadioButtonHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._textLabel = _this.locatorFor('.mat-radio-label-content');\n            _this._clickLabel = _this.locatorFor('.mat-radio-label');\n            _this._input = _this.locatorFor('input');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatRadioButtonHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which radio button instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatRadioButtonHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatRadioButtonHarness, options)\n                .addOption('label', options.label, function (harness, label) { return testing.HarnessPredicate.stringMatches(harness.getLabelText(), label); })\n                .addOption('name', options.name, function (harness, name) { return tslib.__awaiter(_this, void 0, void 0, function () { return tslib.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, harness.getName()];\n                    case 1: return [2 /*return*/, (_a.sent()) === name];\n                }\n            }); }); });\n        };\n        /** Whether the radio-button is checked. */\n        MatRadioButtonHarness.prototype.isChecked = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var checked, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            checked = (_b.sent()).getProperty('checked');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, checked];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Whether the radio-button is disabled. */\n        MatRadioButtonHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var disabled, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            disabled = (_b.sent()).getAttribute('disabled');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, disabled];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Whether the radio-button is required. */\n        MatRadioButtonHarness.prototype.isRequired = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var required, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            required = (_b.sent()).getAttribute('required');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, required];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets the radio-button's name. */\n        MatRadioButtonHarness.prototype.getName = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('name')];\n                    }\n                });\n            });\n        };\n        /** Gets the radio-button's id. */\n        MatRadioButtonHarness.prototype.getId = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getProperty('id')];\n                    }\n                });\n            });\n        };\n        /**\n         * Gets the value of the radio-button. The radio-button value will be converted to a string.\n         *\n         * Note: This means that for radio-button's with an object as a value `[object Object]` is\n         * intentionally returned.\n         */\n        MatRadioButtonHarness.prototype.getValue = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getProperty('value')];\n                    }\n                });\n            });\n        };\n        /** Gets the radio-button's label text. */\n        MatRadioButtonHarness.prototype.getLabelText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._textLabel()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Focuses the radio-button. */\n        MatRadioButtonHarness.prototype.focus = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the radio-button. */\n        MatRadioButtonHarness.prototype.blur = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /**\n         * Puts the radio-button in a checked state by clicking it if it is currently unchecked,\n         * or doing nothing if it is already checked.\n         */\n        MatRadioButtonHarness.prototype.check = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isChecked()];\n                        case 1:\n                            if (!!(_a.sent())) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this._clickLabel()];\n                        case 2: return [2 /*return*/, (_a.sent()).click()];\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatRadioButton` instance. */\n        MatRadioButtonHarness.hostSelector = 'mat-radio-button';\n        return MatRadioButtonHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatRadioButtonHarness = MatRadioButtonHarness;\n    exports.MatRadioGroupHarness = MatRadioGroupHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-radio-testing.umd.js.map\n"]}