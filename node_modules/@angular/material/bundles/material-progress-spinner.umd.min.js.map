{"version":3,"sources":["src/material/material-progress-spinner.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","progressSpinner","core","common","tslib","cdk","coercion","platform","platformBrowser","animations","this","core$1","BASE_SIZE","_MatProgressSpinnerMixinBase","mixinColor","MatProgressSpinnerBase","_elementRef","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","InjectionToken","providedIn","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","diameter","MatProgressSpinner","_super","_document","animationMode","defaults","_this","call","_diameter","_value","_fallbackAnimation","mode","trackedDiameters","_diameters","has","head","set","Set","EDGE","TRIDENT","_noopAnimations","_forceAnimations","strokeWidth","__extends","Object","defineProperty","prototype","get","size","coerceNumberProperty","_styleRoot","_attachStyleNode","enumerable","configurable","_strokeWidth","value","newValue","Math","max","min","ngOnInit","element","nativeElement","_getShadowRoot","window","createShadowRoot","attachShadow","rootNode","getRootNode","ShadowRoot","classList","add","viewBox","_circleRadius","PI","_strokeCircumference","styleRoot","currentDiameter","diameters","diametersForElement","styleTag","createElement","setAttribute","textContent","_getAnimationText","appendChild","replace","WeakMap","decorators","type","Component","args","selector","exportAs","host","role","class","[class._mat-animation-noopable]","[style.width.px]","[style.height.px]","[attr.aria-valuemin]","[attr.aria-valuemax]","[attr.aria-valuenow]","[attr.mode]","inputs","template","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","styles","ctorParameters","ElementRef","Platform","undefined","Optional","Inject","DOCUMENT","String","ANIMATION_MODULE_TYPE","propDecorators","Input","MatSpinner","elementRef","document","MatProgressSpinnerModule","NgModule","imports","MatCommonModule","CommonModule","declarations"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/material/core'), require('tslib'), require('@angular/cdk/coercion'), require('@angular/cdk/platform'), require('@angular/platform-browser/animations')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/progress-spinner', ['exports', '@angular/core', '@angular/common', '@angular/material/core', 'tslib', '@angular/cdk/coercion', '@angular/cdk/platform', '@angular/platform-browser/animations'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.progressSpinner = {}), global.ng.core, global.ng.common, global.ng.material.core, global.tslib, global.ng.cdk.coercion, global.ng.cdk.platform, global.ng.platformBrowser.animations));\n}(this, (function (exports, core, common, core$1, tslib, coercion, platform, animations) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Base reference size of the spinner.\n     * @docs-private\n     */\n    var BASE_SIZE = 100;\n    /**\n     * Base reference stroke width of the spinner.\n     * @docs-private\n     */\n    var BASE_STROKE_WIDTH = 10;\n    // Boilerplate for applying mixins to MatProgressSpinner.\n    /** @docs-private */\n    var MatProgressSpinnerBase = /** @class */ (function () {\n        function MatProgressSpinnerBase(_elementRef) {\n            this._elementRef = _elementRef;\n        }\n        return MatProgressSpinnerBase;\n    }());\n    var _MatProgressSpinnerMixinBase = core$1.mixinColor(MatProgressSpinnerBase, 'primary');\n    /** Injection token to be used to override the default options for `mat-progress-spinner`. */\n    var MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new core.InjectionToken('mat-progress-spinner-default-options', {\n        providedIn: 'root',\n        factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n    /** @docs-private */\n    function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n        return { diameter: BASE_SIZE };\n    }\n    // .0001 percentage difference is necessary in order to avoid unwanted animation frames\n    // for example because the animation duration is 4 seconds, .1% accounts to 4ms\n    // which are enough to see the flicker described in\n    // https://github.com/angular/components/issues/8984\n    var INDETERMINATE_ANIMATION_TEMPLATE = \"\\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\\n\\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\\n\\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\\n\\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\\n  }\\n\";\n    /**\n     * `<mat-progress-spinner>` component.\n     */\n    var MatProgressSpinner = /** @class */ (function (_super) {\n        tslib.__extends(MatProgressSpinner, _super);\n        function MatProgressSpinner(_elementRef, platform, _document, animationMode, defaults) {\n            var _this = _super.call(this, _elementRef) || this;\n            _this._elementRef = _elementRef;\n            _this._document = _document;\n            _this._diameter = BASE_SIZE;\n            _this._value = 0;\n            _this._fallbackAnimation = false;\n            /** Mode of the progress circle */\n            _this.mode = 'determinate';\n            var trackedDiameters = MatProgressSpinner._diameters;\n            // The base size is already inserted via the component's structural styles. We still\n            // need to track it so we don't end up adding the same styles again.\n            if (!trackedDiameters.has(_document.head)) {\n                trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n            }\n            _this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n            _this._noopAnimations = animationMode === 'NoopAnimations' &&\n                (!!defaults && !defaults._forceAnimations);\n            if (defaults) {\n                if (defaults.diameter) {\n                    _this.diameter = defaults.diameter;\n                }\n                if (defaults.strokeWidth) {\n                    _this.strokeWidth = defaults.strokeWidth;\n                }\n            }\n            return _this;\n        }\n        Object.defineProperty(MatProgressSpinner.prototype, \"diameter\", {\n            /** The diameter of the progress spinner (will set width and height of svg). */\n            get: function () { return this._diameter; },\n            set: function (size) {\n                this._diameter = coercion.coerceNumberProperty(size);\n                // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n                if (!this._fallbackAnimation && this._styleRoot) {\n                    this._attachStyleNode();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatProgressSpinner.prototype, \"strokeWidth\", {\n            /** Stroke width of the progress spinner. */\n            get: function () {\n                return this._strokeWidth || this.diameter / 10;\n            },\n            set: function (value) {\n                this._strokeWidth = coercion.coerceNumberProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatProgressSpinner.prototype, \"value\", {\n            /** Value of the progress circle. */\n            get: function () {\n                return this.mode === 'determinate' ? this._value : 0;\n            },\n            set: function (newValue) {\n                this._value = Math.max(0, Math.min(100, coercion.coerceNumberProperty(newValue)));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatProgressSpinner.prototype.ngOnInit = function () {\n            var element = this._elementRef.nativeElement;\n            // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n            // Angular seems to create the element outside the shadow root and then moves it inside, if the\n            // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n            this._styleRoot = _getShadowRoot(element, this._document) || this._document.head;\n            this._attachStyleNode();\n            // On IE and Edge, we can't animate the `stroke-dashoffset`\n            // reliably so we fall back to a non-spec animation.\n            var animationClass = \"mat-progress-spinner-indeterminate\" + (this._fallbackAnimation ? '-fallback' : '') + \"-animation\";\n            element.classList.add(animationClass);\n        };\n        Object.defineProperty(MatProgressSpinner.prototype, \"_circleRadius\", {\n            /** The radius of the spinner, adjusted for stroke width. */\n            get: function () {\n                return (this.diameter - BASE_STROKE_WIDTH) / 2;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatProgressSpinner.prototype, \"_viewBox\", {\n            /** The view box of the spinner's svg element. */\n            get: function () {\n                var viewBox = this._circleRadius * 2 + this.strokeWidth;\n                return \"0 0 \" + viewBox + \" \" + viewBox;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatProgressSpinner.prototype, \"_strokeCircumference\", {\n            /** The stroke circumference of the svg circle. */\n            get: function () {\n                return 2 * Math.PI * this._circleRadius;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatProgressSpinner.prototype, \"_strokeDashOffset\", {\n            /** The dash offset of the svg circle. */\n            get: function () {\n                if (this.mode === 'determinate') {\n                    return this._strokeCircumference * (100 - this._value) / 100;\n                }\n                // In fallback mode set the circle to 80% and rotate it with CSS.\n                if (this._fallbackAnimation && this.mode === 'indeterminate') {\n                    return this._strokeCircumference * 0.2;\n                }\n                return null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatProgressSpinner.prototype, \"_circleStrokeWidth\", {\n            /** Stroke width of the circle in percent. */\n            get: function () {\n                return this.strokeWidth / this.diameter * 100;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Dynamically generates a style tag containing the correct animation for this diameter. */\n        MatProgressSpinner.prototype._attachStyleNode = function () {\n            var styleRoot = this._styleRoot;\n            var currentDiameter = this._diameter;\n            var diameters = MatProgressSpinner._diameters;\n            var diametersForElement = diameters.get(styleRoot);\n            if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n                var styleTag = this._document.createElement('style');\n                styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n                styleTag.textContent = this._getAnimationText();\n                styleRoot.appendChild(styleTag);\n                if (!diametersForElement) {\n                    diametersForElement = new Set();\n                    diameters.set(styleRoot, diametersForElement);\n                }\n                diametersForElement.add(currentDiameter);\n            }\n        };\n        /** Generates animation styles adjusted for the spinner's diameter. */\n        MatProgressSpinner.prototype._getAnimationText = function () {\n            return INDETERMINATE_ANIMATION_TEMPLATE\n                // Animation should begin at 5% and end at 80%\n                .replace(/START_VALUE/g, \"\" + 0.95 * this._strokeCircumference)\n                .replace(/END_VALUE/g, \"\" + 0.2 * this._strokeCircumference)\n                .replace(/DIAMETER/g, \"\" + this.diameter);\n        };\n        /**\n         * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n         * We need to keep track of which elements the diameters were attached to, because for\n         * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n         * than the document head.\n         */\n        MatProgressSpinner._diameters = new WeakMap();\n        MatProgressSpinner.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-progress-spinner',\n                        exportAs: 'matProgressSpinner',\n                        host: {\n                            'role': 'progressbar',\n                            'class': 'mat-progress-spinner',\n                            '[class._mat-animation-noopable]': \"_noopAnimations\",\n                            '[style.width.px]': 'diameter',\n                            '[style.height.px]': 'diameter',\n                            '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                            '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                            '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                            '[attr.mode]': 'mode',\n                        },\n                        inputs: ['color'],\n                        template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_viewBox\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n</svg>\\n\",\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None,\n                        styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatProgressSpinner.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: platform.Platform },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n        ]; };\n        MatProgressSpinner.propDecorators = {\n            diameter: [{ type: core.Input }],\n            strokeWidth: [{ type: core.Input }],\n            mode: [{ type: core.Input }],\n            value: [{ type: core.Input }]\n        };\n        return MatProgressSpinner;\n    }(_MatProgressSpinnerMixinBase));\n    /**\n     * `<mat-spinner>` component.\n     *\n     * This is a component definition to be used as a convenience reference to create an\n     * indeterminate `<mat-progress-spinner>` instance.\n     */\n    var MatSpinner = /** @class */ (function (_super) {\n        tslib.__extends(MatSpinner, _super);\n        function MatSpinner(elementRef, platform, document, animationMode, defaults) {\n            var _this = _super.call(this, elementRef, platform, document, animationMode, defaults) || this;\n            _this.mode = 'indeterminate';\n            return _this;\n        }\n        MatSpinner.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-spinner',\n                        host: {\n                            'role': 'progressbar',\n                            'mode': 'indeterminate',\n                            'class': 'mat-spinner mat-progress-spinner',\n                            '[class._mat-animation-noopable]': \"_noopAnimations\",\n                            '[style.width.px]': 'diameter',\n                            '[style.height.px]': 'diameter',\n                        },\n                        inputs: ['color'],\n                        template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_viewBox\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n</svg>\\n\",\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None,\n                        styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatSpinner.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: platform.Platform },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n        ]; };\n        return MatSpinner;\n    }(MatProgressSpinner));\n    /** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\n    function _getShadowRoot(element, _document) {\n        // TODO(crisbeto): see whether we should move this into the CDK\n        // feature detection utilities once #15616 gets merged in.\n        if (typeof window !== 'undefined') {\n            var head = _document.head;\n            // Check whether the browser supports Shadow DOM.\n            if (head && (head.createShadowRoot || head.attachShadow)) {\n                var rootNode = element.getRootNode ? element.getRootNode() : null;\n                // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n                // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n                if (rootNode instanceof window.ShadowRoot) {\n                    return rootNode;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatProgressSpinnerModule = /** @class */ (function () {\n        function MatProgressSpinnerModule() {\n        }\n        MatProgressSpinnerModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [core$1.MatCommonModule, common.CommonModule],\n                        exports: [\n                            MatProgressSpinner,\n                            MatSpinner,\n                            core$1.MatCommonModule\n                        ],\n                        declarations: [\n                            MatProgressSpinner,\n                            MatSpinner\n                        ],\n                    },] }\n        ];\n        return MatProgressSpinnerModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS;\n    exports.MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY = MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY;\n    exports.MatProgressSpinner = MatProgressSpinner;\n    exports.MatProgressSpinnerModule = MatProgressSpinnerModule;\n    exports.MatSpinner = MatSpinner;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-progress-spinner.umd.js.map\n"]}