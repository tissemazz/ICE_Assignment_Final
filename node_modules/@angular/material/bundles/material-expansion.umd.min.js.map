{"version":3,"sources":["src/material/material-expansion.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","expansion","cdk","accordion","portal","common","core","tslib","coercion","a11y","keycodes","rxjs","operators","animations","collections","platformBrowser","this","animations$1","MAT_ACCORDION","InjectionToken","matExpansionAnimations","indicatorRotate","trigger","state","style","transform","transition","animate","expansionHeaderHeight","height","params","collapsedHeight","expandedHeight","group","query","animateChild","optional","bodyExpansion","visibility","MatExpansionPanelContent","_template","decorators","type","Directive","args","selector","ctorParameters","TemplateRef","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","_super","_changeDetectorRef","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","_this","call","_hideToggle","afterExpand","EventEmitter","afterCollapse","_inputChanges","Subject","_headerId","_bodyAnimationDone","pipe","distinctUntilChanged","x","y","fromState","toState","subscribe","event","emit","hideToggle","__extends","Object","defineProperty","prototype","get","set","value","coerceBooleanProperty","enumerable","configurable","_togglePosition","togglePosition","_hasSpacing","expanded","displayMode","_getExpandedState","toggle","close","open","ngAfterContentInit","_lazyContent","opened","startWith","filter","_portal","take","TemplatePortal","ngOnChanges","changes","next","ngOnDestroy","complete","_containsFocus","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","Component","exportAs","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","inputs","outputs","providers","provide","useValue","undefined","host","class","[class.mat-expanded]","[class._mat-animation-noopable]","[class.mat-expansion-panel-spacing]","styles","Optional","SkipSelf","Inject","ChangeDetectorRef","UniqueSelectionDispatcher","ViewContainerRef","DOCUMENT","String","ANIMATION_MODULE_TYPE","propDecorators","Input","Output","ContentChild","ViewChild","CdkAccordionItem","MatExpansionPanelActionRow","MatExpansionPanelHeader","panel","_element","_focusMonitor","_parentChangeSubscription","Subscription","EMPTY","_animationsDisabled","accordionHideToggleChange","_stateChanges","merge","closed","markForCheck","focusVia","monitor","origin","_handleHeaderFocus","_animationStarted","disabled","_toggle","_isExpanded","_getPanelId","id","_getTogglePosition","_showToggle","_keydown","keyCode","SPACE","ENTER","hasModifierKey","preventDefault","_handleHeaderKeydown","focus","options","unsubscribe","stopMonitoring","role","[attr.id]","[attr.tabindex]","[attr.aria-controls]","[attr.aria-expanded]","[attr.aria-disabled]","[class.mat-expansion-toggle-indicator-after]","[class.mat-expansion-toggle-indicator-before]","(click)","(keydown)","[@.disabled]","(@expansionHeight.start)","[@expansionHeight]","Host","ElementRef","FocusMonitor","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","apply","arguments","_ownHeaders","QueryList","show","_headers","headers","reset","header","notifyOnChanges","_keyManager","FocusKeyManager","withWrap","manager","HOME","setFirstItemActive","END","setLastItemActive","onKeydown","updateActiveItem","useExisting","[class.mat-accordion-multi]","ContentChildren","descendants","CdkAccordion","MatExpansionModule","NgModule","imports","CommonModule","CdkAccordionModule","PortalModule","declarations","EXPANSION_PANEL_ANIMATION_TIMING","Éµ0"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/accordion'), require('@angular/cdk/portal'), require('@angular/common'), require('@angular/core'), require('tslib'), require('@angular/cdk/coercion'), require('@angular/cdk/a11y'), require('@angular/cdk/keycodes'), require('rxjs/operators'), require('rxjs'), require('@angular/animations'), require('@angular/cdk/collections'), require('@angular/platform-browser/animations')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/expansion', ['exports', '@angular/cdk/accordion', '@angular/cdk/portal', '@angular/common', '@angular/core', 'tslib', '@angular/cdk/coercion', '@angular/cdk/a11y', '@angular/cdk/keycodes', 'rxjs/operators', 'rxjs', '@angular/animations', '@angular/cdk/collections', '@angular/platform-browser/animations'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.expansion = {}), global.ng.cdk.accordion, global.ng.cdk.portal, global.ng.common, global.ng.core, global.tslib, global.ng.cdk.coercion, global.ng.cdk.a11y, global.ng.cdk.keycodes, global.rxjs.operators, global.rxjs, global.ng.animations, global.ng.cdk.collections, global.ng.platformBrowser.animations));\n}(this, (function (exports, accordion, portal, common, core, tslib, coercion, a11y, keycodes, operators, rxjs, animations, collections, animations$1) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n     * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n     */\n    var MAT_ACCORDION = new core.InjectionToken('MAT_ACCORDION');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Time and timing curve for expansion panel animations. */\n    var EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n    /**\n     * Animations used by the Material expansion panel.\n     *\n     * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n     * causes the animation state of moved components to become `void` upon exit, and not update again\n     * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n     * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n     *\n     * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n     * are defined to have the same styles. Since angular animates from the current styles to the\n     * destination state's style definition, in situations where we are moving from `void`'s styles to\n     * `collapsed` this acts a noop since no style values change.\n     *\n     * In the case where angular's animation state is out of sync with the expansion panel's state, the\n     * expansion panel being `expanded` and angular animations being `void`, the animation from the\n     * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n     * occur as expected.\n     *\n     * Angular Bug: https://github.com/angular/angular/issues/18847\n     *\n     * @docs-private\n     */\n    var matExpansionAnimations = {\n        /** Animation that rotates the indicator arrow. */\n        indicatorRotate: animations.trigger('indicatorRotate', [\n            animations.state('collapsed, void', animations.style({ transform: 'rotate(0deg)' })),\n            animations.state('expanded', animations.style({ transform: 'rotate(180deg)' })),\n            animations.transition('expanded <=> collapsed, void => collapsed', animations.animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n        ]),\n        /** Animation that expands and collapses the panel header height. */\n        expansionHeaderHeight: animations.trigger('expansionHeight', [\n            animations.state('collapsed, void', animations.style({\n                height: '{{collapsedHeight}}',\n            }), {\n                params: { collapsedHeight: '48px' },\n            }),\n            animations.state('expanded', animations.style({\n                height: '{{expandedHeight}}'\n            }), {\n                params: { expandedHeight: '64px' }\n            }),\n            animations.transition('expanded <=> collapsed, void => collapsed', animations.group([\n                animations.query('@indicatorRotate', animations.animateChild(), { optional: true }),\n                animations.animate(EXPANSION_PANEL_ANIMATION_TIMING),\n            ])),\n        ]),\n        /** Animation that expands and collapses the panel content. */\n        bodyExpansion: animations.trigger('bodyExpansion', [\n            animations.state('collapsed, void', animations.style({ height: '0px', visibility: 'hidden' })),\n            animations.state('expanded', animations.style({ height: '*', visibility: 'visible' })),\n            animations.transition('expanded <=> collapsed, void => collapsed', animations.animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n        ])\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Expansion panel content that will be rendered lazily\n     * after the panel is opened for the first time.\n     */\n    var MatExpansionPanelContent = /** @class */ (function () {\n        function MatExpansionPanelContent(_template) {\n            this._template = _template;\n        }\n        MatExpansionPanelContent.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'ng-template[matExpansionPanelContent]'\n                    },] }\n        ];\n        /** @nocollapse */\n        MatExpansionPanelContent.ctorParameters = function () { return [\n            { type: core.TemplateRef }\n        ]; };\n        return MatExpansionPanelContent;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Counter for generating unique element ids. */\n    var uniqueId = 0;\n    /**\n     * Injection token that can be used to configure the defalt\n     * options for the expansion panel component.\n     */\n    var MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new core.InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n    var Éµ0 = undefined;\n    /**\n     * `<mat-expansion-panel>`\n     *\n     * This component can be used as a single element to show expandable content, or as one of\n     * multiple children of an element with the MatAccordion directive attached.\n     */\n    var MatExpansionPanel = /** @class */ (function (_super) {\n        tslib.__extends(MatExpansionPanel, _super);\n        function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n            var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;\n            _this._viewContainerRef = _viewContainerRef;\n            _this._animationMode = _animationMode;\n            _this._hideToggle = false;\n            /** An event emitted after the body's expansion animation happens. */\n            _this.afterExpand = new core.EventEmitter();\n            /** An event emitted after the body's collapse animation happens. */\n            _this.afterCollapse = new core.EventEmitter();\n            /** Stream that emits for changes in `@Input` properties. */\n            _this._inputChanges = new rxjs.Subject();\n            /** ID for the associated header element. Used for a11y labelling. */\n            _this._headerId = \"mat-expansion-panel-header-\" + uniqueId++;\n            /** Stream of body animation done events. */\n            _this._bodyAnimationDone = new rxjs.Subject();\n            _this.accordion = accordion;\n            _this._document = _document;\n            // We need a Subject with distinctUntilChanged, because the `done` event\n            // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n            _this._bodyAnimationDone.pipe(operators.distinctUntilChanged(function (x, y) {\n                return x.fromState === y.fromState && x.toState === y.toState;\n            })).subscribe(function (event) {\n                if (event.fromState !== 'void') {\n                    if (event.toState === 'expanded') {\n                        _this.afterExpand.emit();\n                    }\n                    else if (event.toState === 'collapsed') {\n                        _this.afterCollapse.emit();\n                    }\n                }\n            });\n            if (defaultOptions) {\n                _this.hideToggle = defaultOptions.hideToggle;\n            }\n            return _this;\n        }\n        Object.defineProperty(MatExpansionPanel.prototype, \"hideToggle\", {\n            /** Whether the toggle indicator should be hidden. */\n            get: function () {\n                return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n            },\n            set: function (value) {\n                this._hideToggle = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatExpansionPanel.prototype, \"togglePosition\", {\n            /** The position of the expansion indicator. */\n            get: function () {\n                return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n            },\n            set: function (value) {\n                this._togglePosition = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Determines whether the expansion panel should have spacing between it and its siblings. */\n        MatExpansionPanel.prototype._hasSpacing = function () {\n            if (this.accordion) {\n                return this.expanded && this.accordion.displayMode === 'default';\n            }\n            return false;\n        };\n        /** Gets the expanded state string. */\n        MatExpansionPanel.prototype._getExpandedState = function () {\n            return this.expanded ? 'expanded' : 'collapsed';\n        };\n        /** Toggles the expanded state of the expansion panel. */\n        MatExpansionPanel.prototype.toggle = function () {\n            this.expanded = !this.expanded;\n        };\n        /** Sets the expanded state of the expansion panel to false. */\n        MatExpansionPanel.prototype.close = function () {\n            this.expanded = false;\n        };\n        /** Sets the expanded state of the expansion panel to true. */\n        MatExpansionPanel.prototype.open = function () {\n            this.expanded = true;\n        };\n        MatExpansionPanel.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            if (this._lazyContent) {\n                // Render the content as soon as the panel becomes open.\n                this.opened.pipe(operators.startWith(null), operators.filter(function () { return _this.expanded && !_this._portal; }), operators.take(1)).subscribe(function () {\n                    _this._portal = new portal.TemplatePortal(_this._lazyContent._template, _this._viewContainerRef);\n                });\n            }\n        };\n        MatExpansionPanel.prototype.ngOnChanges = function (changes) {\n            this._inputChanges.next(changes);\n        };\n        MatExpansionPanel.prototype.ngOnDestroy = function () {\n            _super.prototype.ngOnDestroy.call(this);\n            this._bodyAnimationDone.complete();\n            this._inputChanges.complete();\n        };\n        /** Checks whether the expansion panel's content contains the currently-focused element. */\n        MatExpansionPanel.prototype._containsFocus = function () {\n            if (this._body) {\n                var focusedElement = this._document.activeElement;\n                var bodyElement = this._body.nativeElement;\n                return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n            }\n            return false;\n        };\n        MatExpansionPanel.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-expansion-panel',\n                        exportAs: 'matExpansionPanel',\n                        template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        inputs: ['disabled', 'expanded'],\n                        outputs: ['opened', 'closed', 'expandedChange'],\n                        animations: [matExpansionAnimations.bodyExpansion],\n                        providers: [\n                            // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                            // to the same accordion.\n                            { provide: MAT_ACCORDION, useValue: Éµ0 },\n                        ],\n                        host: {\n                            'class': 'mat-expansion-panel',\n                            '[class.mat-expanded]': 'expanded',\n                            '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                            '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                        },\n                        styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatExpansionPanel.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.SkipSelf }, { type: core.Inject, args: [MAT_ACCORDION,] }] },\n            { type: core.ChangeDetectorRef },\n            { type: collections.UniqueSelectionDispatcher },\n            { type: core.ViewContainerRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations$1.ANIMATION_MODULE_TYPE,] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: core.Optional }] }\n        ]; };\n        MatExpansionPanel.propDecorators = {\n            hideToggle: [{ type: core.Input }],\n            togglePosition: [{ type: core.Input }],\n            afterExpand: [{ type: core.Output }],\n            afterCollapse: [{ type: core.Output }],\n            _lazyContent: [{ type: core.ContentChild, args: [MatExpansionPanelContent,] }],\n            _body: [{ type: core.ViewChild, args: ['body',] }]\n        };\n        return MatExpansionPanel;\n    }(accordion.CdkAccordionItem));\n    var MatExpansionPanelActionRow = /** @class */ (function () {\n        function MatExpansionPanelActionRow() {\n        }\n        MatExpansionPanelActionRow.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-action-row',\n                        host: {\n                            class: 'mat-action-row'\n                        }\n                    },] }\n        ];\n        return MatExpansionPanelActionRow;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * `<mat-expansion-panel-header>`\n     *\n     * This component corresponds to the header element of an `<mat-expansion-panel>`.\n     */\n    var MatExpansionPanelHeader = /** @class */ (function () {\n        function MatExpansionPanelHeader(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions) {\n            var _this = this;\n            this.panel = panel;\n            this._element = _element;\n            this._focusMonitor = _focusMonitor;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._parentChangeSubscription = rxjs.Subscription.EMPTY;\n            /** Whether Angular animations in the panel header should be disabled. */\n            this._animationsDisabled = true;\n            var accordionHideToggleChange = panel.accordion ?\n                panel.accordion._stateChanges.pipe(operators.filter(function (changes) { return !!(changes['hideToggle'] || changes['togglePosition']); })) :\n                rxjs.EMPTY;\n            // Since the toggle state depends on an @Input on the panel, we\n            // need to subscribe and trigger change detection manually.\n            this._parentChangeSubscription =\n                rxjs.merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(operators.filter(function (changes) {\n                    return !!(changes['hideToggle'] ||\n                        changes['disabled'] ||\n                        changes['togglePosition']);\n                })))\n                    .subscribe(function () { return _this._changeDetectorRef.markForCheck(); });\n            // Avoids focus being lost if the panel contained the focused element and was closed.\n            panel.closed\n                .pipe(operators.filter(function () { return panel._containsFocus(); }))\n                .subscribe(function () { return _focusMonitor.focusVia(_element, 'program'); });\n            _focusMonitor.monitor(_element).subscribe(function (origin) {\n                if (origin && panel.accordion) {\n                    panel.accordion._handleHeaderFocus(_this);\n                }\n            });\n            if (defaultOptions) {\n                this.expandedHeight = defaultOptions.expandedHeight;\n                this.collapsedHeight = defaultOptions.collapsedHeight;\n            }\n        }\n        MatExpansionPanelHeader.prototype._animationStarted = function () {\n            // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n            // there to work around a bug in Angular (see #13088), however this introduces a different\n            // issue. The new transition will cause the header to animate in on init (see #16067), if the\n            // consumer has set a header height that is different from the default one. We work around it\n            // by disabling animations on the header and re-enabling them after the first animation has run.\n            // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n            // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n            // for https://github.com/angular/angular/issues/18847 to be resolved.\n            this._animationsDisabled = false;\n        };\n        Object.defineProperty(MatExpansionPanelHeader.prototype, \"disabled\", {\n            /**\n             * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n             * @docs-private\n             */\n            get: function () {\n                return this.panel.disabled;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Toggles the expanded state of the panel. */\n        MatExpansionPanelHeader.prototype._toggle = function () {\n            if (!this.disabled) {\n                this.panel.toggle();\n            }\n        };\n        /** Gets whether the panel is expanded. */\n        MatExpansionPanelHeader.prototype._isExpanded = function () {\n            return this.panel.expanded;\n        };\n        /** Gets the expanded state string of the panel. */\n        MatExpansionPanelHeader.prototype._getExpandedState = function () {\n            return this.panel._getExpandedState();\n        };\n        /** Gets the panel id. */\n        MatExpansionPanelHeader.prototype._getPanelId = function () {\n            return this.panel.id;\n        };\n        /** Gets the toggle position for the header. */\n        MatExpansionPanelHeader.prototype._getTogglePosition = function () {\n            return this.panel.togglePosition;\n        };\n        /** Gets whether the expand indicator should be shown. */\n        MatExpansionPanelHeader.prototype._showToggle = function () {\n            return !this.panel.hideToggle && !this.panel.disabled;\n        };\n        /** Handle keydown event calling to toggle() if appropriate. */\n        MatExpansionPanelHeader.prototype._keydown = function (event) {\n            switch (event.keyCode) {\n                // Toggle for space and enter keys.\n                case keycodes.SPACE:\n                case keycodes.ENTER:\n                    if (!keycodes.hasModifierKey(event)) {\n                        event.preventDefault();\n                        this._toggle();\n                    }\n                    break;\n                default:\n                    if (this.panel.accordion) {\n                        this.panel.accordion._handleHeaderKeydown(event);\n                    }\n                    return;\n            }\n        };\n        /**\n         * Focuses the panel header. Implemented as a part of `FocusableOption`.\n         * @param origin Origin of the action that triggered the focus.\n         * @docs-private\n         */\n        MatExpansionPanelHeader.prototype.focus = function (origin, options) {\n            if (origin === void 0) { origin = 'program'; }\n            this._focusMonitor.focusVia(this._element, origin, options);\n        };\n        MatExpansionPanelHeader.prototype.ngOnDestroy = function () {\n            this._parentChangeSubscription.unsubscribe();\n            this._focusMonitor.stopMonitoring(this._element);\n        };\n        MatExpansionPanelHeader.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-expansion-panel-header',\n                        template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        animations: [\n                            matExpansionAnimations.indicatorRotate,\n                            matExpansionAnimations.expansionHeaderHeight\n                        ],\n                        host: {\n                            'class': 'mat-expansion-panel-header',\n                            'role': 'button',\n                            '[attr.id]': 'panel._headerId',\n                            '[attr.tabindex]': 'disabled ? -1 : 0',\n                            '[attr.aria-controls]': '_getPanelId()',\n                            '[attr.aria-expanded]': '_isExpanded()',\n                            '[attr.aria-disabled]': 'panel.disabled',\n                            '[class.mat-expanded]': '_isExpanded()',\n                            '[class.mat-expansion-toggle-indicator-after]': \"_getTogglePosition() === 'after'\",\n                            '[class.mat-expansion-toggle-indicator-before]': \"_getTogglePosition() === 'before'\",\n                            '(click)': '_toggle()',\n                            '(keydown)': '_keydown($event)',\n                            '[@.disabled]': '_animationsDisabled',\n                            '(@expansionHeight.start)': '_animationStarted()',\n                            '[@expansionHeight]': \"{\\n        value: _getExpandedState(),\\n        params: {\\n          collapsedHeight: collapsedHeight,\\n          expandedHeight: expandedHeight\\n        }\\n    }\",\n                        },\n                        styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatExpansionPanelHeader.ctorParameters = function () { return [\n            { type: MatExpansionPanel, decorators: [{ type: core.Host }] },\n            { type: core.ElementRef },\n            { type: a11y.FocusMonitor },\n            { type: core.ChangeDetectorRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: core.Optional }] }\n        ]; };\n        MatExpansionPanelHeader.propDecorators = {\n            expandedHeight: [{ type: core.Input }],\n            collapsedHeight: [{ type: core.Input }]\n        };\n        return MatExpansionPanelHeader;\n    }());\n    /**\n     * `<mat-panel-description>`\n     *\n     * This directive is to be used inside of the MatExpansionPanelHeader component.\n     */\n    var MatExpansionPanelDescription = /** @class */ (function () {\n        function MatExpansionPanelDescription() {\n        }\n        MatExpansionPanelDescription.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-panel-description',\n                        host: {\n                            class: 'mat-expansion-panel-header-description'\n                        }\n                    },] }\n        ];\n        return MatExpansionPanelDescription;\n    }());\n    /**\n     * `<mat-panel-title>`\n     *\n     * This directive is to be used inside of the MatExpansionPanelHeader component.\n     */\n    var MatExpansionPanelTitle = /** @class */ (function () {\n        function MatExpansionPanelTitle() {\n        }\n        MatExpansionPanelTitle.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-panel-title',\n                        host: {\n                            class: 'mat-expansion-panel-header-title'\n                        }\n                    },] }\n        ];\n        return MatExpansionPanelTitle;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Directive for a Material Design Accordion.\n     */\n    var MatAccordion = /** @class */ (function (_super) {\n        tslib.__extends(MatAccordion, _super);\n        function MatAccordion() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            /** Headers belonging to this accordion. */\n            _this._ownHeaders = new core.QueryList();\n            _this._hideToggle = false;\n            /**\n             * Display mode used for all expansion panels in the accordion. Currently two display\n             * modes exist:\n             *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n             *     panel at a different elevation from the rest of the accordion.\n             *  flat - no spacing is placed around expanded panels, showing all panels at the same\n             *     elevation.\n             */\n            _this.displayMode = 'default';\n            /** The position of the expansion indicator. */\n            _this.togglePosition = 'after';\n            return _this;\n        }\n        Object.defineProperty(MatAccordion.prototype, \"hideToggle\", {\n            /** Whether the expansion indicator should be hidden. */\n            get: function () { return this._hideToggle; },\n            set: function (show) { this._hideToggle = coercion.coerceBooleanProperty(show); },\n            enumerable: true,\n            configurable: true\n        });\n        MatAccordion.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._headers.changes\n                .pipe(operators.startWith(this._headers))\n                .subscribe(function (headers) {\n                _this._ownHeaders.reset(headers.filter(function (header) { return header.panel.accordion === _this; }));\n                _this._ownHeaders.notifyOnChanges();\n            });\n            this._keyManager = new a11y.FocusKeyManager(this._ownHeaders).withWrap();\n        };\n        /** Handles keyboard events coming in from the panel headers. */\n        MatAccordion.prototype._handleHeaderKeydown = function (event) {\n            var keyCode = event.keyCode;\n            var manager = this._keyManager;\n            if (keyCode === keycodes.HOME) {\n                if (!keycodes.hasModifierKey(event)) {\n                    manager.setFirstItemActive();\n                    event.preventDefault();\n                }\n            }\n            else if (keyCode === keycodes.END) {\n                if (!keycodes.hasModifierKey(event)) {\n                    manager.setLastItemActive();\n                    event.preventDefault();\n                }\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n        };\n        MatAccordion.prototype._handleHeaderFocus = function (header) {\n            this._keyManager.updateActiveItem(header);\n        };\n        MatAccordion.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-accordion',\n                        exportAs: 'matAccordion',\n                        inputs: ['multi'],\n                        providers: [{\n                                provide: MAT_ACCORDION,\n                                useExisting: MatAccordion\n                            }],\n                        host: {\n                            class: 'mat-accordion',\n                            // Class binding which is only used by the test harness as there is no other\n                            // way for the harness to detect if multiple panel support is enabled.\n                            '[class.mat-accordion-multi]': 'this.multi',\n                        }\n                    },] }\n        ];\n        MatAccordion.propDecorators = {\n            _headers: [{ type: core.ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],\n            hideToggle: [{ type: core.Input }],\n            displayMode: [{ type: core.Input }],\n            togglePosition: [{ type: core.Input }]\n        };\n        return MatAccordion;\n    }(accordion.CdkAccordion));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatExpansionModule = /** @class */ (function () {\n        function MatExpansionModule() {\n        }\n        MatExpansionModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule, accordion.CdkAccordionModule, portal.PortalModule],\n                        exports: [\n                            MatAccordion,\n                            MatExpansionPanel,\n                            MatExpansionPanelActionRow,\n                            MatExpansionPanelHeader,\n                            MatExpansionPanelTitle,\n                            MatExpansionPanelDescription,\n                            MatExpansionPanelContent,\n                        ],\n                        declarations: [\n                            MatAccordion,\n                            MatExpansionPanel,\n                            MatExpansionPanelActionRow,\n                            MatExpansionPanelHeader,\n                            MatExpansionPanelTitle,\n                            MatExpansionPanelDescription,\n                            MatExpansionPanelContent,\n                        ],\n                    },] }\n        ];\n        return MatExpansionModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.EXPANSION_PANEL_ANIMATION_TIMING = EXPANSION_PANEL_ANIMATION_TIMING;\n    exports.MAT_ACCORDION = MAT_ACCORDION;\n    exports.MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = MAT_EXPANSION_PANEL_DEFAULT_OPTIONS;\n    exports.MatAccordion = MatAccordion;\n    exports.MatExpansionModule = MatExpansionModule;\n    exports.MatExpansionPanel = MatExpansionPanel;\n    exports.MatExpansionPanelActionRow = MatExpansionPanelActionRow;\n    exports.MatExpansionPanelContent = MatExpansionPanelContent;\n    exports.MatExpansionPanelDescription = MatExpansionPanelDescription;\n    exports.MatExpansionPanelHeader = MatExpansionPanelHeader;\n    exports.MatExpansionPanelTitle = MatExpansionPanelTitle;\n    exports.matExpansionAnimations = matExpansionAnimations;\n    exports.Éµ0 = Éµ0;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-expansion.umd.js.map\n"]}