{"version":3,"sources":["src/material/material-sort.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","sort","core","tslib","cdk","coercion","a11y","rxjs","animations","common","this","i0","MatSort","_super","_this","apply","arguments","sortables","Map","_stateChanges","Subject","start","_direction","sortChange","EventEmitter","__extends","Object","defineProperty","prototype","get","set","direction","isDevMode","getSortInvalidDirectionError","Error","enumerable","configurable","_disableClear","v","coerceBooleanProperty","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","active","getNextSortDirection","emit","sortDirectionCycle","getSortDirectionCycle","disableClear","sortOrder","reverse","push","nextDirectionIndex","indexOf","length","ngOnInit","_markInitialized","ngOnChanges","next","ngOnDestroy","complete","decorators","type","Directive","args","selector","exportAs","host","class","inputs","propDecorators","Input","Output","mixinInitialized","mixinDisabled","MatSortBase","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","trigger","state","style","transform","transition","animate","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","MatSortHeaderIntl","changes","sortButtonLabel","Injectable","providedIn","ɵprov","ɵɵdefineInjectable","MatSortHeaderIntl_Factory","token","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","parentIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","MatSortHeader","_intl","changeDetectorRef","_sort","_columnDef","_focusMonitor","_elementRef","call","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","merge","subscribe","_isSorted","_updateArrowDirection","_viewState","toState","_setAnimationTransitionState","fromState","markForCheck","monitor","origin","_setIndicatorHintVisible","name","stopMonitoring","unsubscribe","visible","_isDisabled","viewState","_handleClick","_getArrowDirectionState","_getArrowViewState","disabled","_getAriaSortAttribute","_renderArrow","Component","template","(click)","(mouseenter)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","ctorParameters","ChangeDetectorRef","undefined","Inject","FocusMonitor","ElementRef","MatSortHeaderBase","MatSortModule","NgModule","imports","CommonModule","declarations","providers","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('tslib'), require('@angular/cdk/coercion'), require('@angular/material/core'), require('@angular/cdk/a11y'), require('rxjs'), require('@angular/animations'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/sort', ['exports', '@angular/core', 'tslib', '@angular/cdk/coercion', '@angular/material/core', '@angular/cdk/a11y', 'rxjs', '@angular/animations', '@angular/common'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.sort = {}), global.ng.core, global.tslib, global.ng.cdk.coercion, global.ng.material.core, global.ng.cdk.a11y, global.rxjs, global.ng.animations, global.ng.common));\n}(this, (function (exports, i0, tslib, coercion, core, a11y, rxjs, animations, common) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** @docs-private */\n    function getSortDuplicateSortableIdError(id) {\n        return Error(\"Cannot have two MatSortables with the same id (\" + id + \").\");\n    }\n    /** @docs-private */\n    function getSortHeaderNotContainedWithinSortError() {\n        return Error(\"MatSortHeader must be placed within a parent element with the MatSort directive.\");\n    }\n    /** @docs-private */\n    function getSortHeaderMissingIdError() {\n        return Error(\"MatSortHeader must be provided with a unique id.\");\n    }\n    /** @docs-private */\n    function getSortInvalidDirectionError(direction) {\n        return Error(direction + \" is not a valid sort direction ('asc' or 'desc').\");\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Boilerplate for applying mixins to MatSort.\n    /** @docs-private */\n    var MatSortBase = /** @class */ (function () {\n        function MatSortBase() {\n        }\n        return MatSortBase;\n    }());\n    var _MatSortMixinBase = core.mixinInitialized(core.mixinDisabled(MatSortBase));\n    /** Container for MatSortables to manage the sort state and provide default sort parameters. */\n    var MatSort = /** @class */ (function (_super) {\n        tslib.__extends(MatSort, _super);\n        function MatSort() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            /** Collection of all registered sortables that this directive manages. */\n            _this.sortables = new Map();\n            /** Used to notify any child components listening to state changes. */\n            _this._stateChanges = new rxjs.Subject();\n            /**\n             * The direction to set when an MatSortable is initially sorted.\n             * May be overriden by the MatSortable's sort start.\n             */\n            _this.start = 'asc';\n            _this._direction = '';\n            /** Event emitted when the user changes either the active sort or sort direction. */\n            _this.sortChange = new i0.EventEmitter();\n            return _this;\n        }\n        Object.defineProperty(MatSort.prototype, \"direction\", {\n            /** The sort direction of the currently active MatSortable. */\n            get: function () { return this._direction; },\n            set: function (direction) {\n                if (i0.isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n                    throw getSortInvalidDirectionError(direction);\n                }\n                this._direction = direction;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSort.prototype, \"disableClear\", {\n            /**\n             * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n             * May be overriden by the MatSortable's disable clear input.\n             */\n            get: function () { return this._disableClear; },\n            set: function (v) { this._disableClear = coercion.coerceBooleanProperty(v); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n         * collection of MatSortables.\n         */\n        MatSort.prototype.register = function (sortable) {\n            if (!sortable.id) {\n                throw getSortHeaderMissingIdError();\n            }\n            if (this.sortables.has(sortable.id)) {\n                throw getSortDuplicateSortableIdError(sortable.id);\n            }\n            this.sortables.set(sortable.id, sortable);\n        };\n        /**\n         * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n         * collection of contained MatSortables.\n         */\n        MatSort.prototype.deregister = function (sortable) {\n            this.sortables.delete(sortable.id);\n        };\n        /** Sets the active sort id and determines the new sort direction. */\n        MatSort.prototype.sort = function (sortable) {\n            if (this.active != sortable.id) {\n                this.active = sortable.id;\n                this.direction = sortable.start ? sortable.start : this.start;\n            }\n            else {\n                this.direction = this.getNextSortDirection(sortable);\n            }\n            this.sortChange.emit({ active: this.active, direction: this.direction });\n        };\n        /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n        MatSort.prototype.getNextSortDirection = function (sortable) {\n            if (!sortable) {\n                return '';\n            }\n            // Get the sort direction cycle with the potential sortable overrides.\n            var disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n            var sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n            // Get and return the next direction in the cycle\n            var nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n            if (nextDirectionIndex >= sortDirectionCycle.length) {\n                nextDirectionIndex = 0;\n            }\n            return sortDirectionCycle[nextDirectionIndex];\n        };\n        MatSort.prototype.ngOnInit = function () {\n            this._markInitialized();\n        };\n        MatSort.prototype.ngOnChanges = function () {\n            this._stateChanges.next();\n        };\n        MatSort.prototype.ngOnDestroy = function () {\n            this._stateChanges.complete();\n        };\n        MatSort.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[matSort]',\n                        exportAs: 'matSort',\n                        host: { 'class': 'mat-sort' },\n                        inputs: ['disabled: matSortDisabled']\n                    },] }\n        ];\n        MatSort.propDecorators = {\n            active: [{ type: i0.Input, args: ['matSortActive',] }],\n            start: [{ type: i0.Input, args: ['matSortStart',] }],\n            direction: [{ type: i0.Input, args: ['matSortDirection',] }],\n            disableClear: [{ type: i0.Input, args: ['matSortDisableClear',] }],\n            sortChange: [{ type: i0.Output, args: ['matSortChange',] }]\n        };\n        return MatSort;\n    }(_MatSortMixinBase));\n    /** Returns the sort direction cycle to use given the provided parameters of order and clear. */\n    function getSortDirectionCycle(start, disableClear) {\n        var sortOrder = ['asc', 'desc'];\n        if (start == 'desc') {\n            sortOrder.reverse();\n        }\n        if (!disableClear) {\n            sortOrder.push('');\n        }\n        return sortOrder;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var SORT_ANIMATION_TRANSITION = core.AnimationDurations.ENTERING + ' ' +\n        core.AnimationCurves.STANDARD_CURVE;\n    /**\n     * Animations used by MatSort.\n     * @docs-private\n     */\n    var matSortAnimations = {\n        /** Animation that moves the sort indicator. */\n        indicator: animations.trigger('indicator', [\n            animations.state('active-asc, asc', animations.style({ transform: 'translateY(0px)' })),\n            // 10px is the height of the sort indicator, minus the width of the pointers\n            animations.state('active-desc, desc', animations.style({ transform: 'translateY(10px)' })),\n            animations.transition('active-asc <=> active-desc', animations.animate(SORT_ANIMATION_TRANSITION))\n        ]),\n        /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n        leftPointer: animations.trigger('leftPointer', [\n            animations.state('active-asc, asc', animations.style({ transform: 'rotate(-45deg)' })),\n            animations.state('active-desc, desc', animations.style({ transform: 'rotate(45deg)' })),\n            animations.transition('active-asc <=> active-desc', animations.animate(SORT_ANIMATION_TRANSITION))\n        ]),\n        /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n        rightPointer: animations.trigger('rightPointer', [\n            animations.state('active-asc, asc', animations.style({ transform: 'rotate(45deg)' })),\n            animations.state('active-desc, desc', animations.style({ transform: 'rotate(-45deg)' })),\n            animations.transition('active-asc <=> active-desc', animations.animate(SORT_ANIMATION_TRANSITION))\n        ]),\n        /** Animation that controls the arrow opacity. */\n        arrowOpacity: animations.trigger('arrowOpacity', [\n            animations.state('desc-to-active, asc-to-active, active', animations.style({ opacity: 1 })),\n            animations.state('desc-to-hint, asc-to-hint, hint', animations.style({ opacity: .54 })),\n            animations.state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', animations.style({ opacity: 0 })),\n            // Transition between all states except for immediate transitions\n            animations.transition('* => asc, * => desc, * => active, * => hint, * => void', animations.animate('0ms')),\n            animations.transition('* <=> *', animations.animate(SORT_ANIMATION_TRANSITION)),\n        ]),\n        /**\n         * Animation for the translation of the arrow as a whole. States are separated into two\n         * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n         * peek, and active. The other states define a specific animation (source-to-destination)\n         * and are determined as a function of their prev user-perceived state and what the next state\n         * should be.\n         */\n        arrowPosition: animations.trigger('arrowPosition', [\n            // Hidden Above => Hint Center\n            animations.transition('* => desc-to-hint, * => desc-to-active', animations.animate(SORT_ANIMATION_TRANSITION, animations.keyframes([\n                animations.style({ transform: 'translateY(-25%)' }),\n                animations.style({ transform: 'translateY(0)' })\n            ]))),\n            // Hint Center => Hidden Below\n            animations.transition('* => hint-to-desc, * => active-to-desc', animations.animate(SORT_ANIMATION_TRANSITION, animations.keyframes([\n                animations.style({ transform: 'translateY(0)' }),\n                animations.style({ transform: 'translateY(25%)' })\n            ]))),\n            // Hidden Below => Hint Center\n            animations.transition('* => asc-to-hint, * => asc-to-active', animations.animate(SORT_ANIMATION_TRANSITION, animations.keyframes([\n                animations.style({ transform: 'translateY(25%)' }),\n                animations.style({ transform: 'translateY(0)' })\n            ]))),\n            // Hint Center => Hidden Above\n            animations.transition('* => hint-to-asc, * => active-to-asc', animations.animate(SORT_ANIMATION_TRANSITION, animations.keyframes([\n                animations.style({ transform: 'translateY(0)' }),\n                animations.style({ transform: 'translateY(-25%)' })\n            ]))),\n            animations.state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', animations.style({ transform: 'translateY(0)' })),\n            animations.state('hint-to-desc, active-to-desc, desc', animations.style({ transform: 'translateY(-25%)' })),\n            animations.state('hint-to-asc, active-to-asc, asc', animations.style({ transform: 'translateY(25%)' })),\n        ]),\n        /** Necessary trigger that calls animate on children animations. */\n        allowChildren: animations.trigger('allowChildren', [\n            animations.transition('* <=> *', [\n                animations.query('@*', animations.animateChild(), { optional: true })\n            ])\n        ]),\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n     * include it in a custom provider.\n     */\n    var MatSortHeaderIntl = /** @class */ (function () {\n        function MatSortHeaderIntl() {\n            /**\n             * Stream that emits whenever the labels here are changed. Use this to notify\n             * components if the labels have changed after initialization.\n             */\n            this.changes = new rxjs.Subject();\n            /** ARIA label for the sorting button. */\n            this.sortButtonLabel = function (id) {\n                return \"Change sorting for \" + id;\n            };\n        }\n        MatSortHeaderIntl.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        MatSortHeaderIntl.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\n        return MatSortHeaderIntl;\n    }());\n    /** @docs-private */\n    function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n        return parentIntl || new MatSortHeaderIntl();\n    }\n    /** @docs-private */\n    var MAT_SORT_HEADER_INTL_PROVIDER = {\n        // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n        provide: MatSortHeaderIntl,\n        deps: [[new i0.Optional(), new i0.SkipSelf(), MatSortHeaderIntl]],\n        useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Boilerplate for applying mixins to the sort header.\n    /** @docs-private */\n    var MatSortHeaderBase = /** @class */ (function () {\n        function MatSortHeaderBase() {\n        }\n        return MatSortHeaderBase;\n    }());\n    var _MatSortHeaderMixinBase = core.mixinDisabled(MatSortHeaderBase);\n    /**\n     * Applies sorting behavior (click to change sort) and styles to an element, including an\n     * arrow to display the current sort direction.\n     *\n     * Must be provided with an id and contained within a parent MatSort directive.\n     *\n     * If used on header cells in a CdkTable, it will automatically default its id from its containing\n     * column definition.\n     */\n    var MatSortHeader = /** @class */ (function (_super) {\n        tslib.__extends(MatSortHeader, _super);\n        function MatSortHeader(_intl, changeDetectorRef, _sort, _columnDef, \n        /**\n         * @deprecated _focusMonitor and _elementRef to become required parameters.\n         * @breaking-change 10.0.0\n         */\n        _focusMonitor, _elementRef) {\n            var _this = \n            // Note that we use a string token for the `_columnDef`, because the value is provided both by\n            // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n            // and we want to avoid having the sort header depending on the CDK table because\n            // of this single reference.\n            _super.call(this) || this;\n            _this._intl = _intl;\n            _this._sort = _sort;\n            _this._columnDef = _columnDef;\n            _this._focusMonitor = _focusMonitor;\n            _this._elementRef = _elementRef;\n            /**\n             * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n             * provide an affordance that the header is sortable by showing on focus and hover.\n             */\n            _this._showIndicatorHint = false;\n            /** The direction the arrow should be facing according to the current state. */\n            _this._arrowDirection = '';\n            /**\n             * Whether the view state animation should show the transition between the `from` and `to` states.\n             */\n            _this._disableViewStateAnimation = false;\n            /** Sets the position of the arrow that displays when sorted. */\n            _this.arrowPosition = 'after';\n            if (!_sort) {\n                throw getSortHeaderNotContainedWithinSortError();\n            }\n            _this._rerenderSubscription = rxjs.merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n                .subscribe(function () {\n                if (_this._isSorted()) {\n                    _this._updateArrowDirection();\n                }\n                // If this header was recently active and now no longer sorted, animate away the arrow.\n                if (!_this._isSorted() && _this._viewState && _this._viewState.toState === 'active') {\n                    _this._disableViewStateAnimation = false;\n                    _this._setAnimationTransitionState({ fromState: 'active', toState: _this._arrowDirection });\n                }\n                changeDetectorRef.markForCheck();\n            });\n            if (_focusMonitor && _elementRef) {\n                // We use the focus monitor because we also want to style\n                // things differently based on the focus origin.\n                _focusMonitor.monitor(_elementRef, true)\n                    .subscribe(function (origin) { return _this._setIndicatorHintVisible(!!origin); });\n            }\n            return _this;\n        }\n        Object.defineProperty(MatSortHeader.prototype, \"disableClear\", {\n            /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n            get: function () { return this._disableClear; },\n            set: function (v) { this._disableClear = coercion.coerceBooleanProperty(v); },\n            enumerable: true,\n            configurable: true\n        });\n        MatSortHeader.prototype.ngOnInit = function () {\n            if (!this.id && this._columnDef) {\n                this.id = this._columnDef.name;\n            }\n            // Initialize the direction of the arrow and set the view state to be immediately that state.\n            this._updateArrowDirection();\n            this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\n            this._sort.register(this);\n        };\n        MatSortHeader.prototype.ngOnDestroy = function () {\n            // @breaking-change 10.0.0 Remove null check for _focusMonitor and _elementRef.\n            if (this._focusMonitor && this._elementRef) {\n                this._focusMonitor.stopMonitoring(this._elementRef);\n            }\n            this._sort.deregister(this);\n            this._rerenderSubscription.unsubscribe();\n        };\n        /**\n         * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n         * user showing what the active sort will become. If set to false, the arrow will fade away.\n         */\n        MatSortHeader.prototype._setIndicatorHintVisible = function (visible) {\n            // No-op if the sort header is disabled - should not make the hint visible.\n            if (this._isDisabled() && visible) {\n                return;\n            }\n            this._showIndicatorHint = visible;\n            if (!this._isSorted()) {\n                this._updateArrowDirection();\n                if (this._showIndicatorHint) {\n                    this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n                }\n                else {\n                    this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n                }\n            }\n        };\n        /**\n         * Sets the animation transition view state for the arrow's position and opacity. If the\n         * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n         * no animation appears.\n         */\n        MatSortHeader.prototype._setAnimationTransitionState = function (viewState) {\n            this._viewState = viewState;\n            // If the animation for arrow position state (opacity/translation) should be disabled,\n            // remove the fromState so that it jumps right to the toState.\n            if (this._disableViewStateAnimation) {\n                this._viewState = { toState: viewState.toState };\n            }\n        };\n        /** Triggers the sort on this sort header and removes the indicator hint. */\n        MatSortHeader.prototype._handleClick = function () {\n            if (this._isDisabled()) {\n                return;\n            }\n            this._sort.sort(this);\n            // Do not show the animation if the header was already shown in the right position.\n            if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = true;\n            }\n            // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n            // the direction it is facing.\n            var viewState = this._isSorted() ?\n                { fromState: this._arrowDirection, toState: 'active' } :\n                { fromState: 'active', toState: this._arrowDirection };\n            this._setAnimationTransitionState(viewState);\n            this._showIndicatorHint = false;\n        };\n        /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n        MatSortHeader.prototype._isSorted = function () {\n            return this._sort.active == this.id &&\n                (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n        };\n        /** Returns the animation state for the arrow direction (indicator and pointers). */\n        MatSortHeader.prototype._getArrowDirectionState = function () {\n            return \"\" + (this._isSorted() ? 'active-' : '') + this._arrowDirection;\n        };\n        /** Returns the arrow position state (opacity, translation). */\n        MatSortHeader.prototype._getArrowViewState = function () {\n            var fromState = this._viewState.fromState;\n            return (fromState ? fromState + \"-to-\" : '') + this._viewState.toState;\n        };\n        /**\n         * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n         * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n         * active sorted direction. The reason this is updated through a function is because the direction\n         * should only be changed at specific times - when deactivated but the hint is displayed and when\n         * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n         * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n         * preserving its direction, even though the next sort direction is actually different and should\n         * only be changed once the arrow displays again (hint or activation).\n         */\n        MatSortHeader.prototype._updateArrowDirection = function () {\n            this._arrowDirection = this._isSorted() ?\n                this._sort.direction :\n                (this.start || this._sort.start);\n        };\n        MatSortHeader.prototype._isDisabled = function () {\n            return this._sort.disabled || this.disabled;\n        };\n        /**\n         * Gets the aria-sort attribute that should be applied to this sort header. If this header\n         * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n         * says that the aria-sort property should only be present on one header at a time, so removing\n         * ensures this is true.\n         */\n        MatSortHeader.prototype._getAriaSortAttribute = function () {\n            if (!this._isSorted()) {\n                return null;\n            }\n            return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n        };\n        /** Whether the arrow inside the sort header should be rendered. */\n        MatSortHeader.prototype._renderArrow = function () {\n            return !this._isDisabled() || this._isSorted();\n        };\n        MatSortHeader.decorators = [\n            { type: i0.Component, args: [{\n                        selector: '[mat-sort-header]',\n                        exportAs: 'matSortHeader',\n                        template: \"<div class=\\\"mat-sort-header-container\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\">\\n  <button class=\\\"mat-sort-header-button mat-focus-indicator\\\" type=\\\"button\\\"\\n          [attr.disabled]=\\\"_isDisabled() || null\\\"\\n          [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\">\\n    <ng-content></ng-content>\\n  </button>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\",\n                        host: {\n                            'class': 'mat-sort-header',\n                            '(click)': '_handleClick()',\n                            '(mouseenter)': '_setIndicatorHintVisible(true)',\n                            '(mouseleave)': '_setIndicatorHintVisible(false)',\n                            '[attr.aria-sort]': '_getAriaSortAttribute()',\n                            '[class.mat-sort-header-disabled]': '_isDisabled()',\n                        },\n                        encapsulation: i0.ViewEncapsulation.None,\n                        changeDetection: i0.ChangeDetectionStrategy.OnPush,\n                        inputs: ['disabled'],\n                        animations: [\n                            matSortAnimations.indicator,\n                            matSortAnimations.leftPointer,\n                            matSortAnimations.rightPointer,\n                            matSortAnimations.arrowOpacity,\n                            matSortAnimations.arrowPosition,\n                            matSortAnimations.allowChildren,\n                        ],\n                        styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor;position:relative}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-button,[mat-sort-header].cdk-program-focused .mat-sort-header-button{border-bottom:solid 1px currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatSortHeader.ctorParameters = function () { return [\n            { type: MatSortHeaderIntl },\n            { type: i0.ChangeDetectorRef },\n            { type: MatSort, decorators: [{ type: i0.Optional }] },\n            { type: undefined, decorators: [{ type: i0.Inject, args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: i0.Optional }] },\n            { type: a11y.FocusMonitor },\n            { type: i0.ElementRef }\n        ]; };\n        MatSortHeader.propDecorators = {\n            id: [{ type: i0.Input, args: ['mat-sort-header',] }],\n            arrowPosition: [{ type: i0.Input }],\n            start: [{ type: i0.Input }],\n            disableClear: [{ type: i0.Input }]\n        };\n        return MatSortHeader;\n    }(_MatSortHeaderMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatSortModule = /** @class */ (function () {\n        function MatSortModule() {\n        }\n        MatSortModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [common.CommonModule],\n                        exports: [MatSort, MatSortHeader],\n                        declarations: [MatSort, MatSortHeader],\n                        providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n                    },] }\n        ];\n        return MatSortModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_SORT_HEADER_INTL_PROVIDER = MAT_SORT_HEADER_INTL_PROVIDER;\n    exports.MAT_SORT_HEADER_INTL_PROVIDER_FACTORY = MAT_SORT_HEADER_INTL_PROVIDER_FACTORY;\n    exports.MatSort = MatSort;\n    exports.MatSortHeader = MatSortHeader;\n    exports.MatSortHeaderIntl = MatSortHeaderIntl;\n    exports.MatSortModule = MatSortModule;\n    exports.matSortAnimations = matSortAnimations;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-sort.umd.js.map\n"]}