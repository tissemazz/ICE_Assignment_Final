{"version":3,"file":"material-core-testing.umd.js","sources":["../../../../../../../src/material/core/testing/option-harness.ts","../../../../../../../src/material/core/testing/optgroup-harness.ts","../../../../../../../src/material/core/testing/public-api.ts","../../../../../../../src/material/core/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {OptionHarnessFilters} from './option-harness-filters';\n\n/** Harness for interacting with a `mat-option` in tests. */\nexport class MatOptionHarness extends ComponentHarness {\n  /** Selector used to locate option instances. */\n  static hostSelector = '.mat-option';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatOptionsHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which option instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: OptionHarnessFilters = {}) {\n    return new HarnessPredicate(MatOptionHarness, options)\n        .addOption('text', options.text,\n            async (harness, title) =>\n                HarnessPredicate.stringMatches(await harness.getText(), title))\n        .addOption('isSelected', options.isSelected,\n            async (harness, isSelected) => await harness.isSelected() === isSelected);\n\n  }\n\n  /** Clicks the option. */\n  async click(): Promise<void> {\n    return (await this.host()).click();\n  }\n\n  /** Gets the option's label text. */\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Gets whether the option is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-option-disabled');\n  }\n\n  /** Gets whether the option is selected. */\n  async isSelected(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-selected');\n  }\n\n  /** Gets whether the option is active. */\n  async isActive(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-active');\n  }\n\n  /** Gets whether the option is in multiple selection mode. */\n  async isMultiple(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-option-multiple');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {OptgroupHarnessFilters} from './optgroup-harness-filters';\nimport {MatOptionHarness} from './option-harness';\nimport {OptionHarnessFilters} from './option-harness-filters';\n\n/** Harness for interacting with a `mat-optgroup` in tests. */\nexport class MatOptgroupHarness extends ComponentHarness {\n  /** Selector used to locate option group instances. */\n  static hostSelector = '.mat-optgroup';\n  private _label = this.locatorFor('.mat-optgroup-label');\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatOptgroupHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which option instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: OptgroupHarnessFilters = {}) {\n    return new HarnessPredicate(MatOptgroupHarness, options)\n        .addOption('labelText', options.labelText,\n            async (harness, title) =>\n                HarnessPredicate.stringMatches(await harness.getLabelText(), title));\n  }\n\n  /** Gets the option group's label text. */\n  async getLabelText(): Promise<string> {\n    return (await this._label()).text();\n  }\n\n  /** Gets whether the option group is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-optgroup-disabled');\n  }\n\n  /**\n   * Gets the options that are inside the group.\n   * @param filter Optionally filters which options are included.\n   */\n  async getOptions(filter: OptionHarnessFilters = {}): Promise<MatOptionHarness[]> {\n    return this.locatorForAll(MatOptionHarness.with(filter))();\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './option-harness';\nexport * from './option-harness-filters';\nexport * from './optgroup-harness';\nexport * from './optgroup-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["__extends","HarnessPredicate","ComponentHarness"],"mappings":"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"}