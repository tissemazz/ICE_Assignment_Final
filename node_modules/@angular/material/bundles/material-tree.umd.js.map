{"version":3,"file":"material-tree.umd.js","sources":["../../../../../../src/material/tree/node.ts","../../../../../../src/material/tree/padding.ts","../../../../../../src/material/tree/outlet.ts","../../../../../../src/material/tree/tree.ts","../../../../../../src/material/tree/toggle.ts","../../../../../../src/material/tree/tree-module.ts","../../../../../../src/material/tree/data-source/flat-data-source.ts","../../../../../../src/material/tree/data-source/nested-data-source.ts","../../../../../../src/material/tree/public-api.ts","../../../../../../src/material/tree/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends CdkNestedTreeNode<T> implements AfterContentInit,\n  OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** Whether the node is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /** Tabindex for the node. */\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  private _tabIndex: number;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]',\n  providers: [{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }]\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.changed,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nexport * from './node';\nexport * from './padding';\nexport * from './tree';\nexport * from './tree-module';\nexport * from './toggle';\nexport * from './outlet';\nexport * from './data-source/flat-data-source';\nexport * from './data-source/nested-data-source';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["mixinTabIndex","mixinDisabled","CdkTreeNode","__extends","Directive","ElementRef","CdkTree","Attribute","Input","CdkTreeNodeDef","coerceBooleanProperty","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","IterableDiffers","CdkTreeNodePadding","CdkTreeNodeOutlet","ViewContainerRef","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","CdkTreeNodeToggle","NgModule","CdkTreeModule","MatCommonModule","take","BehaviorSubject","merge","map","DataSource"],"mappings":"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"}