{"version":3,"sources":["src/material/material-core-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","core","testing","tslib","cdk","this","MatOptionHarness","_super","apply","arguments","__extends","with","options","_this","HarnessPredicate","addOption","text","harness","title","__awaiter","_a","_b","__generator","_c","label","stringMatches","getText","sent","isSelected","prototype","click","host","isDisabled","hasClass","isActive","isMultiple","hostSelector","ComponentHarness","MatOptgroupHarness","_label","locatorFor","labelText","getLabelText","getOptions","filter","locatorForAll","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/core/testing', ['exports', 'tslib', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.core = global.ng.material.core || {}, global.ng.material.core.testing = {}), global.tslib, global.ng.cdk.testing));\n}(this, (function (exports, tslib, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a `mat-option` in tests. */\n    var MatOptionHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatOptionHarness, _super);\n        function MatOptionHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatOptionsHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which option instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatOptionHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatOptionHarness, options)\n                .addOption('text', options.text, function (harness, title) { return tslib.__awaiter(_this, void 0, void 0, function () { var _a, _b; return tslib.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _b = (_a = testing.HarnessPredicate).stringMatches;\n                        return [4 /*yield*/, harness.getText()];\n                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(), title])];\n                }\n            }); }); })\n                .addOption('isSelected', options.isSelected, function (harness, isSelected) { return tslib.__awaiter(_this, void 0, void 0, function () { return tslib.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, harness.isSelected()];\n                    case 1: return [2 /*return*/, (_a.sent()) === isSelected];\n                }\n            }); }); });\n        };\n        /** Clicks the option. */\n        MatOptionHarness.prototype.click = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).click()];\n                    }\n                });\n            });\n        };\n        /** Gets the option's label text. */\n        MatOptionHarness.prototype.getText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Gets whether the option is disabled. */\n        MatOptionHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-option-disabled')];\n                    }\n                });\n            });\n        };\n        /** Gets whether the option is selected. */\n        MatOptionHarness.prototype.isSelected = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-selected')];\n                    }\n                });\n            });\n        };\n        /** Gets whether the option is active. */\n        MatOptionHarness.prototype.isActive = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-active')];\n                    }\n                });\n            });\n        };\n        /** Gets whether the option is in multiple selection mode. */\n        MatOptionHarness.prototype.isMultiple = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-option-multiple')];\n                    }\n                });\n            });\n        };\n        /** Selector used to locate option instances. */\n        MatOptionHarness.hostSelector = '.mat-option';\n        return MatOptionHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a `mat-optgroup` in tests. */\n    var MatOptgroupHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatOptgroupHarness, _super);\n        function MatOptgroupHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._label = _this.locatorFor('.mat-optgroup-label');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatOptgroupHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which option instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatOptgroupHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatOptgroupHarness, options)\n                .addOption('labelText', options.labelText, function (harness, title) { return tslib.__awaiter(_this, void 0, void 0, function () { var _a, _b; return tslib.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _b = (_a = testing.HarnessPredicate).stringMatches;\n                        return [4 /*yield*/, harness.getLabelText()];\n                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(), title])];\n                }\n            }); }); });\n        };\n        /** Gets the option group's label text. */\n        MatOptgroupHarness.prototype.getLabelText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._label()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Gets whether the option group is disabled. */\n        MatOptgroupHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-optgroup-disabled')];\n                    }\n                });\n            });\n        };\n        /**\n         * Gets the options that are inside the group.\n         * @param filter Optionally filters which options are included.\n         */\n        MatOptgroupHarness.prototype.getOptions = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorForAll(MatOptionHarness.with(filter))()];\n                });\n            });\n        };\n        /** Selector used to locate option group instances. */\n        MatOptgroupHarness.hostSelector = '.mat-optgroup';\n        return MatOptgroupHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatOptgroupHarness = MatOptgroupHarness;\n    exports.MatOptionHarness = MatOptionHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-core-testing.umd.js.map\n"]}