{"version":3,"sources":["src/material/material-snack-bar-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","snackBar","testing","tslib","cdk","this","MatSnackBarHarness","_super","_this","apply","arguments","_simpleSnackBar","locatorForOptional","_simpleSnackBarMessage","locatorFor","_simpleSnackBarActionButton","__extends","with","options","HarnessPredicate","prototype","getRole","__awaiter","__generator","_a","label","host","sent","getAttribute","hasAction","_assertSimpleSnackBar","getActionDescription","_assertSimpleSnackBarWithAction","text","dismissWithAction","click","getMessage","_isSimpleSnackBar","Error","hostSelector","ComponentHarness","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/snack-bar/testing', ['exports', 'tslib', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.snackBar = global.ng.material.snackBar || {}, global.ng.material.snackBar.testing = {}), global.tslib, global.ng.cdk.testing));\n}(this, (function (exports, tslib, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-snack-bar in tests. */\n    var MatSnackBarHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatSnackBarHarness, _super);\n        function MatSnackBarHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._simpleSnackBar = _this.locatorForOptional('.mat-simple-snackbar');\n            _this._simpleSnackBarMessage = _this.locatorFor('.mat-simple-snackbar > span');\n            _this._simpleSnackBarActionButton = _this.locatorForOptional('.mat-simple-snackbar-action > button');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatSnackBarHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which snack bar instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatSnackBarHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatSnackBarHarness, options);\n        };\n        /**\n         * Gets the role of the snack-bar. The role of a snack-bar is determined based\n         * on the ARIA politeness specified in the snack-bar config.\n         */\n        MatSnackBarHarness.prototype.getRole = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('role')];\n                    }\n                });\n            });\n        };\n        /**\n         * Whether the snack-bar has an action. Method cannot be used for snack-bar's with custom content.\n         */\n        MatSnackBarHarness.prototype.hasAction = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._assertSimpleSnackBar()];\n                        case 1:\n                            _a.sent();\n                            return [4 /*yield*/, this._simpleSnackBarActionButton()];\n                        case 2: return [2 /*return*/, (_a.sent()) !== null];\n                    }\n                });\n            });\n        };\n        /**\n         * Gets the description of the snack-bar. Method cannot be used for snack-bar's without action or\n         * with custom content.\n         */\n        MatSnackBarHarness.prototype.getActionDescription = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._assertSimpleSnackBarWithAction()];\n                        case 1:\n                            _a.sent();\n                            return [4 /*yield*/, this._simpleSnackBarActionButton()];\n                        case 2: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /**\n         * Dismisses the snack-bar by clicking the action button. Method cannot be used for snack-bar's\n         * without action or with custom content.\n         */\n        MatSnackBarHarness.prototype.dismissWithAction = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._assertSimpleSnackBarWithAction()];\n                        case 1:\n                            _a.sent();\n                            return [4 /*yield*/, this._simpleSnackBarActionButton()];\n                        case 2: return [4 /*yield*/, (_a.sent()).click()];\n                        case 3:\n                            _a.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * Gets the message of the snack-bar. Method cannot be used for snack-bar's with custom content.\n         */\n        MatSnackBarHarness.prototype.getMessage = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._assertSimpleSnackBar()];\n                        case 1:\n                            _a.sent();\n                            return [4 /*yield*/, this._simpleSnackBarMessage()];\n                        case 2: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /**\n         * Asserts that the current snack-bar does not use custom content. Promise rejects if\n         * custom content is used.\n         */\n        MatSnackBarHarness.prototype._assertSimpleSnackBar = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._isSimpleSnackBar()];\n                        case 1:\n                            if (!(_a.sent())) {\n                                throw new Error('Method cannot be used for snack-bar with custom content.');\n                            }\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * Asserts that the current snack-bar does not use custom content and has\n         * an action defined. Otherwise the promise will reject.\n         */\n        MatSnackBarHarness.prototype._assertSimpleSnackBarWithAction = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._assertSimpleSnackBar()];\n                        case 1:\n                            _a.sent();\n                            return [4 /*yield*/, this.hasAction()];\n                        case 2:\n                            if (!(_a.sent())) {\n                                throw new Error('Method cannot be used for standard snack-bar without action.');\n                            }\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** Whether the snack-bar is using the default content template. */\n        MatSnackBarHarness.prototype._isSimpleSnackBar = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._simpleSnackBar()];\n                        case 1: return [2 /*return*/, (_a.sent()) !== null];\n                    }\n                });\n            });\n        };\n        // Developers can provide a custom component or template for the\n        // snackbar. The canonical snack-bar parent is the \"MatSnackBarContainer\".\n        /** The selector for the host element of a `MatSnackBar` instance. */\n        MatSnackBarHarness.hostSelector = '.mat-snack-bar-container';\n        return MatSnackBarHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatSnackBarHarness = MatSnackBarHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-snack-bar-testing.umd.js.map\n"]}