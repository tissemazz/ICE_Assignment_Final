{"version":3,"sources":["src/material/material-table-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","table","testing","tslib","cdk","this","MatCellHarness","_super","apply","arguments","__extends","with","options","getCellPredicate","prototype","getText","__awaiter","__generator","_a","label","host","sent","text","getColumnName","classAttribute","name_1","getAttribute","split","map","c","trim","find","startsWith","Error","hostSelector","ComponentHarness","MatHeaderCellHarness","MatFooterCellHarness","type","HarnessPredicate","addOption","harness","stringMatches","MatRowHarness","getCells","filter","locatorForAll","getCellTextByIndex","getCellTextByColumnName","MatHeaderRowHarness","MatFooterRowHarness","cells","Promise","all","cell","output","forEach","_b","__read","MatTableHarness","getHeaderRows","getRows","getFooterRows","rows","row","footerRows","dataRows","headerData","footerData","_c","data","Object","keys","columnName","cellText","headerText","getCellTextsByColumn","footerText","push","rowsData","column","columnTexts","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/table/testing', ['exports', 'tslib', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.table = global.ng.material.table || {}, global.ng.material.table.testing = {}), global.tslib, global.ng.cdk.testing));\n}(this, (function (exports, tslib, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard Angular Material table cell. */\n    var MatCellHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatCellHarness, _super);\n        function MatCellHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a table cell with specific attributes.\n         * @param options Options for narrowing the search\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatCellHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return getCellPredicate(MatCellHarness, options);\n        };\n        /** Gets the cell's text. */\n        MatCellHarness.prototype.getText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Gets the name of the column that the cell belongs to. */\n        MatCellHarness.prototype.getColumnName = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var host, classAttribute, prefix_1, name_1;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            host = _a.sent();\n                            return [4 /*yield*/, host.getAttribute('class')];\n                        case 2:\n                            classAttribute = _a.sent();\n                            if (classAttribute) {\n                                prefix_1 = 'mat-column-';\n                                name_1 = classAttribute.split(' ').map(function (c) { return c.trim(); }).find(function (c) { return c.startsWith(prefix_1); });\n                                if (name_1) {\n                                    return [2 /*return*/, name_1.split(prefix_1)[1]];\n                                }\n                            }\n                            throw Error('Could not determine column name of cell.');\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatCellHarness` instance. */\n        MatCellHarness.hostSelector = '.mat-cell';\n        return MatCellHarness;\n    }(testing.ComponentHarness));\n    /** Harness for interacting with a standard Angular Material table header cell. */\n    var MatHeaderCellHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatHeaderCellHarness, _super);\n        function MatHeaderCellHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for\n         * a table header cell with specific attributes.\n         * @param options Options for narrowing the search\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatHeaderCellHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return getCellPredicate(MatHeaderCellHarness, options);\n        };\n        /** The selector for the host element of a `MatHeaderCellHarness` instance. */\n        MatHeaderCellHarness.hostSelector = '.mat-header-cell';\n        return MatHeaderCellHarness;\n    }(MatCellHarness));\n    /** Harness for interacting with a standard Angular Material table footer cell. */\n    var MatFooterCellHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatFooterCellHarness, _super);\n        function MatFooterCellHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for\n         * a table footer cell with specific attributes.\n         * @param options Options for narrowing the search\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatFooterCellHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return getCellPredicate(MatFooterCellHarness, options);\n        };\n        /** The selector for the host element of a `MatFooterCellHarness` instance. */\n        MatFooterCellHarness.hostSelector = '.mat-footer-cell';\n        return MatFooterCellHarness;\n    }(MatCellHarness));\n    function getCellPredicate(type, options) {\n        return new testing.HarnessPredicate(type, options)\n            .addOption('text', options.text, function (harness, text) { return testing.HarnessPredicate.stringMatches(harness.getText(), text); });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard Angular Material table row. */\n    var MatRowHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatRowHarness, _super);\n        function MatRowHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a table row with specific attributes.\n         * @param options Options for narrowing the search\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatRowHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatRowHarness, options);\n        };\n        /** Gets a list of `MatCellHarness` for all cells in the row. */\n        MatRowHarness.prototype.getCells = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorForAll(MatCellHarness.with(filter))()];\n                });\n            });\n        };\n        /** Gets the text of the cells in the row. */\n        MatRowHarness.prototype.getCellTextByIndex = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, getCellTextByIndex(this, filter)];\n                });\n            });\n        };\n        /** Gets the text inside the row organized by columns. */\n        MatRowHarness.prototype.getCellTextByColumnName = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, getCellTextByColumnName(this)];\n                });\n            });\n        };\n        /** The selector for the host element of a `MatRowHarness` instance. */\n        MatRowHarness.hostSelector = '.mat-row';\n        return MatRowHarness;\n    }(testing.ComponentHarness));\n    /** Harness for interacting with a standard Angular Material table header row. */\n    var MatHeaderRowHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatHeaderRowHarness, _super);\n        function MatHeaderRowHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for\n         * a table header row with specific attributes.\n         * @param options Options for narrowing the search\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatHeaderRowHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatHeaderRowHarness, options);\n        };\n        /** Gets a list of `MatHeaderCellHarness` for all cells in the row. */\n        MatHeaderRowHarness.prototype.getCells = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorForAll(MatHeaderCellHarness.with(filter))()];\n                });\n            });\n        };\n        /** Gets the text of the cells in the header row. */\n        MatHeaderRowHarness.prototype.getCellTextByIndex = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, getCellTextByIndex(this, filter)];\n                });\n            });\n        };\n        /** Gets the text inside the header row organized by columns. */\n        MatHeaderRowHarness.prototype.getCellTextByColumnName = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, getCellTextByColumnName(this)];\n                });\n            });\n        };\n        /** The selector for the host element of a `MatHeaderRowHarness` instance. */\n        MatHeaderRowHarness.hostSelector = '.mat-header-row';\n        return MatHeaderRowHarness;\n    }(testing.ComponentHarness));\n    /** Harness for interacting with a standard Angular Material table footer row. */\n    var MatFooterRowHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatFooterRowHarness, _super);\n        function MatFooterRowHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for\n         * a table footer row cell with specific attributes.\n         * @param options Options for narrowing the search\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatFooterRowHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatFooterRowHarness, options);\n        };\n        /** Gets a list of `MatFooterCellHarness` for all cells in the row. */\n        MatFooterRowHarness.prototype.getCells = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorForAll(MatFooterCellHarness.with(filter))()];\n                });\n            });\n        };\n        /** Gets the text of the cells in the footer row. */\n        MatFooterRowHarness.prototype.getCellTextByIndex = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, getCellTextByIndex(this, filter)];\n                });\n            });\n        };\n        /** Gets the text inside the footer row organized by columns. */\n        MatFooterRowHarness.prototype.getCellTextByColumnName = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, getCellTextByColumnName(this)];\n                });\n            });\n        };\n        /** The selector for the host element of a `MatFooterRowHarness` instance. */\n        MatFooterRowHarness.hostSelector = '.mat-footer-row';\n        return MatFooterRowHarness;\n    }(testing.ComponentHarness));\n    function getCellTextByIndex(harness, filter) {\n        return tslib.__awaiter(this, void 0, void 0, function () {\n            var cells;\n            return tslib.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, harness.getCells(filter)];\n                    case 1:\n                        cells = _a.sent();\n                        return [2 /*return*/, Promise.all(cells.map(function (cell) { return cell.getText(); }))];\n                }\n            });\n        });\n    }\n    function getCellTextByColumnName(harness) {\n        return tslib.__awaiter(this, void 0, void 0, function () {\n            var output, cells, cellsData;\n            return tslib.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        output = {};\n                        return [4 /*yield*/, harness.getCells()];\n                    case 1:\n                        cells = _a.sent();\n                        return [4 /*yield*/, Promise.all(cells.map(function (cell) {\n                                return Promise.all([cell.getColumnName(), cell.getText()]);\n                            }))];\n                    case 2:\n                        cellsData = _a.sent();\n                        cellsData.forEach(function (_a) {\n                            var _b = tslib.__read(_a, 2), columnName = _b[0], text = _b[1];\n                            return output[columnName] = text;\n                        });\n                        return [2 /*return*/, output];\n                }\n            });\n        });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-table in tests. */\n    var MatTableHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatTableHarness, _super);\n        function MatTableHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a table with specific attributes.\n         * @param options Options for narrowing the search\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatTableHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatTableHarness, options);\n        };\n        /** Gets all of the header rows in a table. */\n        MatTableHarness.prototype.getHeaderRows = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorForAll(MatHeaderRowHarness.with(filter))()];\n                });\n            });\n        };\n        /** Gets all of the regular data rows in a table. */\n        MatTableHarness.prototype.getRows = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorForAll(MatRowHarness.with(filter))()];\n                });\n            });\n        };\n        /** Gets all of the footer rows in a table. */\n        MatTableHarness.prototype.getFooterRows = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorForAll(MatFooterRowHarness.with(filter))()];\n                });\n            });\n        };\n        /** Gets the text inside the entire table organized by rows. */\n        MatTableHarness.prototype.getCellTextByIndex = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var rows;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.getRows()];\n                        case 1:\n                            rows = _a.sent();\n                            return [2 /*return*/, Promise.all(rows.map(function (row) { return row.getCellTextByIndex(); }))];\n                    }\n                });\n            });\n        };\n        /** Gets the text inside the entire table organized by columns. */\n        MatTableHarness.prototype.getCellTextByColumnName = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a, headerRows, footerRows, dataRows, text, _b, headerData, footerData, rowsData;\n                return tslib.__generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0: return [4 /*yield*/, Promise.all([\n                                this.getHeaderRows(),\n                                this.getFooterRows(),\n                                this.getRows()\n                            ])];\n                        case 1:\n                            _a = tslib.__read.apply(void 0, [_c.sent(), 3]), headerRows = _a[0], footerRows = _a[1], dataRows = _a[2];\n                            text = {};\n                            return [4 /*yield*/, Promise.all([\n                                    Promise.all(headerRows.map(function (row) { return row.getCellTextByColumnName(); })),\n                                    Promise.all(footerRows.map(function (row) { return row.getCellTextByColumnName(); })),\n                                    Promise.all(dataRows.map(function (row) { return row.getCellTextByColumnName(); })),\n                                ])];\n                        case 2:\n                            _b = tslib.__read.apply(void 0, [_c.sent(), 3]), headerData = _b[0], footerData = _b[1], rowsData = _b[2];\n                            rowsData.forEach(function (data) {\n                                Object.keys(data).forEach(function (columnName) {\n                                    var cellText = data[columnName];\n                                    if (!text[columnName]) {\n                                        text[columnName] = {\n                                            headerText: getCellTextsByColumn(headerData, columnName),\n                                            footerText: getCellTextsByColumn(footerData, columnName),\n                                            text: []\n                                        };\n                                    }\n                                    text[columnName].text.push(cellText);\n                                });\n                            });\n                            return [2 /*return*/, text];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatTableHarness` instance. */\n        MatTableHarness.hostSelector = '.mat-table';\n        return MatTableHarness;\n    }(testing.ComponentHarness));\n    /** Extracts the text of cells only under a particular column. */\n    function getCellTextsByColumn(rowsData, column) {\n        var columnTexts = [];\n        rowsData.forEach(function (data) {\n            Object.keys(data).forEach(function (columnName) {\n                if (columnName === column) {\n                    columnTexts.push(data[columnName]);\n                }\n            });\n        });\n        return columnTexts;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatCellHarness = MatCellHarness;\n    exports.MatFooterCellHarness = MatFooterCellHarness;\n    exports.MatFooterRowHarness = MatFooterRowHarness;\n    exports.MatHeaderCellHarness = MatHeaderCellHarness;\n    exports.MatHeaderRowHarness = MatHeaderRowHarness;\n    exports.MatRowHarness = MatRowHarness;\n    exports.MatTableHarness = MatTableHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-table-testing.umd.js.map\n"]}