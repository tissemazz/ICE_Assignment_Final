{"version":3,"sources":["src/material/material-dialog-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","dialog","testing","tslib","cdk","this","MatDialogHarness","_super","apply","arguments","__extends","with","options","HarnessPredicate","prototype","getId","__awaiter","id","__generator","_a","label","host","sent","getAttribute","getRole","getAriaLabel","getAriaLabelledby","getAriaDescribedby","close","sendKeys","TestKey","ESCAPE","hostSelector","ComponentHarness","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/dialog/testing', ['exports', 'tslib', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.dialog = global.ng.material.dialog || {}, global.ng.material.dialog.testing = {}), global.tslib, global.ng.cdk.testing));\n}(this, (function (exports, tslib, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard `MatDialog` in tests. */\n    var MatDialogHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatDialogHarness, _super);\n        function MatDialogHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatDialogHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which dialog instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatDialogHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatDialogHarness, options);\n        };\n        /** Gets the id of the dialog. */\n        MatDialogHarness.prototype.getId = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var id;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).getAttribute('id')];\n                        case 2:\n                            id = _a.sent();\n                            // In case no id has been specified, the \"id\" property always returns\n                            // an empty string. To make this method more explicit, we return null.\n                            return [2 /*return*/, id !== '' ? id : null];\n                    }\n                });\n            });\n        };\n        /** Gets the role of the dialog. */\n        MatDialogHarness.prototype.getRole = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('role')];\n                    }\n                });\n            });\n        };\n        /** Gets the value of the dialog's \"aria-label\" attribute. */\n        MatDialogHarness.prototype.getAriaLabel = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-label')];\n                    }\n                });\n            });\n        };\n        /** Gets the value of the dialog's \"aria-labelledby\" attribute. */\n        MatDialogHarness.prototype.getAriaLabelledby = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-labelledby')];\n                    }\n                });\n            });\n        };\n        /** Gets the value of the dialog's \"aria-describedby\" attribute. */\n        MatDialogHarness.prototype.getAriaDescribedby = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-describedby')];\n                    }\n                });\n            });\n        };\n        /**\n         * Closes the dialog by pressing escape.\n         *\n         * Note: this method does nothing if `disableClose` has been set to `true` for the dialog.\n         */\n        MatDialogHarness.prototype.close = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).sendKeys(testing.TestKey.ESCAPE)];\n                        case 2:\n                            _a.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        // Developers can provide a custom component or template for the\n        // dialog. The canonical dialog parent is the \"MatDialogContainer\".\n        /** The selector for the host element of a `MatDialog` instance. */\n        MatDialogHarness.hostSelector = '.mat-dialog-container';\n        return MatDialogHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatDialogHarness = MatDialogHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-dialog-testing.umd.js.map\n"]}