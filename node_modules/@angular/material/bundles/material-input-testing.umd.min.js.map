{"version":3,"sources":["src/material/material-input-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","input","testing","tslib","cdk","formField","control","this","MatInputHarness","_super","apply","arguments","__extends","with","options","_this","HarnessPredicate","addOption","value","harness","__awaiter","__generator","_a","label","getValue","sent","placeholder","getPlaceholder","prototype","isDisabled","host","getProperty","isRequired","isReadonly","getName","getType","getId","focus","blur","setValue","newValue","inputEl","clear","sendKeys","hostSelector","MatFormFieldControlHarness","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing'), require('@angular/material/form-field/testing/control')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/input/testing', ['exports', 'tslib', '@angular/cdk/testing', '@angular/material/form-field/testing/control'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.input = global.ng.material.input || {}, global.ng.material.input.testing = {}), global.tslib, global.ng.cdk.testing, global.ng.material.formField.testing.control));\n}(this, (function (exports, tslib, testing, control) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard Material inputs in tests. */\n    var MatInputHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatInputHarness, _super);\n        function MatInputHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatInputHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which input instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatInputHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatInputHarness, options)\n                .addOption('value', options.value, function (harness, value) { return tslib.__awaiter(_this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, harness.getValue()];\n                        case 1: return [2 /*return*/, (_a.sent()) === value];\n                    }\n                });\n            }); })\n                .addOption('placeholder', options.placeholder, function (harness, placeholder) { return tslib.__awaiter(_this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, harness.getPlaceholder()];\n                        case 1: return [2 /*return*/, (_a.sent()) === placeholder];\n                    }\n                });\n            }); });\n        };\n        /** Whether the input is disabled. */\n        MatInputHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getProperty('disabled')];\n                    }\n                });\n            });\n        };\n        /** Whether the input is required. */\n        MatInputHarness.prototype.isRequired = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getProperty('required')];\n                    }\n                });\n            });\n        };\n        /** Whether the input is readonly. */\n        MatInputHarness.prototype.isReadonly = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getProperty('readOnly')];\n                    }\n                });\n            });\n        };\n        /** Gets the value of the input. */\n        MatInputHarness.prototype.getValue = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).getProperty('value')];\n                        case 2: \n                        // The \"value\" property of the native input is never undefined.\n                        return [2 /*return*/, (_a.sent())];\n                    }\n                });\n            });\n        };\n        /** Gets the name of the input. */\n        MatInputHarness.prototype.getName = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).getProperty('name')];\n                        case 2: \n                        // The \"name\" property of the native input is never undefined.\n                        return [2 /*return*/, (_a.sent())];\n                    }\n                });\n            });\n        };\n        /**\n         * Gets the type of the input. Returns \"textarea\" if the input is\n         * a textarea.\n         */\n        MatInputHarness.prototype.getType = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).getProperty('type')];\n                        case 2: \n                        // The \"type\" property of the native input is never undefined.\n                        return [2 /*return*/, (_a.sent())];\n                    }\n                });\n            });\n        };\n        /** Gets the placeholder of the input. */\n        MatInputHarness.prototype.getPlaceholder = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).getProperty('placeholder')];\n                        case 2: \n                        // The \"placeholder\" property of the native input is never undefined.\n                        return [2 /*return*/, (_a.sent())];\n                    }\n                });\n            });\n        };\n        /** Gets the id of the input. */\n        MatInputHarness.prototype.getId = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).getProperty('id')];\n                        case 2: \n                        // The input directive always assigns a unique id to the input in\n                        // case no id has been explicitly specified.\n                        return [2 /*return*/, (_a.sent())];\n                    }\n                });\n            });\n        };\n        /**\n         * Focuses the input and returns a promise that indicates when the\n         * action is complete.\n         */\n        MatInputHarness.prototype.focus = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /**\n         * Blurs the input and returns a promise that indicates when the\n         * action is complete.\n         */\n        MatInputHarness.prototype.blur = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /**\n         * Sets the value of the input. The value will be set by simulating\n         * keypresses that correspond to the given value.\n         */\n        MatInputHarness.prototype.setValue = function (newValue) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var inputEl;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            inputEl = _a.sent();\n                            return [4 /*yield*/, inputEl.clear()];\n                        case 2:\n                            _a.sent();\n                            if (!newValue) return [3 /*break*/, 4];\n                            return [4 /*yield*/, inputEl.sendKeys(newValue)];\n                        case 3:\n                            _a.sent();\n                            _a.label = 4;\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        // TODO: We do not want to handle `select` elements with `matNativeControl` because\n        // not all methods of this harness work reasonably for native select elements.\n        // For more details. See: https://github.com/angular/components/pull/18221.\n        MatInputHarness.hostSelector = '[matInput], input[matNativeControl], textarea[matNativeControl]';\n        return MatInputHarness;\n    }(control.MatFormFieldControlHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatInputHarness = MatInputHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-input-testing.umd.js.map\n"]}