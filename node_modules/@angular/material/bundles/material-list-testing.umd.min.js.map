{"version":3,"sources":["src/material/material-list-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","list","testing","tslib","cdk","divider","this","testing$1","getListItemPredicate","harnessType","options","HarnessPredicate","addOption","text","harness","stringMatches","getText","MatSubheaderHarness","_super","apply","arguments","__extends","with","prototype","__awaiter","__generator","_a","label","host","sent","hostSelector","ComponentHarness","MatListItemHarnessBase","_this","_lines","locatorForAll","_avatar","locatorForOptional","_icon","getLinesText","_b","_c","Promise","all","map","l","hasAvatar","hasIcon","getHarnessLoaderForContent","locatorFactory","harnessLoaderFor","MatListHarnessBase","getItems","filters","_itemHarness","getItemsGroupedBySubheader","listSections","currentSection","itemsAndSubheaders","itemsAndSubheaders_1","itemsAndSubheaders_1_1","itemOrSubheader","e_1_1","e_1","items","getItemsWithSubheadersAndDividers","item","trys","push","__values","next","done","value","undefined","heading","length","error","return","call","getItemsGroupedByDividers","itemsAndDividers","itemsAndDividers_1","itemsAndDividers_1_1","itemOrDivider","e_2","subheader","MatDividerHarness","e_2_1","query","__spread","MatActionListHarness","MatActionListItemHarness","click","focus","blur","selector","join","MatListHarness","MatListItemHarness","MatNavListHarness","MatNavListItemHarness","href","getHref","getAttribute","MatSelectionListHarness","MatListOptionHarness","isDisabled","selectItems","_i","_getItems","select","deselectItems","deselect","_d","_e","concat","filter","_itemContent","locatorFor","selected","isSelected","getCheckboxPosition","hasClass","toggle","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing'), require('@angular/material/divider/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/list/testing', ['exports', 'tslib', '@angular/cdk/testing', '@angular/material/divider/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.list = global.ng.material.list || {}, global.ng.material.list.testing = {}), global.tslib, global.ng.cdk.testing, global.ng.material.divider.testing));\n}(this, (function (exports, tslib, testing, testing$1) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Gets a `HarnessPredicate` that applies the given `BaseListItemHarnessFilters` to the given\n     * list item harness.\n     * @template H The type of list item harness to create a predicate for.\n     * @param harnessType A constructor for a list item harness.\n     * @param options An instance of `BaseListItemHarnessFilters` to apply.\n     * @return A `HarnessPredicate` for the given harness type with the given options applied.\n     */\n    function getListItemPredicate(harnessType, options) {\n        return new testing.HarnessPredicate(harnessType, options)\n            .addOption('text', options.text, function (harness, text) { return testing.HarnessPredicate.stringMatches(harness.getText(), text); });\n    }\n    /** Harness for interacting with a list subheader. */\n    var MatSubheaderHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatSubheaderHarness, _super);\n        function MatSubheaderHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatSubheaderHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatSubheaderHarness, options)\n                .addOption('text', options.text, function (harness, text) { return testing.HarnessPredicate.stringMatches(harness.getText(), text); });\n        };\n        /** Gets the full text content of the list item (including text from any font icons). */\n        MatSubheaderHarness.prototype.getText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        MatSubheaderHarness.hostSelector = '[mat-subheader], [matSubheader]';\n        return MatSubheaderHarness;\n    }(testing.ComponentHarness));\n    /**\n     * Shared behavior among the harnesses for the various `MatListItem` flavors.\n     * @docs-private\n     */\n    var MatListItemHarnessBase = /** @class */ (function (_super) {\n        tslib.__extends(MatListItemHarnessBase, _super);\n        function MatListItemHarnessBase() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._lines = _this.locatorForAll('[mat-line], [matLine]');\n            _this._avatar = _this.locatorForOptional('[mat-list-avatar], [matListAvatar]');\n            _this._icon = _this.locatorForOptional('[mat-list-icon], [matListIcon]');\n            return _this;\n        }\n        /** Gets the full text content of the list item (including text from any font icons). */\n        MatListItemHarnessBase.prototype.getText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Gets the lines of text (`mat-line` elements) in this nav list item. */\n        MatListItemHarnessBase.prototype.getLinesText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a, _b;\n                return tslib.__generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0:\n                            _b = (_a = Promise).all;\n                            return [4 /*yield*/, this._lines()];\n                        case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).map(function (l) { return l.text(); })])];\n                    }\n                });\n            });\n        };\n        /** Whether this list item has an avatar. */\n        MatListItemHarnessBase.prototype.hasAvatar = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._avatar()];\n                        case 1: return [2 /*return*/, !!(_a.sent())];\n                    }\n                });\n            });\n        };\n        /** Whether this list item has an icon. */\n        MatListItemHarnessBase.prototype.hasIcon = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._icon()];\n                        case 1: return [2 /*return*/, !!(_a.sent())];\n                    }\n                });\n            });\n        };\n        /** Gets a `HarnessLoader` used to get harnesses within the list item's content. */\n        MatListItemHarnessBase.prototype.getHarnessLoaderForContent = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorFactory.harnessLoaderFor('.mat-list-item-content')];\n                });\n            });\n        };\n        return MatListItemHarnessBase;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Shared behavior among the harnesses for the various `MatList` flavors.\n     * @template T A constructor type for a list item harness type used by this list harness.\n     * @template C The list item harness type that `T` constructs.\n     * @template F The filter type used filter list item harness of type `C`.\n     * @docs-private\n     */\n    var MatListHarnessBase = /** @class */ (function (_super) {\n        tslib.__extends(MatListHarnessBase, _super);\n        function MatListHarnessBase() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a list of harnesses representing the items in this list.\n         * @param filters Optional filters used to narrow which harnesses are included\n         * @return The list of items matching the given filters.\n         */\n        MatListHarnessBase.prototype.getItems = function (filters) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorForAll(this._itemHarness.with(filters))()];\n                });\n            });\n        };\n        /**\n         * Gets a list of `ListSection` representing the list items grouped by subheaders. If the list has\n         * no subheaders it is represented as a single `ListSection` with an undefined `heading` property.\n         * @param filters Optional filters used to narrow which list item harnesses are included\n         * @return The list of items matching the given filters, grouped into sections by subheader.\n         */\n        MatListHarnessBase.prototype.getItemsGroupedBySubheader = function (filters) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var listSections, currentSection, itemsAndSubheaders, itemsAndSubheaders_1, itemsAndSubheaders_1_1, itemOrSubheader, _a, e_1_1;\n                var e_1, _b;\n                return tslib.__generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0:\n                            listSections = [];\n                            currentSection = { items: [] };\n                            return [4 /*yield*/, this.getItemsWithSubheadersAndDividers({ item: filters, divider: false })];\n                        case 1:\n                            itemsAndSubheaders = _c.sent();\n                            _c.label = 2;\n                        case 2:\n                            _c.trys.push([2, 8, 9, 10]);\n                            itemsAndSubheaders_1 = tslib.__values(itemsAndSubheaders), itemsAndSubheaders_1_1 = itemsAndSubheaders_1.next();\n                            _c.label = 3;\n                        case 3:\n                            if (!!itemsAndSubheaders_1_1.done) return [3 /*break*/, 7];\n                            itemOrSubheader = itemsAndSubheaders_1_1.value;\n                            if (!(itemOrSubheader instanceof MatSubheaderHarness)) return [3 /*break*/, 5];\n                            if (currentSection.heading !== undefined || currentSection.items.length) {\n                                listSections.push(currentSection);\n                            }\n                            _a = {};\n                            return [4 /*yield*/, itemOrSubheader.getText()];\n                        case 4:\n                            currentSection = (_a.heading = _c.sent(), _a.items = [], _a);\n                            return [3 /*break*/, 6];\n                        case 5:\n                            currentSection.items.push(itemOrSubheader);\n                            _c.label = 6;\n                        case 6:\n                            itemsAndSubheaders_1_1 = itemsAndSubheaders_1.next();\n                            return [3 /*break*/, 3];\n                        case 7: return [3 /*break*/, 10];\n                        case 8:\n                            e_1_1 = _c.sent();\n                            e_1 = { error: e_1_1 };\n                            return [3 /*break*/, 10];\n                        case 9:\n                            try {\n                                if (itemsAndSubheaders_1_1 && !itemsAndSubheaders_1_1.done && (_b = itemsAndSubheaders_1.return)) _b.call(itemsAndSubheaders_1);\n                            }\n                            finally { if (e_1) throw e_1.error; }\n                            return [7 /*endfinally*/];\n                        case 10:\n                            if (currentSection.heading !== undefined || currentSection.items.length ||\n                                !listSections.length) {\n                                listSections.push(currentSection);\n                            }\n                            return [2 /*return*/, listSections];\n                    }\n                });\n            });\n        };\n        /**\n         * Gets a list of sub-lists representing the list items grouped by dividers. If the list has no\n         * dividers it is represented as a list with a single sub-list.\n         * @param filters Optional filters used to narrow which list item harnesses are included\n         * @return The list of items matching the given filters, grouped into sub-lists by divider.\n         */\n        MatListHarnessBase.prototype.getItemsGroupedByDividers = function (filters) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var listSections, itemsAndDividers, itemsAndDividers_1, itemsAndDividers_1_1, itemOrDivider;\n                var e_2, _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            listSections = [[]];\n                            return [4 /*yield*/, this.getItemsWithSubheadersAndDividers({ item: filters, subheader: false })];\n                        case 1:\n                            itemsAndDividers = _b.sent();\n                            try {\n                                for (itemsAndDividers_1 = tslib.__values(itemsAndDividers), itemsAndDividers_1_1 = itemsAndDividers_1.next(); !itemsAndDividers_1_1.done; itemsAndDividers_1_1 = itemsAndDividers_1.next()) {\n                                    itemOrDivider = itemsAndDividers_1_1.value;\n                                    if (itemOrDivider instanceof testing$1.MatDividerHarness) {\n                                        listSections.push([]);\n                                    }\n                                    else {\n                                        listSections[listSections.length - 1].push(itemOrDivider);\n                                    }\n                                }\n                            }\n                            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                            finally {\n                                try {\n                                    if (itemsAndDividers_1_1 && !itemsAndDividers_1_1.done && (_a = itemsAndDividers_1.return)) _a.call(itemsAndDividers_1);\n                                }\n                                finally { if (e_2) throw e_2.error; }\n                            }\n                            return [2 /*return*/, listSections];\n                    }\n                });\n            });\n        };\n        MatListHarnessBase.prototype.getItemsWithSubheadersAndDividers = function (filters) {\n            if (filters === void 0) { filters = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var query;\n                return tslib.__generator(this, function (_a) {\n                    query = [];\n                    if (filters.item !== false) {\n                        query.push(this._itemHarness.with(filters.item || {}));\n                    }\n                    if (filters.subheader !== false) {\n                        query.push(MatSubheaderHarness.with(filters.subheader));\n                    }\n                    if (filters.divider !== false) {\n                        query.push(testing$1.MatDividerHarness.with(filters.divider));\n                    }\n                    return [2 /*return*/, this.locatorForAll.apply(this, tslib.__spread(query))()];\n                });\n            });\n        };\n        return MatListHarnessBase;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-action-list in tests. */\n    var MatActionListHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatActionListHarness, _super);\n        function MatActionListHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._itemHarness = MatActionListItemHarness;\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatActionListHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which action list instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatActionListHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatActionListHarness, options);\n        };\n        /** The selector for the host element of a `MatActionList` instance. */\n        MatActionListHarness.hostSelector = 'mat-action-list';\n        return MatActionListHarness;\n    }(MatListHarnessBase));\n    /** Harness for interacting with an action list item. */\n    var MatActionListItemHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatActionListItemHarness, _super);\n        function MatActionListItemHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatActionListItemHarness` that\n         * meets certain criteria.\n         * @param options Options for filtering which action list item instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatActionListItemHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return getListItemPredicate(MatActionListItemHarness, options);\n        };\n        /** Clicks on the action list item. */\n        MatActionListItemHarness.prototype.click = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).click()];\n                    }\n                });\n            });\n        };\n        /** Focuses the action list item. */\n        MatActionListItemHarness.prototype.focus = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the action list item. */\n        MatActionListItemHarness.prototype.blur = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatListItem` instance. */\n        MatActionListItemHarness.hostSelector = ['mat-list-item', 'a[mat-list-item]', 'button[mat-list-item]']\n            .map(function (selector) { return MatActionListHarness.hostSelector + \" \" + selector; })\n            .join(',');\n        return MatActionListItemHarness;\n    }(MatListItemHarnessBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-list in tests. */\n    var MatListHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatListHarness, _super);\n        function MatListHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._itemHarness = MatListItemHarness;\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatListHarness` that meets certain\n         * criteria.\n         * @param options Options for filtering which list instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatListHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatListHarness, options);\n        };\n        /** The selector for the host element of a `MatList` instance. */\n        MatListHarness.hostSelector = 'mat-list';\n        return MatListHarness;\n    }(MatListHarnessBase));\n    /** Harness for interacting with a list item. */\n    var MatListItemHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatListItemHarness, _super);\n        function MatListItemHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatListItemHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which list item instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatListItemHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return getListItemPredicate(MatListItemHarness, options);\n        };\n        /** The selector for the host element of a `MatListItem` instance. */\n        MatListItemHarness.hostSelector = ['mat-list-item', 'a[mat-list-item]', 'button[mat-list-item]']\n            .map(function (selector) { return MatListHarness.hostSelector + \" \" + selector; })\n            .join(',');\n        return MatListItemHarness;\n    }(MatListItemHarnessBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-nav-list in tests. */\n    var MatNavListHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatNavListHarness, _super);\n        function MatNavListHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._itemHarness = MatNavListItemHarness;\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatNavListHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which nav list instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatNavListHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatNavListHarness, options);\n        };\n        /** The selector for the host element of a `MatNavList` instance. */\n        MatNavListHarness.hostSelector = 'mat-nav-list';\n        return MatNavListHarness;\n    }(MatListHarnessBase));\n    /** Harness for interacting with a nav list item. */\n    var MatNavListItemHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatNavListItemHarness, _super);\n        function MatNavListItemHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatNavListItemHarness` that\n         * meets certain criteria.\n         * @param options Options for filtering which nav list item instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatNavListItemHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return getListItemPredicate(MatNavListItemHarness, options)\n                .addOption('href', options.href, function (harness, href) { return tslib.__awaiter(_this, void 0, void 0, function () { return tslib.__generator(this, function (_a) {\n                return [2 /*return*/, testing.HarnessPredicate.stringMatches(harness.getHref(), href)];\n            }); }); });\n        };\n        /** Gets the href for this nav list item. */\n        MatNavListItemHarness.prototype.getHref = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('href')];\n                    }\n                });\n            });\n        };\n        /** Clicks on the nav list item. */\n        MatNavListItemHarness.prototype.click = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).click()];\n                    }\n                });\n            });\n        };\n        /** Focuses the nav list item. */\n        MatNavListItemHarness.prototype.focus = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the nav list item. */\n        MatNavListItemHarness.prototype.blur = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatListItem` instance. */\n        MatNavListItemHarness.hostSelector = ['mat-list-item', 'a[mat-list-item]', 'button[mat-list-item]']\n            .map(function (selector) { return MatNavListHarness.hostSelector + \" \" + selector; })\n            .join(',');\n        return MatNavListItemHarness;\n    }(MatListItemHarnessBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-selection-list in tests. */\n    var MatSelectionListHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatSelectionListHarness, _super);\n        function MatSelectionListHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._itemHarness = MatListOptionHarness;\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatSelectionListHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which selection list instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatSelectionListHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatSelectionListHarness, options);\n        };\n        /** Whether the selection list is disabled. */\n        MatSelectionListHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).getAttribute('aria-disabled')];\n                        case 2: return [2 /*return*/, (_a.sent()) === 'true'];\n                    }\n                });\n            });\n        };\n        /**\n         * Selects all items matching any of the given filters.\n         * @param filters Filters that specify which items should be selected.\n         */\n        MatSelectionListHarness.prototype.selectItems = function () {\n            var filters = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                filters[_i] = arguments[_i];\n            }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var items;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._getItems(filters)];\n                        case 1:\n                            items = _a.sent();\n                            return [4 /*yield*/, Promise.all(items.map(function (item) { return item.select(); }))];\n                        case 2:\n                            _a.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * Deselects all items matching any of the given filters.\n         * @param filters Filters that specify which items should be deselected.\n         */\n        MatSelectionListHarness.prototype.deselectItems = function () {\n            var filters = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                filters[_i] = arguments[_i];\n            }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var items;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._getItems(filters)];\n                        case 1:\n                            items = _a.sent();\n                            return [4 /*yield*/, Promise.all(items.map(function (item) { return item.deselect(); }))];\n                        case 2:\n                            _a.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** Gets all items matching the given list of filters. */\n        MatSelectionListHarness.prototype._getItems = function (filters) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a, _b, _c;\n                var _d;\n                var _this = this;\n                return tslib.__generator(this, function (_e) {\n                    switch (_e.label) {\n                        case 0:\n                            if (!filters.length) {\n                                return [2 /*return*/, this.getItems()];\n                            }\n                            _b = (_a = (_d = []).concat).apply;\n                            _c = [_d];\n                            return [4 /*yield*/, Promise.all(filters.map(function (filter) { return _this.locatorForAll(MatListOptionHarness.with(filter))(); }))];\n                        case 1: return [2 /*return*/, _b.apply(_a, _c.concat([tslib.__spread.apply(void 0, [_e.sent()])]))];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatSelectionList` instance. */\n        MatSelectionListHarness.hostSelector = 'mat-selection-list';\n        return MatSelectionListHarness;\n    }(MatListHarnessBase));\n    /** Harness for interacting with a list option. */\n    var MatListOptionHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatListOptionHarness, _super);\n        function MatListOptionHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._itemContent = _this.locatorFor('.mat-list-item-content');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatListOptionHarness` that\n         * meets certain criteria.\n         * @param options Options for filtering which list option instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatListOptionHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return getListItemPredicate(MatListOptionHarness, options)\n                .addOption('is selected', options.selected, function (harness, selected) { return tslib.__awaiter(_this, void 0, void 0, function () { return tslib.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, harness.isSelected()];\n                    case 1: return [2 /*return*/, (_a.sent()) === selected];\n                }\n            }); }); });\n        };\n        /** Gets the position of the checkbox relative to the list option content. */\n        MatListOptionHarness.prototype.getCheckboxPosition = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._itemContent()];\n                        case 1: return [4 /*yield*/, (_a.sent()).hasClass('mat-list-item-content-reverse')];\n                        case 2: return [2 /*return*/, (_a.sent()) ?\n                                'after' : 'before'];\n                    }\n                });\n            });\n        };\n        /** Whether the list option is selected. */\n        MatListOptionHarness.prototype.isSelected = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).getAttribute('aria-selected')];\n                        case 2: return [2 /*return*/, (_a.sent()) === 'true'];\n                    }\n                });\n            });\n        };\n        /** Whether the list option is disabled. */\n        MatListOptionHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).getAttribute('aria-disabled')];\n                        case 2: return [2 /*return*/, (_a.sent()) === 'true'];\n                    }\n                });\n            });\n        };\n        /** Focuses the list option. */\n        MatListOptionHarness.prototype.focus = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the list option. */\n        MatListOptionHarness.prototype.blur = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /** Toggles the checked state of the checkbox. */\n        MatListOptionHarness.prototype.toggle = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).click()];\n                    }\n                });\n            });\n        };\n        /**\n         * Puts the list option in a checked state by toggling it if it is currently unchecked, or doing\n         * nothing if it is already checked.\n         */\n        MatListOptionHarness.prototype.select = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isSelected()];\n                        case 1:\n                            if (!(_a.sent())) {\n                                return [2 /*return*/, this.toggle()];\n                            }\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * Puts the list option in an unchecked state by toggling it if it is currently checked, or doing\n         * nothing if it is already unchecked.\n         */\n        MatListOptionHarness.prototype.deselect = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isSelected()];\n                        case 1:\n                            if (_a.sent()) {\n                                return [2 /*return*/, this.toggle()];\n                            }\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** The selector for the host element of a `MatListOption` instance. */\n        MatListOptionHarness.hostSelector = 'mat-list-option';\n        return MatListOptionHarness;\n    }(MatListItemHarnessBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatActionListHarness = MatActionListHarness;\n    exports.MatActionListItemHarness = MatActionListItemHarness;\n    exports.MatListHarness = MatListHarness;\n    exports.MatListItemHarness = MatListItemHarness;\n    exports.MatListOptionHarness = MatListOptionHarness;\n    exports.MatNavListHarness = MatNavListHarness;\n    exports.MatNavListItemHarness = MatNavListItemHarness;\n    exports.MatSelectionListHarness = MatSelectionListHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-list-testing.umd.js.map\n"]}