{"version":3,"file":"material-radio-testing.umd.js","sources":["../../../../../../../src/material/radio/testing/radio-harness.ts","../../../../../../../src/material/radio/testing/public-api.ts","../../../../../../../src/material/radio/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {RadioButtonHarnessFilters, RadioGroupHarnessFilters} from './radio-harness-filters';\n\n/** Harness for interacting with a standard mat-radio-group in tests. */\nexport class MatRadioGroupHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatRadioGroup` instance. */\n  static hostSelector = 'mat-radio-group';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatRadioGroupHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which radio group instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: RadioGroupHarnessFilters = {}): HarnessPredicate<MatRadioGroupHarness> {\n    return new HarnessPredicate(MatRadioGroupHarness, options)\n        .addOption('name', options.name, this._checkRadioGroupName);\n  }\n\n  /** Gets the name of the radio-group. */\n  async getName(): Promise<string|null> {\n    const hostName = await this._getGroupNameFromHost();\n    // It's not possible to always determine the \"name\" of a radio-group by reading\n    // the attribute. This is because the radio-group does not set the \"name\" as an\n    // element attribute if the \"name\" value is set through a binding.\n    if (hostName !== null) {\n      return hostName;\n    }\n    // In case we couldn't determine the \"name\" of a radio-group by reading the\n    // \"name\" attribute, we try to determine the \"name\" of the group by going\n    // through all radio buttons.\n    const radioNames = await this._getNamesFromRadioButtons();\n    if (!radioNames.length) {\n      return null;\n    }\n    if (!this._checkRadioNamesInGroupEqual(radioNames)) {\n      throw Error('Radio buttons in radio-group have mismatching names.');\n    }\n    return radioNames[0]!;\n  }\n\n  /** Gets the id of the radio-group. */\n  async getId(): Promise<string|null> {\n    return (await this.host()).getProperty('id');\n  }\n\n  /** Gets the checked radio-button in a radio-group. */\n  async getCheckedRadioButton(): Promise<MatRadioButtonHarness|null> {\n    for (let radioButton of await this.getRadioButtons()) {\n      if (await radioButton.isChecked()) {\n        return radioButton;\n      }\n    }\n    return null;\n  }\n\n  /** Gets the checked value of the radio-group. */\n  async getCheckedValue(): Promise<string|null> {\n    const checkedRadio = await this.getCheckedRadioButton();\n    if (!checkedRadio) {\n      return null;\n    }\n    return checkedRadio.getValue();\n  }\n\n  /**\n   * Gets a list of radio buttons which are part of the radio-group.\n   * @param filter Optionally filters which radio buttons are included.\n   */\n  async getRadioButtons(filter: RadioButtonHarnessFilters = {}): Promise<MatRadioButtonHarness[]> {\n    return this.locatorForAll(MatRadioButtonHarness.with(filter))();\n  }\n\n  /**\n   * Checks a radio button in this group.\n   * @param filter An optional filter to apply to the child radio buttons. The first tab matching\n   *     the filter will be selected.\n   */\n  async checkRadioButton(filter: RadioButtonHarnessFilters = {}): Promise<void> {\n    const radioButtons = await this.getRadioButtons(filter);\n    if (!radioButtons.length) {\n      throw Error(`Could not find radio button matching ${JSON.stringify(filter)}`);\n    }\n    return radioButtons[0].check();\n  }\n\n  /** Gets the name attribute of the host element. */\n  private async _getGroupNameFromHost() {\n    return (await this.host()).getAttribute('name');\n  }\n\n  /** Gets a list of the name attributes of all child radio buttons. */\n  private async _getNamesFromRadioButtons(): Promise<string[]> {\n    const groupNames: string[] = [];\n    for (let radio of await this.getRadioButtons()) {\n      const radioName = await radio.getName();\n      if (radioName !== null) {\n        groupNames.push(radioName);\n      }\n    }\n    return groupNames;\n  }\n\n  /** Checks if the specified radio names are all equal. */\n  private _checkRadioNamesInGroupEqual(radioNames: string[]): boolean {\n    let groupName: string|null = null;\n    for (let radioName of radioNames) {\n      if (groupName === null) {\n        groupName = radioName;\n      } else if (groupName !== radioName) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Checks if a radio-group harness has the given name. Throws if a radio-group with\n   * matching name could be found but has mismatching radio-button names.\n   */\n  private static async _checkRadioGroupName(harness: MatRadioGroupHarness, name: string) {\n    // Check if there is a radio-group which has the \"name\" attribute set\n    // to the expected group name. It's not possible to always determine\n    // the \"name\" of a radio-group by reading the attribute. This is because\n    // the radio-group does not set the \"name\" as an element attribute if the\n    // \"name\" value is set through a binding.\n    if (await harness._getGroupNameFromHost() === name) {\n      return true;\n    }\n    // Check if there is a group with radio-buttons that all have the same\n    // expected name. This implies that the group has the given name. It's\n    // not possible to always determine the name of a radio-group through\n    // the attribute because there is\n    const radioNames = await harness._getNamesFromRadioButtons();\n    if (radioNames.indexOf(name) === -1) {\n      return false;\n    }\n    if (!harness._checkRadioNamesInGroupEqual(radioNames)) {\n      throw Error(\n          `The locator found a radio-group with name \"${name}\", but some ` +\n          `radio-button's within the group have mismatching names, which is invalid.`);\n    }\n    return true;\n  }\n}\n\n/** Harness for interacting with a standard mat-radio-button in tests. */\nexport class MatRadioButtonHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatRadioButton` instance. */\n  static hostSelector = 'mat-radio-button';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatRadioButtonHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which radio button instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: RadioButtonHarnessFilters = {}): HarnessPredicate<MatRadioButtonHarness> {\n    return new HarnessPredicate(MatRadioButtonHarness, options)\n        .addOption(\n            'label', options.label,\n            (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label))\n        .addOption(\n            'name', options.name, async (harness, name) => (await harness.getName()) === name);\n  }\n\n  private _textLabel = this.locatorFor('.mat-radio-label-content');\n  private _clickLabel = this.locatorFor('.mat-radio-label');\n  private _input = this.locatorFor('input');\n\n  /** Whether the radio-button is checked. */\n  async isChecked(): Promise<boolean> {\n    const checked = (await this._input()).getProperty('checked');\n    return coerceBooleanProperty(await checked);\n  }\n\n  /** Whether the radio-button is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this._input()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  /** Whether the radio-button is required. */\n  async isRequired(): Promise<boolean> {\n    const required = (await this._input()).getAttribute('required');\n    return coerceBooleanProperty(await required);\n  }\n\n  /** Gets the radio-button's name. */\n  async getName(): Promise<string|null> {\n    return (await this._input()).getAttribute('name');\n  }\n\n  /** Gets the radio-button's id. */\n  async getId(): Promise<string|null> {\n    return (await this.host()).getProperty('id');\n  }\n\n  /**\n   * Gets the value of the radio-button. The radio-button value will be converted to a string.\n   *\n   * Note: This means that for radio-button's with an object as a value `[object Object]` is\n   * intentionally returned.\n   */\n  async getValue(): Promise<string|null> {\n    return (await this._input()).getProperty('value');\n  }\n\n  /** Gets the radio-button's label text. */\n  async getLabelText(): Promise<string> {\n    return (await this._textLabel()).text();\n  }\n\n  /** Focuses the radio-button. */\n  async focus(): Promise<void> {\n    return (await this._input()).focus();\n  }\n\n  /** Blurs the radio-button. */\n  async blur(): Promise<void> {\n    return (await this._input()).blur();\n  }\n\n  /**\n   * Puts the radio-button in a checked state by clicking it if it is currently unchecked,\n   * or doing nothing if it is already checked.\n   */\n  async check(): Promise<void> {\n    if (!(await this.isChecked())) {\n      return (await this._clickLabel()).click();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './radio-harness';\nexport * from './radio-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["__extends","HarnessPredicate","__values","ComponentHarness","coerceBooleanProperty"],"mappings":"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"}