{"version":3,"sources":["src/material/material-select-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","select","testing","tslib","cdk","formField","control","core","this","testing$1","PANEL_SELECTOR","MatSelectHarness","_super","_this","apply","arguments","_documentRootLocator","documentRootLocatorFactory","_backdrop","locatorFor","_optionalPanel","locatorForOptional","_trigger","_value","__extends","with","options","HarnessPredicate","prototype","isDisabled","__awaiter","__generator","_a","label","host","sent","hasClass","isValid","isRequired","isEmpty","isMultiple","getAttribute","getValueText","text","focus","blur","getOptions","filter","locatorForAll","MatOptionHarness","__assign","ancestor","getOptionGroups","MatOptgroupHarness","isOpen","open","click","clickOptions","_b","Promise","all","__read","length","Error","map","option","close","hostSelector","MatFormFieldControlHarness","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing'), require('@angular/material/form-field/testing/control'), require('@angular/material/core/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/select/testing', ['exports', 'tslib', '@angular/cdk/testing', '@angular/material/form-field/testing/control', '@angular/material/core/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.select = global.ng.material.select || {}, global.ng.material.select.testing = {}), global.tslib, global.ng.cdk.testing, global.ng.material.formField.testing.control, global.ng.material.core.testing));\n}(this, (function (exports, tslib, testing, control, testing$1) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var PANEL_SELECTOR = '.mat-select-panel';\n    /** Harness for interacting with a standard mat-select in tests. */\n    var MatSelectHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatSelectHarness, _super);\n        function MatSelectHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._documentRootLocator = _this.documentRootLocatorFactory();\n            _this._backdrop = _this._documentRootLocator.locatorFor('.cdk-overlay-backdrop');\n            _this._optionalPanel = _this._documentRootLocator.locatorForOptional(PANEL_SELECTOR);\n            _this._trigger = _this.locatorFor('.mat-select-trigger');\n            _this._value = _this.locatorFor('.mat-select-value');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatSelectHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which select instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatSelectHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatSelectHarness, options);\n        };\n        /** Gets a boolean promise indicating if the select is disabled. */\n        MatSelectHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-select-disabled')];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the select is valid. */\n        MatSelectHarness.prototype.isValid = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).hasClass('ng-invalid')];\n                        case 2: return [2 /*return*/, !(_a.sent())];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the select is required. */\n        MatSelectHarness.prototype.isRequired = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-select-required')];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the select is empty (no value is selected). */\n        MatSelectHarness.prototype.isEmpty = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-select-empty')];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the select is in multi-selection mode. */\n        MatSelectHarness.prototype.isMultiple = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var ariaMultiselectable;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            ariaMultiselectable = (_a.sent()).getAttribute('aria-multiselectable');\n                            return [4 /*yield*/, ariaMultiselectable];\n                        case 2: return [2 /*return*/, (_a.sent()) === 'true'];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the select's value text. */\n        MatSelectHarness.prototype.getValueText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._value()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Focuses the select and returns a void promise that indicates when the action is complete. */\n        MatSelectHarness.prototype.focus = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the select and returns a void promise that indicates when the action is complete. */\n        MatSelectHarness.prototype.blur = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /** Gets the options inside the select panel. */\n        MatSelectHarness.prototype.getOptions = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this._documentRootLocator.locatorForAll(testing$1.MatOptionHarness.with(tslib.__assign(tslib.__assign({}, filter), { ancestor: PANEL_SELECTOR })))()];\n                });\n            });\n        };\n        /** Gets the groups of options inside the panel. */\n        MatSelectHarness.prototype.getOptionGroups = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this._documentRootLocator.locatorForAll(testing$1.MatOptgroupHarness.with(tslib.__assign(tslib.__assign({}, filter), { ancestor: PANEL_SELECTOR })))()];\n                });\n            });\n        };\n        /** Gets whether the select is open. */\n        MatSelectHarness.prototype.isOpen = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._optionalPanel()];\n                        case 1: return [2 /*return*/, !!(_a.sent())];\n                    }\n                });\n            });\n        };\n        /** Opens the select's panel. */\n        MatSelectHarness.prototype.open = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isOpen()];\n                        case 1:\n                            if (!!(_a.sent())) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this._trigger()];\n                        case 2: return [2 /*return*/, (_a.sent()).click()];\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * Clicks the options that match the passed-in filter. If the select is in multi-selection\n         * mode all options will be clicked, otherwise the harness will pick the first matching option.\n         */\n        MatSelectHarness.prototype.clickOptions = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a, isMultiple, options;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this.open()];\n                        case 1:\n                            _b.sent();\n                            return [4 /*yield*/, Promise.all([this.isMultiple(), this.getOptions(filter)])];\n                        case 2:\n                            _a = tslib.__read.apply(void 0, [_b.sent(), 2]), isMultiple = _a[0], options = _a[1];\n                            if (options.length === 0) {\n                                throw Error('Select does not have options matching the specified filter');\n                            }\n                            if (!isMultiple) return [3 /*break*/, 4];\n                            return [4 /*yield*/, Promise.all(options.map(function (option) { return option.click(); }))];\n                        case 3:\n                            _b.sent();\n                            return [3 /*break*/, 6];\n                        case 4: return [4 /*yield*/, options[0].click()];\n                        case 5:\n                            _b.sent();\n                            _b.label = 6;\n                        case 6: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** Closes the select's panel. */\n        MatSelectHarness.prototype.close = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isOpen()];\n                        case 1:\n                            if (!_a.sent()) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this._backdrop()];\n                        case 2: \n                        // This is the most consistent way that works both in both single and multi-select modes,\n                        // but it assumes that only one overlay is open at a time. We should be able to make it\n                        // a bit more precise after #16645 where we can dispatch an ESCAPE press to the host instead.\n                        return [2 /*return*/, (_a.sent()).click()];\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        MatSelectHarness.hostSelector = '.mat-select';\n        return MatSelectHarness;\n    }(control.MatFormFieldControlHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatSelectHarness = MatSelectHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-select-testing.umd.js.map\n"]}