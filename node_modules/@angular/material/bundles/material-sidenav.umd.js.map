{"version":3,"file":"material-sidenav.umd.js","sources":["../../../../../../src/material/sidenav/drawer-animations.ts","../../../../../../src/material/sidenav/drawer.ts","../../../../../../src/material/sidenav/sidenav.ts","../../../../../../src/material/sidenav/sidenav-module.ts","../../../../../../src/material/sidenav/public-api.ts","../../../../../../src/material/sidenav/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Drawer and SideNav display modes. */\nexport type MatDrawerMode = 'over' | 'push' | 'side';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nexport const MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): MatDrawerMode { return this._mode; }\n  set mode(value: MatDrawerMode) {\n    this._mode = value;\n    this._updateFocusTrapState();\n    this._modeChanged.next();\n  }\n  private _mode: MatDrawerMode = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /**\n   * Whether the drawer should focus the first focusable element automatically when opened.\n   * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n   * enabled, focus will be moved into the sidenav in `side` mode as well.\n   */\n  @Input()\n  get autoFocus(): boolean {\n    const value = this._autoFocus;\n\n    // Note that usually we disable auto focusing in `side` mode, because we don't know how the\n    // sidenav is being used, but in some cases it still makes sense to do it. If the consumer\n    // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.\n    return value == null ? this.mode !== 'side' : value;\n  }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean | undefined;\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any,\n              /**\n               * @deprecated `_container` parameter to be made required.\n               * @breaking-change 10.0.0\n               */\n              @Optional() @Inject(MAT_DRAWER_CONTAINER) public _container?: MatDrawerContainer) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        this._takeFocus();\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => {\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /**\n   * Moves focus into the drawer. Note that this works even if\n   * the focus trap is disabled in `side` mode.\n   */\n  private _takeFocus() {\n    if (!this.autoFocus || !this._focusTrap) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.\n      if (this._elementFocusedBeforeDrawerWasOpened) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._updateFocusTrapState();\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    this._updateFocusTrapState();\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  /** Updates the enabled state of the focus trap. */\n  private _updateFocusTrapState() {\n    if (this._focusTrap) {\n      // The focus trap is only enabled when the drawer is open in any mode other than side.\n      this._focusTrap.enabled = this.opened && this.mode !== 'side';\n    }\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n\n  static ngAcceptInputType_disableClose: BooleanInput;\n  static ngAcceptInputType_autoFocus: BooleanInput;\n  static ngAcceptInputType_opened: BooleanInput;\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [{\n    provide: MAT_DRAWER_CONTAINER,\n    useExisting: MatDrawerContainer\n  }]\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  /** All drawers in the container. Includes drawers from inside nested containers. */\n  @ContentChildren(MatDrawer, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _allDrawers: QueryList<MatDrawer>;\n\n  /** Drawers that belong to this container. */\n  _drawers = new QueryList<MatDrawer>();\n\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._allDrawers.changes\n      .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n      .subscribe((drawer: QueryList<MatDrawer>) => {\n        // @breaking-change 10.0.0 Remove `_container` check once container parameter is required.\n        this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n        this._drawers.notifyOnChanges();\n      });\n\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._drawers.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    const classList = this._element.nativeElement.classList;\n    const className = 'mat-drawer-container-has-open';\n\n    if (isAdd) {\n      classList.add(className);\n    } else {\n      classList.remove(className);\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  static ngAcceptInputType_autosize: BooleanInput;\n  static ngAcceptInputType_hasBackdrop: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent, MAT_DRAWER_CONTAINER} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n\n  static ngAcceptInputType_fixedInViewport: BooleanInput;\n  static ngAcceptInputType_fixedTopGap: NumberInput;\n  static ngAcceptInputType_fixedBottomGap: NumberInput;\n}\n\n\n@Component({\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [{\n    provide: MAT_DRAWER_CONTAINER,\n    useExisting: MatSidenavContainer\n  }]\n\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _allDrawers: QueryList<MatSidenav>;\n\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n  static ngAcceptInputType_hasBackdrop: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './sidenav-module';\nexport {\n  throwMatDuplicatedDrawerError,\n  MatDrawerToggleResult,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n  MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n  MatDrawerContent,\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerMode,\n} from './drawer';\nexport * from './sidenav';\nexport * from './drawer-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MAT_DRAWER_CONTAINER as Éµangular_material_src_material_sidenav_sidenav_a} from './drawer';"],"names":["trigger","state","style","transition","animate","InjectionToken","__extends","Component","ChangeDetectionStrategy","ViewEncapsulation","ChangeDetectorRef","Inject","forwardRef","ElementRef","ScrollDispatcher","NgZone","CdkScrollable","Subject","EventEmitter","fromEvent","filter","ESCAPE","hasModifierKey","takeUntil","distinctUntilChanged","coerceBooleanProperty","map","take","FocusTrapFactory","FocusMonitor","Platform","Optional","DOCUMENT","Input","HostBinding","Output","HostListener","QueryList","startWith","debounceTime","merge","Directionality","ViewportRuler","ANIMATION_MODULE_TYPE","ContentChildren","ContentChild","ViewChild","coerceNumberProperty","NgModule","CommonModule","MatCommonModule","ScrollingModule","PlatformModule"],"mappings":"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"}