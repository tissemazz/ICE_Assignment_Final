{"version":3,"sources":["src/material/material-badge.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","badge","core","cdk","a11y","tslib","coercion","platformBrowser","animations","this","core$1","nextId","MatBadge","_super","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","_this","call","_hasContent","_color","_overlap","position","size","_id","isDevMode","nativeElement","nodeType","ELEMENT_NODE","Error","__extends","Object","defineProperty","prototype","get","set","value","_setColor","enumerable","configurable","val","coerceBooleanProperty","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","setAttribute","removeAttribute","_hidden","isAbove","indexOf","isAfter","ngOnChanges","changes","contentChange","currentValue","trim","length","_updateTextContent","ngOnDestroy","description","removeDescription","destroyNode","getBadgeElement","textContent","content","_createBadgeElement","createElement","_clearExistingBadges","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","oldDescription","describe","colorPalette","remove","cssClass","element","childCount","children","currentChild","contains","removeChild","decorators","type","Directive","args","selector","inputs","host","class","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","ctorParameters","NgZone","ElementRef","AriaDescriber","Renderer2","String","Optional","Inject","ANIMATION_MODULE_TYPE","propDecorators","color","Input","overlap","hidden","mixinDisabled","MatBadgeBase","MatBadgeModule","NgModule","imports","A11yModule","MatCommonModule","declarations"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/material/core'), require('@angular/cdk/a11y'), require('tslib'), require('@angular/cdk/coercion'), require('@angular/platform-browser/animations')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/badge', ['exports', '@angular/core', '@angular/material/core', '@angular/cdk/a11y', 'tslib', '@angular/cdk/coercion', '@angular/platform-browser/animations'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.badge = {}), global.ng.core, global.ng.material.core, global.ng.cdk.a11y, global.tslib, global.ng.cdk.coercion, global.ng.platformBrowser.animations));\n}(this, (function (exports, core, core$1, a11y, tslib, coercion, animations) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var nextId = 0;\n    // Boilerplate for applying mixins to MatBadge.\n    /** @docs-private */\n    var MatBadgeBase = /** @class */ (function () {\n        function MatBadgeBase() {\n        }\n        return MatBadgeBase;\n    }());\n    var _MatBadgeMixinBase = core$1.mixinDisabled(MatBadgeBase);\n    /** Directive to display a text badge. */\n    var MatBadge = /** @class */ (function (_super) {\n        tslib.__extends(MatBadge, _super);\n        function MatBadge(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n            var _this = _super.call(this) || this;\n            _this._ngZone = _ngZone;\n            _this._elementRef = _elementRef;\n            _this._ariaDescriber = _ariaDescriber;\n            _this._renderer = _renderer;\n            _this._animationMode = _animationMode;\n            /** Whether the badge has any content. */\n            _this._hasContent = false;\n            _this._color = 'primary';\n            _this._overlap = true;\n            /**\n             * Position the badge should reside.\n             * Accepts any combination of 'above'|'below' and 'before'|'after'\n             */\n            _this.position = 'above after';\n            /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n            _this.size = 'medium';\n            /** Unique id for the badge */\n            _this._id = nextId++;\n            if (core.isDevMode()) {\n                var nativeElement = _elementRef.nativeElement;\n                if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                    throw Error('matBadge must be attached to an element node.');\n                }\n            }\n            return _this;\n        }\n        Object.defineProperty(MatBadge.prototype, \"color\", {\n            /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n            get: function () { return this._color; },\n            set: function (value) {\n                this._setColor(value);\n                this._color = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatBadge.prototype, \"overlap\", {\n            /** Whether the badge should overlap its contents or not */\n            get: function () { return this._overlap; },\n            set: function (val) {\n                this._overlap = coercion.coerceBooleanProperty(val);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatBadge.prototype, \"description\", {\n            /** Message used to describe the decorated element via aria-describedby */\n            get: function () { return this._description; },\n            set: function (newDescription) {\n                if (newDescription !== this._description) {\n                    var badgeElement = this._badgeElement;\n                    this._updateHostAriaDescription(newDescription, this._description);\n                    this._description = newDescription;\n                    if (badgeElement) {\n                        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                            badgeElement.removeAttribute('aria-label');\n                    }\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatBadge.prototype, \"hidden\", {\n            /** Whether the badge is hidden. */\n            get: function () { return this._hidden; },\n            set: function (val) {\n                this._hidden = coercion.coerceBooleanProperty(val);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Whether the badge is above the host or not */\n        MatBadge.prototype.isAbove = function () {\n            return this.position.indexOf('below') === -1;\n        };\n        /** Whether the badge is after the host or not */\n        MatBadge.prototype.isAfter = function () {\n            return this.position.indexOf('before') === -1;\n        };\n        MatBadge.prototype.ngOnChanges = function (changes) {\n            var contentChange = changes['content'];\n            if (contentChange) {\n                var value = contentChange.currentValue;\n                this._hasContent = value != null && (\"\" + value).trim().length > 0;\n                this._updateTextContent();\n            }\n        };\n        MatBadge.prototype.ngOnDestroy = function () {\n            var badgeElement = this._badgeElement;\n            if (badgeElement) {\n                if (this.description) {\n                    this._ariaDescriber.removeDescription(badgeElement, this.description);\n                }\n                // When creating a badge through the Renderer, Angular will keep it in an index.\n                // We have to destroy it ourselves, otherwise it'll be retained in memory.\n                if (this._renderer.destroyNode) {\n                    this._renderer.destroyNode(badgeElement);\n                }\n            }\n        };\n        /**\n         * Gets the element into which the badge's content is being rendered.\n         * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n         */\n        MatBadge.prototype.getBadgeElement = function () {\n            return this._badgeElement;\n        };\n        /** Injects a span element into the DOM with the content. */\n        MatBadge.prototype._updateTextContent = function () {\n            if (!this._badgeElement) {\n                this._badgeElement = this._createBadgeElement();\n            }\n            else {\n                this._badgeElement.textContent = this.content;\n            }\n            return this._badgeElement;\n        };\n        /** Creates the badge element */\n        MatBadge.prototype._createBadgeElement = function () {\n            var badgeElement = this._renderer.createElement('span');\n            var activeClass = 'mat-badge-active';\n            var contentClass = 'mat-badge-content';\n            // Clear any existing badges which may have persisted from a server-side render.\n            this._clearExistingBadges(contentClass);\n            badgeElement.setAttribute('id', \"mat-badge-content-\" + this._id);\n            badgeElement.classList.add(contentClass);\n            badgeElement.textContent = this.content;\n            if (this._animationMode === 'NoopAnimations') {\n                badgeElement.classList.add('_mat-animation-noopable');\n            }\n            if (this.description) {\n                badgeElement.setAttribute('aria-label', this.description);\n            }\n            this._elementRef.nativeElement.appendChild(badgeElement);\n            // animate in after insertion\n            if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n                this._ngZone.runOutsideAngular(function () {\n                    requestAnimationFrame(function () {\n                        badgeElement.classList.add(activeClass);\n                    });\n                });\n            }\n            else {\n                badgeElement.classList.add(activeClass);\n            }\n            return badgeElement;\n        };\n        /** Sets the aria-label property on the element */\n        MatBadge.prototype._updateHostAriaDescription = function (newDescription, oldDescription) {\n            // ensure content available before setting label\n            var content = this._updateTextContent();\n            if (oldDescription) {\n                this._ariaDescriber.removeDescription(content, oldDescription);\n            }\n            if (newDescription) {\n                this._ariaDescriber.describe(content, newDescription);\n            }\n        };\n        /** Adds css theme class given the color to the component host */\n        MatBadge.prototype._setColor = function (colorPalette) {\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(\"mat-badge-\" + this._color);\n                }\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(\"mat-badge-\" + colorPalette);\n                }\n            }\n        };\n        /** Clears any existing badges that might be left over from server-side rendering. */\n        MatBadge.prototype._clearExistingBadges = function (cssClass) {\n            var element = this._elementRef.nativeElement;\n            var childCount = element.children.length;\n            // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n            while (childCount--) {\n                var currentChild = element.children[childCount];\n                if (currentChild.classList.contains(cssClass)) {\n                    element.removeChild(currentChild);\n                }\n            }\n        };\n        MatBadge.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matBadge]',\n                        inputs: ['disabled: matBadgeDisabled'],\n                        host: {\n                            'class': 'mat-badge',\n                            '[class.mat-badge-overlap]': 'overlap',\n                            '[class.mat-badge-above]': 'isAbove()',\n                            '[class.mat-badge-below]': '!isAbove()',\n                            '[class.mat-badge-before]': '!isAfter()',\n                            '[class.mat-badge-after]': 'isAfter()',\n                            '[class.mat-badge-small]': 'size === \"small\"',\n                            '[class.mat-badge-medium]': 'size === \"medium\"',\n                            '[class.mat-badge-large]': 'size === \"large\"',\n                            '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                            '[class.mat-badge-disabled]': 'disabled',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        MatBadge.ctorParameters = function () { return [\n            { type: core.NgZone },\n            { type: core.ElementRef },\n            { type: a11y.AriaDescriber },\n            { type: core.Renderer2 },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] }\n        ]; };\n        MatBadge.propDecorators = {\n            color: [{ type: core.Input, args: ['matBadgeColor',] }],\n            overlap: [{ type: core.Input, args: ['matBadgeOverlap',] }],\n            position: [{ type: core.Input, args: ['matBadgePosition',] }],\n            content: [{ type: core.Input, args: ['matBadge',] }],\n            description: [{ type: core.Input, args: ['matBadgeDescription',] }],\n            size: [{ type: core.Input, args: ['matBadgeSize',] }],\n            hidden: [{ type: core.Input, args: ['matBadgeHidden',] }]\n        };\n        return MatBadge;\n    }(_MatBadgeMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatBadgeModule = /** @class */ (function () {\n        function MatBadgeModule() {\n        }\n        MatBadgeModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            a11y.A11yModule,\n                            core$1.MatCommonModule\n                        ],\n                        exports: [MatBadge],\n                        declarations: [MatBadge],\n                    },] }\n        ];\n        return MatBadgeModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MatBadge = MatBadge;\n    exports.MatBadgeModule = MatBadgeModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-badge.umd.js.map\n"]}