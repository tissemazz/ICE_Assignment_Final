{"version":3,"file":"material-badge-testing.umd.js","sources":["../../../../../../../src/material/badge/testing/badge-harness.ts","../../../../../../../src/material/badge/testing/public-api.ts","../../../../../../../src/material/badge/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {MatBadgePosition, MatBadgeSize} from '@angular/material/badge';\nimport {BadgeHarnessFilters} from './badge-harness-filters';\n\n\n/**\n * Harness for interacting with a standard Material badge in tests.\n * @dynamic\n */\nexport class MatBadgeHarness extends ComponentHarness {\n  static hostSelector = '.mat-badge';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a badge with specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `text` finds a badge host with a particular text.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: BadgeHarnessFilters = {}): HarnessPredicate<MatBadgeHarness> {\n    return new HarnessPredicate(MatBadgeHarness, options)\n        .addOption('text', options.text,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text));\n  }\n\n  private _badgeElement = this.locatorFor('.mat-badge-content');\n\n  /** Gets a promise for the badge text. */\n  async getText(): Promise<string> {\n    return (await this._badgeElement()).text();\n  }\n\n  /** Gets whether the badge is overlapping the content. */\n  async isOverlapping(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-badge-overlap');\n  }\n\n  /** Gets the position of the badge. */\n  async getPosition(): Promise<MatBadgePosition> {\n    const host = await this.host();\n    let result = '';\n\n    if (await host.hasClass('mat-badge-above')) {\n      result += 'above';\n    } else if (await host.hasClass('mat-badge-below')) {\n      result += 'below';\n    }\n\n    if (await host.hasClass('mat-badge-before')) {\n      result += ' before';\n    } else if (await host.hasClass('mat-badge-after')) {\n      result += ' after';\n    }\n\n    return result.trim() as MatBadgePosition;\n  }\n\n  /** Gets the size of the badge. */\n  async getSize(): Promise<MatBadgeSize> {\n    const host = await this.host();\n\n    if (await host.hasClass('mat-badge-small')) {\n      return 'small';\n    } else if (await host.hasClass('mat-badge-large')) {\n      return 'large';\n    }\n\n    return 'medium';\n  }\n\n  /** Gets whether the badge is hidden. */\n  async isHidden(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-badge-hidden');\n  }\n\n  /** Gets whether the badge is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-badge-disabled');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './badge-harness';\nexport * from './badge-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["__extends","HarnessPredicate","ComponentHarness"],"mappings":";;;;;;IAAA;;;;;;;IAaA;;;;AAIA;QAAqCA,yCAAgB;QAArD;YAAA,qEAqEC;YAtDS,mBAAa,GAAG,KAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;;SAsD/D;;;;;;;QA5DQ,oBAAI,GAAX,UAAY,OAAiC;YAAjC,wBAAA,EAAA,YAAiC;YAC3C,OAAO,IAAIC,wBAAgB,CAAC,eAAe,EAAE,OAAO,CAAC;iBAChD,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,EAC3B,UAAC,OAAO,EAAE,IAAI,IAAK,OAAAA,wBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,GAAA,CAAC,CAAC;SACrF;;QAKK,iCAAO,GAAb;;;;gCACU,qBAAM,IAAI,CAAC,aAAa,EAAE,EAAA;gCAAlC,sBAAO,CAAC,SAA0B,EAAE,IAAI,EAAE,EAAC;;;;SAC5C;;QAGK,uCAAa,GAAnB;;;;gCACU,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;gCAAzB,sBAAO,CAAC,SAAiB,EAAE,QAAQ,CAAC,mBAAmB,CAAC,EAAC;;;;SAC1D;;QAGK,qCAAW,GAAjB;;;;;gCACe,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;4BAAxB,IAAI,GAAG,SAAiB;4BAC1B,MAAM,GAAG,EAAE,CAAC;4BAEZ,qBAAM,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAA;;iCAAtC,SAAsC,EAAtC,wBAAsC;4BACxC,MAAM,IAAI,OAAO,CAAC;;gCACT,qBAAM,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAA;;4BAA1C,IAAI,SAAsC,EAAE;gCACjD,MAAM,IAAI,OAAO,CAAC;6BACnB;;gCAEG,qBAAM,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAA;;iCAAvC,SAAuC,EAAvC,wBAAuC;4BACzC,MAAM,IAAI,SAAS,CAAC;;gCACX,qBAAM,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAA;;4BAA1C,IAAI,SAAsC,EAAE;gCACjD,MAAM,IAAI,QAAQ,CAAC;6BACpB;;gCAED,sBAAO,MAAM,CAAC,IAAI,EAAsB,EAAC;;;;SAC1C;;QAGK,iCAAO,GAAb;;;;;gCACe,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;4BAAxB,IAAI,GAAG,SAAiB;4BAE1B,qBAAM,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAA;;iCAAtC,SAAsC,EAAtC,wBAAsC;4BACxC,sBAAO,OAAO,EAAC;gCACN,qBAAM,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAA;;4BAA1C,IAAI,SAAsC,EAAE;gCACjD,sBAAO,OAAO,EAAC;6BAChB;;gCAED,sBAAO,QAAQ,EAAC;;;;SACjB;;QAGK,kCAAQ,GAAd;;;;gCACU,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;gCAAzB,sBAAO,CAAC,SAAiB,EAAE,QAAQ,CAAC,kBAAkB,CAAC,EAAC;;;;SACzD;;QAGK,oCAAU,GAAhB;;;;gCACU,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;gCAAzB,sBAAO,CAAC,SAAiB,EAAE,QAAQ,CAAC,oBAAoB,CAAC,EAAC;;;;SAC3D;QAnEM,4BAAY,GAAG,YAAY,CAAC;QAoErC,sBAAC;KAAA,CArEoCC,wBAAgB;;ICjBrD;;;;;;OAMG;;ICNH;;;;;;OAMG;;;;;;;;;;;;"}