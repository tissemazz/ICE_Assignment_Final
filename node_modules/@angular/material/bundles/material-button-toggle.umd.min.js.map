{"version":3,"sources":["src/material/material-button-toggle.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","buttonToggle","tslib","cdk","a11y","coercion","collections","core","forms","this","core$1","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","InjectionToken","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatButtonToggleGroup","multi","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","source","value","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","EventEmitter","change","appearance","Object","defineProperty","prototype","get","set","_this","_buttonToggles","forEach","toggle","name","_markForCheck","enumerable","configurable","coerceBooleanProperty","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","ngOnInit","SelectionModel","ngAfterContentInit","_a","select","apply","__spread","filter","checked","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_emitChangeEvent","Array","isArray","length","event","_syncButtonToggle","isUserInput","deferEvents","deselect","Promise","resolve","_updateModelValue","_isSelected","isSelected","_isPrechecked","_rawValue","some","Error","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","decorators","type","Directive","args","selector","providers","host","role","class","[attr.aria-disabled]","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","exportAs","ctorParameters","ChangeDetectorRef","Optional","Inject","propDecorators","ContentChildren","MatButtonToggle","descendants","Input","vertical","Output","_super","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","call","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","__extends","id","_appearance","_type","monitor","ngOnDestroy","group","stopMonitoring","focus","options","_buttonElement","nativeElement","_onButtonClick","newChecked","Component","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","inputs","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.tabindex]","[attr.id]","[attr.name]","(focus)","styles","ElementRef","FocusMonitor","String","Attribute","ariaLabel","ViewChild","mixinDisableRipple","MatButtonToggleBase","MatButtonToggleModule","NgModule","imports","MatCommonModule","MatRippleModule","declarations"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/a11y'), require('@angular/cdk/coercion'), require('@angular/cdk/collections'), require('@angular/core'), require('@angular/forms'), require('@angular/material/core')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/button-toggle', ['exports', 'tslib', '@angular/cdk/a11y', '@angular/cdk/coercion', '@angular/cdk/collections', '@angular/core', '@angular/forms', '@angular/material/core'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.buttonToggle = {}), global.tslib, global.ng.cdk.a11y, global.ng.cdk.coercion, global.ng.cdk.collections, global.ng.core, global.ng.forms, global.ng.material.core));\n}(this, (function (exports, tslib, a11y, coercion, collections, core, forms, core$1) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token that can be used to configure the\n     * default options for all button toggles within an app.\n     */\n    var MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new core.InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n    /**\n     * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n     * This allows it to support [(ngModel)].\n     * @docs-private\n     */\n    var MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        useExisting: core.forwardRef(function () { return MatButtonToggleGroup; }),\n        multi: true\n    };\n    /**\n     * @deprecated Use `MatButtonToggleGroup` instead.\n     * @breaking-change 8.0.0\n     */\n    var MatButtonToggleGroupMultiple = /** @class */ (function () {\n        function MatButtonToggleGroupMultiple() {\n        }\n        return MatButtonToggleGroupMultiple;\n    }());\n    var _uniqueIdCounter = 0;\n    /** Change event object emitted by MatButtonToggle. */\n    var MatButtonToggleChange = /** @class */ (function () {\n        function MatButtonToggleChange(\n        /** The MatButtonToggle that emits the event. */\n        source, \n        /** The value assigned to the MatButtonToggle. */\n        value) {\n            this.source = source;\n            this.value = value;\n        }\n        return MatButtonToggleChange;\n    }());\n    /** Exclusive selection button toggle group that behaves like a radio-button group. */\n    var MatButtonToggleGroup = /** @class */ (function () {\n        function MatButtonToggleGroup(_changeDetector, defaultOptions) {\n            this._changeDetector = _changeDetector;\n            this._vertical = false;\n            this._multiple = false;\n            this._disabled = false;\n            /**\n             * The method to be called in order to update ngModel.\n             * Now `ngModel` binding is not supported in multiple selection mode.\n             */\n            this._controlValueAccessorChangeFn = function () { };\n            /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n            this._onTouched = function () { };\n            this._name = \"mat-button-toggle-group-\" + _uniqueIdCounter++;\n            /**\n             * Event that emits whenever the value of the group changes.\n             * Used to facilitate two-way data binding.\n             * @docs-private\n             */\n            this.valueChange = new core.EventEmitter();\n            /** Event emitted when the group's value changes. */\n            this.change = new core.EventEmitter();\n            this.appearance =\n                defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n        }\n        Object.defineProperty(MatButtonToggleGroup.prototype, \"name\", {\n            /** `name` attribute for the underlying `input` element. */\n            get: function () { return this._name; },\n            set: function (value) {\n                var _this = this;\n                this._name = value;\n                if (this._buttonToggles) {\n                    this._buttonToggles.forEach(function (toggle) {\n                        toggle.name = _this._name;\n                        toggle._markForCheck();\n                    });\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggleGroup.prototype, \"vertical\", {\n            /** Whether the toggle group is vertical. */\n            get: function () { return this._vertical; },\n            set: function (value) {\n                this._vertical = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggleGroup.prototype, \"value\", {\n            /** Value of the toggle group. */\n            get: function () {\n                var selected = this._selectionModel ? this._selectionModel.selected : [];\n                if (this.multiple) {\n                    return selected.map(function (toggle) { return toggle.value; });\n                }\n                return selected[0] ? selected[0].value : undefined;\n            },\n            set: function (newValue) {\n                this._setSelectionByValue(newValue);\n                this.valueChange.emit(this.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggleGroup.prototype, \"selected\", {\n            /** Selected button toggles in the group. */\n            get: function () {\n                var selected = this._selectionModel ? this._selectionModel.selected : [];\n                return this.multiple ? selected : (selected[0] || null);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggleGroup.prototype, \"multiple\", {\n            /** Whether multiple button toggles can be selected. */\n            get: function () { return this._multiple; },\n            set: function (value) {\n                this._multiple = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggleGroup.prototype, \"disabled\", {\n            /** Whether multiple button toggle group is disabled. */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                if (this._buttonToggles) {\n                    this._buttonToggles.forEach(function (toggle) { return toggle._markForCheck(); });\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatButtonToggleGroup.prototype.ngOnInit = function () {\n            this._selectionModel = new collections.SelectionModel(this.multiple, undefined, false);\n        };\n        MatButtonToggleGroup.prototype.ngAfterContentInit = function () {\n            var _a;\n            (_a = this._selectionModel).select.apply(_a, tslib.__spread(this._buttonToggles.filter(function (toggle) { return toggle.checked; })));\n        };\n        /**\n         * Sets the model value. Implemented as part of ControlValueAccessor.\n         * @param value Value to be set to the model.\n         */\n        MatButtonToggleGroup.prototype.writeValue = function (value) {\n            this.value = value;\n            this._changeDetector.markForCheck();\n        };\n        // Implemented as part of ControlValueAccessor.\n        MatButtonToggleGroup.prototype.registerOnChange = function (fn) {\n            this._controlValueAccessorChangeFn = fn;\n        };\n        // Implemented as part of ControlValueAccessor.\n        MatButtonToggleGroup.prototype.registerOnTouched = function (fn) {\n            this._onTouched = fn;\n        };\n        // Implemented as part of ControlValueAccessor.\n        MatButtonToggleGroup.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n        };\n        /** Dispatch change event with current selection and group value. */\n        MatButtonToggleGroup.prototype._emitChangeEvent = function () {\n            var selected = this.selected;\n            var source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n            var event = new MatButtonToggleChange(source, this.value);\n            this._controlValueAccessorChangeFn(event.value);\n            this.change.emit(event);\n        };\n        /**\n         * Syncs a button toggle's selected state with the model value.\n         * @param toggle Toggle to be synced.\n         * @param select Whether the toggle should be selected.\n         * @param isUserInput Whether the change was a result of a user interaction.\n         * @param deferEvents Whether to defer emitting the change events.\n         */\n        MatButtonToggleGroup.prototype._syncButtonToggle = function (toggle, select, isUserInput, deferEvents) {\n            var _this = this;\n            if (isUserInput === void 0) { isUserInput = false; }\n            if (deferEvents === void 0) { deferEvents = false; }\n            // Deselect the currently-selected toggle, if we're in single-selection\n            // mode and the button being toggled isn't selected at the moment.\n            if (!this.multiple && this.selected && !toggle.checked) {\n                this.selected.checked = false;\n            }\n            if (this._selectionModel) {\n                if (select) {\n                    this._selectionModel.select(toggle);\n                }\n                else {\n                    this._selectionModel.deselect(toggle);\n                }\n            }\n            else {\n                deferEvents = true;\n            }\n            // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n            // the side-effect is that we may end up updating the model value out of sequence in others\n            // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n            if (deferEvents) {\n                Promise.resolve(function () { return _this._updateModelValue(isUserInput); });\n            }\n            else {\n                this._updateModelValue(isUserInput);\n            }\n        };\n        /** Checks whether a button toggle is selected. */\n        MatButtonToggleGroup.prototype._isSelected = function (toggle) {\n            return this._selectionModel && this._selectionModel.isSelected(toggle);\n        };\n        /** Determines whether a button toggle should be checked on init. */\n        MatButtonToggleGroup.prototype._isPrechecked = function (toggle) {\n            if (typeof this._rawValue === 'undefined') {\n                return false;\n            }\n            if (this.multiple && Array.isArray(this._rawValue)) {\n                return this._rawValue.some(function (value) { return toggle.value != null && value === toggle.value; });\n            }\n            return toggle.value === this._rawValue;\n        };\n        /** Updates the selection state of the toggles in the group based on a value. */\n        MatButtonToggleGroup.prototype._setSelectionByValue = function (value) {\n            var _this = this;\n            this._rawValue = value;\n            if (!this._buttonToggles) {\n                return;\n            }\n            if (this.multiple && value) {\n                if (!Array.isArray(value)) {\n                    throw Error('Value must be an array in multiple-selection mode.');\n                }\n                this._clearSelection();\n                value.forEach(function (currentValue) { return _this._selectValue(currentValue); });\n            }\n            else {\n                this._clearSelection();\n                this._selectValue(value);\n            }\n        };\n        /** Clears the selected toggles. */\n        MatButtonToggleGroup.prototype._clearSelection = function () {\n            this._selectionModel.clear();\n            this._buttonToggles.forEach(function (toggle) { return toggle.checked = false; });\n        };\n        /** Selects a value if there's a toggle that corresponds to it. */\n        MatButtonToggleGroup.prototype._selectValue = function (value) {\n            var correspondingOption = this._buttonToggles.find(function (toggle) {\n                return toggle.value != null && toggle.value === value;\n            });\n            if (correspondingOption) {\n                correspondingOption.checked = true;\n                this._selectionModel.select(correspondingOption);\n            }\n        };\n        /** Syncs up the group's value with the model and emits the change event. */\n        MatButtonToggleGroup.prototype._updateModelValue = function (isUserInput) {\n            // Only emit the change event for user input.\n            if (isUserInput) {\n                this._emitChangeEvent();\n            }\n            // Note: we emit this one no matter whether it was a user interaction, because\n            // it is used by Angular to sync up the two-way data binding.\n            this.valueChange.emit(this.value);\n        };\n        MatButtonToggleGroup.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-button-toggle-group',\n                        providers: [\n                            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                            { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n                        ],\n                        host: {\n                            'role': 'group',\n                            'class': 'mat-button-toggle-group',\n                            '[attr.aria-disabled]': 'disabled',\n                            '[class.mat-button-toggle-vertical]': 'vertical',\n                            '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n                        },\n                        exportAs: 'matButtonToggleGroup',\n                    },] }\n        ];\n        /** @nocollapse */\n        MatButtonToggleGroup.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n        ]; };\n        MatButtonToggleGroup.propDecorators = {\n            _buttonToggles: [{ type: core.ContentChildren, args: [core.forwardRef(function () { return MatButtonToggle; }), {\n                            // Note that this would technically pick up toggles\n                            // from nested groups, but that's not a case that we support.\n                            descendants: true\n                        },] }],\n            appearance: [{ type: core.Input }],\n            name: [{ type: core.Input }],\n            vertical: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            valueChange: [{ type: core.Output }],\n            multiple: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            change: [{ type: core.Output }]\n        };\n        return MatButtonToggleGroup;\n    }());\n    // Boilerplate for applying mixins to the MatButtonToggle class.\n    /** @docs-private */\n    var MatButtonToggleBase = /** @class */ (function () {\n        function MatButtonToggleBase() {\n        }\n        return MatButtonToggleBase;\n    }());\n    var _MatButtonToggleMixinBase = core$1.mixinDisableRipple(MatButtonToggleBase);\n    /** Single button inside of a toggle group. */\n    var MatButtonToggle = /** @class */ (function (_super) {\n        tslib.__extends(MatButtonToggle, _super);\n        function MatButtonToggle(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, \n        // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n        defaultTabIndex, defaultOptions) {\n            var _this = _super.call(this) || this;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._elementRef = _elementRef;\n            _this._focusMonitor = _focusMonitor;\n            _this._isSingleSelector = false;\n            _this._checked = false;\n            /**\n             * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n             */\n            _this.ariaLabelledby = null;\n            _this._disabled = false;\n            /** Event emitted when the group value changes. */\n            _this.change = new core.EventEmitter();\n            var parsedTabIndex = Number(defaultTabIndex);\n            _this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n            _this.buttonToggleGroup = toggleGroup;\n            _this.appearance =\n                defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n            return _this;\n        }\n        Object.defineProperty(MatButtonToggle.prototype, \"buttonId\", {\n            /** Unique ID for the underlying `button` element. */\n            get: function () { return this.id + \"-button\"; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggle.prototype, \"appearance\", {\n            /** The appearance style of the button. */\n            get: function () {\n                return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n            },\n            set: function (value) {\n                this._appearance = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggle.prototype, \"checked\", {\n            /** Whether the button is checked. */\n            get: function () {\n                return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n            },\n            set: function (value) {\n                var newValue = coercion.coerceBooleanProperty(value);\n                if (newValue !== this._checked) {\n                    this._checked = newValue;\n                    if (this.buttonToggleGroup) {\n                        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n                    }\n                    this._changeDetectorRef.markForCheck();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggle.prototype, \"disabled\", {\n            /** Whether the button is disabled. */\n            get: function () {\n                return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n            },\n            set: function (value) { this._disabled = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        MatButtonToggle.prototype.ngOnInit = function () {\n            this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n            this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n            this.id = this.id || \"mat-button-toggle-\" + _uniqueIdCounter++;\n            if (this._isSingleSelector) {\n                this.name = this.buttonToggleGroup.name;\n            }\n            if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n                this.checked = true;\n            }\n            this._focusMonitor.monitor(this._elementRef, true);\n        };\n        MatButtonToggle.prototype.ngOnDestroy = function () {\n            var group = this.buttonToggleGroup;\n            this._focusMonitor.stopMonitoring(this._elementRef);\n            // Remove the toggle from the selection once it's destroyed. Needs to happen\n            // on the next tick in order to avoid \"changed after checked\" errors.\n            if (group && group._isSelected(this)) {\n                group._syncButtonToggle(this, false, false, true);\n            }\n        };\n        /** Focuses the button. */\n        MatButtonToggle.prototype.focus = function (options) {\n            this._buttonElement.nativeElement.focus(options);\n        };\n        /** Checks the button toggle due to an interaction with the underlying native button. */\n        MatButtonToggle.prototype._onButtonClick = function () {\n            var newChecked = this._isSingleSelector ? true : !this._checked;\n            if (newChecked !== this._checked) {\n                this._checked = newChecked;\n                if (this.buttonToggleGroup) {\n                    this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                    this.buttonToggleGroup._onTouched();\n                }\n            }\n            // Emit a change event when it's the single selector\n            this.change.emit(new MatButtonToggleChange(this, this.value));\n        };\n        /**\n         * Marks the button toggle as needing checking for change detection.\n         * This method is exposed because the parent button toggle group will directly\n         * update bound properties of the radio button.\n         */\n        MatButtonToggle.prototype._markForCheck = function () {\n            // When the group value changes, the button will not be notified.\n            // Use `markForCheck` to explicit update button toggle's status.\n            this._changeDetectorRef.markForCheck();\n        };\n        MatButtonToggle.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-button-toggle',\n                        template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <div class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</button>\\n\\n<div class=\\\"mat-button-toggle-focus-overlay\\\"></div>\\n<div class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</div>\\n\",\n                        encapsulation: core.ViewEncapsulation.None,\n                        exportAs: 'matButtonToggle',\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        inputs: ['disableRipple'],\n                        host: {\n                            '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                            '[class.mat-button-toggle-checked]': 'checked',\n                            '[class.mat-button-toggle-disabled]': 'disabled',\n                            '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                            'class': 'mat-button-toggle mat-focus-indicator',\n                            // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n                            // but can still receive focus from things like cdkFocusInitial.\n                            '[attr.tabindex]': '-1',\n                            '[attr.id]': 'id',\n                            '[attr.name]': 'null',\n                            '(focus)': 'focus()',\n                        },\n                        styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatButtonToggle.ctorParameters = function () { return [\n            { type: MatButtonToggleGroup, decorators: [{ type: core.Optional }] },\n            { type: core.ChangeDetectorRef },\n            { type: core.ElementRef },\n            { type: a11y.FocusMonitor },\n            { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n        ]; };\n        MatButtonToggle.propDecorators = {\n            ariaLabel: [{ type: core.Input, args: ['aria-label',] }],\n            ariaLabelledby: [{ type: core.Input, args: ['aria-labelledby',] }],\n            _buttonElement: [{ type: core.ViewChild, args: ['button',] }],\n            id: [{ type: core.Input }],\n            name: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            tabIndex: [{ type: core.Input }],\n            appearance: [{ type: core.Input }],\n            checked: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            change: [{ type: core.Output }]\n        };\n        return MatButtonToggle;\n    }(_MatButtonToggleMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatButtonToggleModule = /** @class */ (function () {\n        function MatButtonToggleModule() {\n        }\n        MatButtonToggleModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [core$1.MatCommonModule, core$1.MatRippleModule],\n                        exports: [core$1.MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                        declarations: [MatButtonToggleGroup, MatButtonToggle],\n                    },] }\n        ];\n        return MatButtonToggleModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS;\n    exports.MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR;\n    exports.MatButtonToggle = MatButtonToggle;\n    exports.MatButtonToggleChange = MatButtonToggleChange;\n    exports.MatButtonToggleGroup = MatButtonToggleGroup;\n    exports.MatButtonToggleGroupMultiple = MatButtonToggleGroupMultiple;\n    exports.MatButtonToggleModule = MatButtonToggleModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-button-toggle.umd.js.map\n"]}