{"version":3,"file":"material-progress-spinner-testing.umd.js","sources":["../../../../../../../src/material/progress-spinner/testing/progress-spinner-harness.ts","../../../../../../../src/material/progress-spinner/testing/public-api.ts","../../../../../../../src/material/progress-spinner/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {ProgressSpinnerMode} from '@angular/material/progress-spinner';\nimport {ProgressSpinnerHarnessFilters} from './progress-spinner-harness-filters';\n\n/** Harness for interacting with a standard mat-progress-spinner in tests. */\nexport class MatProgressSpinnerHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatProgressSpinner` instance. */\n  static hostSelector = 'mat-progress-spinner';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatProgressSpinnerHarness` that\n   * meets certain criteria.\n   * @param options Options for filtering which progress spinner instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: ProgressSpinnerHarnessFilters = {}):\n      HarnessPredicate<MatProgressSpinnerHarness> {\n    return new HarnessPredicate(MatProgressSpinnerHarness, options);\n  }\n\n  /** Gets the progress spinner's value. */\n  async getValue(): Promise<number|null> {\n    const host = await this.host();\n    const ariaValue = await host.getAttribute('aria-valuenow');\n    return ariaValue ? coerceNumberProperty(ariaValue) : null;\n  }\n\n  /** Gets the progress spinner's mode. */\n  async getMode(): Promise<ProgressSpinnerMode> {\n    const modeAttr = (await this.host()).getAttribute('mode');\n    return await modeAttr as ProgressSpinnerMode;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './progress-spinner-harness';\nexport * from './progress-spinner-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["__extends","HarnessPredicate","coerceNumberProperty","ComponentHarness"],"mappings":";;;;;;IAAA;;;;;;;IAaA;AACA;QAA+CA,mDAAgB;QAA/D;;SA2BC;;;;;;;QAjBQ,8BAAI,GAAX,UAAY,OAA2C;YAA3C,wBAAA,EAAA,YAA2C;YAErD,OAAO,IAAIC,wBAAgB,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC;SACjE;;QAGK,4CAAQ,GAAd;;;;;gCACe,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;4BAAxB,IAAI,GAAG,SAAiB;4BACZ,qBAAM,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,EAAA;;4BAApD,SAAS,GAAG,SAAwC;4BAC1D,sBAAO,SAAS,GAAGC,6BAAoB,CAAC,SAAS,CAAC,GAAG,IAAI,EAAC;;;;SAC3D;;QAGK,2CAAO,GAAb;;;;;gCACoB,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;4BAA7B,QAAQ,GAAG,CAAC,SAAiB,EAAE,YAAY,CAAC,MAAM,CAAC;4BAClD,qBAAM,QAAQ,EAAA;gCAArB,sBAAO,SAAqC,EAAC;;;;SAC9C;;QAxBM,sCAAY,GAAG,sBAAsB,CAAC;QAyB/C,gCAAC;KAAA,CA3B8CC,wBAAgB;;ICd/D;;;;;;OAMG;;ICNH;;;;;;OAMG;;;;;;;;;;;;"}